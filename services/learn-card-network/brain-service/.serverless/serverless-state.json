{
  "service": {
    "service": "lcn-profile-service",
    "serviceObject": {
      "name": "lcn-profile-service"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs16.x",
      "stage": "dev",
      "region": "us-east-1",
      "environment": {
        "LAMBDA_STAGE": "production",
        "NEO4J_URI": "neo4j+s://ab9edde2.databases.neo4j.io",
        "NEO4J_USERNAME": "neo4j",
        "NEO4J_PASSWORD": "V58sFdxds9E42A62bD1oA39AONg8fl8tNSMXCCQomow",
        "AURA_INSTANCENAME": "Instance01",
        "REDIS_HOST": {
          "Fn::GetAtt": [
            "ElasticCacheCluster",
            "RedisEndpoint.Address"
          ]
        },
        "REDIS_PORT": {
          "Fn::GetAtt": [
            "ElasticCacheCluster",
            "RedisEndpoint.Port"
          ]
        }
      },
      "tracing": {
        "apiGateway": true,
        "lambda": true
      },
      "httpApi": {
        "cors": true
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "TrpcLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lcn-profile-service-dev-trpc"
            }
          },
          "ApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lcn-profile-service-dev-api"
            }
          },
          "DidWebLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lcn-profile-service-dev-didWeb"
            }
          },
          "SwaggerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lcn-profile-service-dev-swagger"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "lcn-profile-service",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/lcn-profile-service-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/lcn-profile-service-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "xray:PutTraceSegments",
                          "xray:PutTelemetryRecords"
                        ],
                        "Resource": [
                          "*"
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "lcn-profile-service",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                    ]
                  ]
                }
              ]
            }
          },
          "TrpcLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lcn-profile-service/dev/1674770166430-2023-01-26T21:56:06.430Z/lcn-profile-service.zip"
              },
              "Handler": "lambda.trpcHandler",
              "Runtime": "nodejs16.x",
              "FunctionName": "lcn-profile-service-dev-trpc",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "LAMBDA_STAGE": "production",
                  "NEO4J_URI": "neo4j+s://ab9edde2.databases.neo4j.io",
                  "NEO4J_USERNAME": "neo4j",
                  "NEO4J_PASSWORD": "V58sFdxds9E42A62bD1oA39AONg8fl8tNSMXCCQomow",
                  "AURA_INSTANCENAME": "Instance01",
                  "REDIS_HOST": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"REDIS_HOST\"]"
                  },
                  "REDIS_PORT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"REDIS_PORT\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": [
                  {
                    "Fn::GetAtt": [
                      "ServerlessSecurityGroup",
                      "GroupId"
                    ]
                  }
                ],
                "SubnetIds": [
                  {
                    "Ref": "PrivateSubnetA"
                  }
                ]
              }
            },
            "DependsOn": [
              "TrpcLogGroup"
            ]
          },
          "ApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lcn-profile-service/dev/1674770166430-2023-01-26T21:56:06.430Z/lcn-profile-service.zip"
              },
              "Handler": "lambda.openApiHandler",
              "Runtime": "nodejs16.x",
              "FunctionName": "lcn-profile-service-dev-api",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "LAMBDA_STAGE": "production",
                  "NEO4J_URI": "neo4j+s://ab9edde2.databases.neo4j.io",
                  "NEO4J_USERNAME": "neo4j",
                  "NEO4J_PASSWORD": "V58sFdxds9E42A62bD1oA39AONg8fl8tNSMXCCQomow",
                  "AURA_INSTANCENAME": "Instance01",
                  "REDIS_HOST": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"REDIS_HOST\"]"
                  },
                  "REDIS_PORT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"REDIS_PORT\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": [
                  {
                    "Fn::GetAtt": [
                      "ServerlessSecurityGroup",
                      "GroupId"
                    ]
                  }
                ],
                "SubnetIds": [
                  {
                    "Ref": "PrivateSubnetA"
                  }
                ]
              }
            },
            "DependsOn": [
              "ApiLogGroup"
            ]
          },
          "DidWebLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lcn-profile-service/dev/1674770166430-2023-01-26T21:56:06.430Z/lcn-profile-service.zip"
              },
              "Handler": "lambda.didWebHandler",
              "Runtime": "nodejs16.x",
              "FunctionName": "lcn-profile-service-dev-didWeb",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "LAMBDA_STAGE": "production",
                  "NEO4J_URI": "neo4j+s://ab9edde2.databases.neo4j.io",
                  "NEO4J_USERNAME": "neo4j",
                  "NEO4J_PASSWORD": "V58sFdxds9E42A62bD1oA39AONg8fl8tNSMXCCQomow",
                  "AURA_INSTANCENAME": "Instance01",
                  "REDIS_HOST": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"REDIS_HOST\"]"
                  },
                  "REDIS_PORT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"REDIS_PORT\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DidWebLogGroup"
            ]
          },
          "SwaggerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lcn-profile-service/dev/1674770166430-2023-01-26T21:56:06.430Z/lcn-profile-service.zip"
              },
              "Handler": "lambda.swaggerUiHandler",
              "Runtime": "nodejs16.x",
              "FunctionName": "lcn-profile-service-dev-swagger",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "LAMBDA_STAGE": "production",
                  "NEO4J_URI": "neo4j+s://ab9edde2.databases.neo4j.io",
                  "NEO4J_USERNAME": "neo4j",
                  "NEO4J_PASSWORD": "V58sFdxds9E42A62bD1oA39AONg8fl8tNSMXCCQomow",
                  "AURA_INSTANCENAME": "Instance01",
                  "REDIS_HOST": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"REDIS_HOST\"]"
                  },
                  "REDIS_PORT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"REDIS_PORT\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SwaggerLogGroup"
            ]
          },
          "TrpcLambdaVersionY18ncvCLL7bRob803uyUMgdlu3yh3UFa9RGVyqe2LA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "TrpcLambdaFunction"
              },
              "CodeSha256": "LPBpOR7HSJ7ut8JgEKTnw0LOYu+Xt/AqQLks/R110zI="
            }
          },
          "ApiLambdaVersion6Lnx5z9S11zcqIwuSQZbsTXhY2RRYD2ueaQ2t4sO38": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ApiLambdaFunction"
              },
              "CodeSha256": "LPBpOR7HSJ7ut8JgEKTnw0LOYu+Xt/AqQLks/R110zI="
            }
          },
          "DidWebLambdaVersionnBjtZcIMXGJeqfdpPfPpOELPPt8XVuDqBmBVhyjhU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DidWebLambdaFunction"
              },
              "CodeSha256": "LPBpOR7HSJ7ut8JgEKTnw0LOYu+Xt/AqQLks/R110zI="
            }
          },
          "SwaggerLambdaVersionMa3YQKlYImSddyHO22MAsmhli7Cg5t52B9DK74udc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SwaggerLambdaFunction"
              },
              "CodeSha256": "LPBpOR7HSJ7ut8JgEKTnw0LOYu+Xt/AqQLks/R110zI="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-lcn-profile-service",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowHeaders": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "AllowMethods": [
                  "OPTIONS",
                  "GET",
                  "POST",
                  "PUT",
                  "PATCH",
                  "HEAD",
                  "DELETE"
                ],
                "AllowOrigins": [
                  "*"
                ]
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "TrpcLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "TrpcLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationTrpc": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"TrpcLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteAnyTrpcTrpcVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "ANY /trpc/{trpc+}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationTrpc"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationTrpc"
          },
          "ApiLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationApi": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteAnyApiTrpcVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "ANY /api/{trpc+}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "DidWebLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DidWebLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDidWeb": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DidWebLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetUsersParamsVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /users/{params+}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDidWeb"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDidWeb"
          },
          "SwaggerLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SwaggerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSwagger": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SwaggerLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetDocs": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /docs",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSwagger"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSwagger"
          },
          "HttpApiRouteGetDocsTrpcVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /docs/{trpc+}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSwagger"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSwagger"
          },
          "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
              "CidrBlock": "10.0.0.0/16"
            }
          },
          "IP": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
              "Domain": "vpc"
            }
          },
          "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
          },
          "VPCGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "InternetGatewayId": {
                "Ref": "InternetGateway"
              }
            }
          },
          "NatGateway": {
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
              "AllocationId": {
                "Fn::GetAtt": [
                  "IP",
                  "AllocationId"
                ]
              },
              "SubnetId": {
                "Ref": "PublicSubnetA"
              }
            }
          },
          "PrivateSubnetA": {
            "DependsOn": [
              "VPC"
            ],
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "AvailabilityZone": "us-east-1a",
              "CidrBlock": "10.0.1.0/24"
            }
          },
          "PublicSubnetA": {
            "DependsOn": [
              "VPC"
            ],
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "AvailabilityZone": "us-east-1a",
              "CidrBlock": "10.0.2.0/24"
            }
          },
          "PrivateRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              }
            }
          },
          "PrivateRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
              "RouteTableId": {
                "Ref": "PrivateRouteTable"
              },
              "DestinationCidrBlock": "0.0.0.0/0",
              "NatGatewayId": {
                "Ref": "NatGateway"
              }
            }
          },
          "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              }
            }
          },
          "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
              "RouteTableId": {
                "Ref": "PublicRouteTable"
              },
              "DestinationCidrBlock": "0.0.0.0/0",
              "GatewayId": {
                "Ref": "InternetGateway"
              }
            }
          },
          "SubnetRouteTableAssociationLambdaPrivateA": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "SubnetId": {
                "Ref": "PrivateSubnetA"
              },
              "RouteTableId": {
                "Ref": "PrivateRouteTable"
              }
            }
          },
          "SubnetRouteTableAssociationLambdaPublicA": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "SubnetId": {
                "Ref": "PublicSubnetA"
              },
              "RouteTableId": {
                "Ref": "PublicRouteTable"
              }
            }
          },
          "ServerlessSecurityGroup": {
            "DependsOn": [
              "VPC"
            ],
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
              "GroupDescription": "SecurityGroup for Serverless Functions",
              "VpcId": {
                "Ref": "VPC"
              }
            }
          },
          "ServerlessStorageSecurityGroup": {
            "DependsOn": [
              "VPC"
            ],
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
              "GroupDescription": "Ingress for Redis Cluster",
              "VpcId": {
                "Ref": "VPC"
              },
              "SecurityGroupIngress": [
                {
                  "IpProtocol": "tcp",
                  "FromPort": "6379",
                  "ToPort": "6379",
                  "SourceSecurityGroupId": {
                    "Ref": "ServerlessSecurityGroup"
                  }
                }
              ]
            }
          },
          "ServerlessCacheSubnetGroup": {
            "Type": "AWS::ElastiCache::SubnetGroup",
            "Properties": {
              "Description": "Cache Subnet Group",
              "SubnetIds": [
                {
                  "Ref": "PrivateSubnetA"
                }
              ]
            }
          },
          "ElasticCacheCluster": {
            "DependsOn": [
              "ServerlessStorageSecurityGroup"
            ],
            "Type": "AWS::ElastiCache::CacheCluster",
            "Properties": {
              "AutoMinorVersionUpgrade": true,
              "Engine": "redis",
              "CacheNodeType": "cache.t2.micro",
              "NumCacheNodes": 1,
              "VpcSecurityGroupIds": [
                {
                  "Fn::GetAtt": [
                    "ServerlessStorageSecurityGroup",
                    "GroupId"
                  ]
                }
              ],
              "CacheSubnetGroupName": {
                "Ref": "ServerlessCacheSubnetGroup"
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-lcn-profile-service-dev-ServerlessDeploymentBucketName"
            }
          },
          "TrpcLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "TrpcLambdaVersionY18ncvCLL7bRob803uyUMgdlu3yh3UFa9RGVyqe2LA"
            },
            "Export": {
              "Name": "sls-lcn-profile-service-dev-TrpcLambdaFunctionQualifiedArn"
            }
          },
          "ApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ApiLambdaVersion6Lnx5z9S11zcqIwuSQZbsTXhY2RRYD2ueaQ2t4sO38"
            },
            "Export": {
              "Name": "sls-lcn-profile-service-dev-ApiLambdaFunctionQualifiedArn"
            }
          },
          "DidWebLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DidWebLambdaVersionnBjtZcIMXGJeqfdpPfPpOELPPt8XVuDqBmBVhyjhU"
            },
            "Export": {
              "Name": "sls-lcn-profile-service-dev-DidWebLambdaFunctionQualifiedArn"
            }
          },
          "SwaggerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SwaggerLambdaVersionMa3YQKlYImSddyHO22MAsmhli7Cg5t52B9DK74udc"
            },
            "Export": {
              "Name": "sls-lcn-profile-service-dev-SwaggerLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-lcn-profile-service-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-lcn-profile-service-dev-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "config": {
        "CACHE_INSTANCE_SIZE": "cache.t2.micro"
      },
      "esbuild": {
        "packager": "pnpm",
        "plugins": "esbuildWasmPlugin.cjs",
        "watch": {
          "pattern": [
            "src/**/*.ts"
          ]
        }
      }
    },
    "plugins": [
      "serverless-esbuild",
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "trpc": {
        "handler": "lambda.trpcHandler",
        "vpc": {
          "securityGroupIds": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"TrpcLambdaFunction\"][\"Properties\"][\"VpcConfig\"][\"SecurityGroupIds\"]"
          },
          "subnetIds": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"TrpcLambdaFunction\"][\"Properties\"][\"VpcConfig\"][\"SubnetIds\"]"
          }
        },
        "events": [
          {
            "httpApi": "ANY /trpc/{trpc+}",
            "resolvedMethod": "ANY",
            "resolvedPath": "/trpc/{trpc+}"
          }
        ],
        "name": "lcn-profile-service-dev-trpc",
        "package": {
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "versionLogicalId": "TrpcLambdaVersionY18ncvCLL7bRob803uyUMgdlu3yh3UFa9RGVyqe2LA"
      },
      "api": {
        "handler": "lambda.openApiHandler",
        "vpc": {
          "securityGroupIds": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiLambdaFunction\"][\"Properties\"][\"VpcConfig\"][\"SecurityGroupIds\"]"
          },
          "subnetIds": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiLambdaFunction\"][\"Properties\"][\"VpcConfig\"][\"SubnetIds\"]"
          }
        },
        "events": [
          {
            "httpApi": "ANY /api/{trpc+}",
            "resolvedMethod": "ANY",
            "resolvedPath": "/api/{trpc+}"
          }
        ],
        "name": "lcn-profile-service-dev-api",
        "package": {
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "versionLogicalId": "ApiLambdaVersion6Lnx5z9S11zcqIwuSQZbsTXhY2RRYD2ueaQ2t4sO38"
      },
      "didWeb": {
        "handler": "lambda.didWebHandler",
        "events": [
          {
            "httpApi": "GET /users/{params+}",
            "resolvedMethod": "GET",
            "resolvedPath": "/users/{params+}"
          }
        ],
        "name": "lcn-profile-service-dev-didWeb",
        "package": {
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "DidWebLambdaVersionnBjtZcIMXGJeqfdpPfPpOELPPt8XVuDqBmBVhyjhU"
      },
      "swagger": {
        "handler": "lambda.swaggerUiHandler",
        "package": {
          "patterns": [
            "src/swagger-ui/**"
          ]
        },
        "events": [
          {
            "httpApi": "GET /docs",
            "resolvedMethod": "GET",
            "resolvedPath": "/docs"
          },
          {
            "httpApi": "GET /docs/{trpc+}",
            "resolvedMethod": "GET",
            "resolvedPath": "/docs/{trpc+}"
          }
        ],
        "name": "lcn-profile-service-dev-swagger",
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "SwaggerLambdaVersionMa3YQKlYImSddyHO22MAsmhli7Cg5t52B9DK74udc"
      }
    },
    "resources": {
      "Resources": {
        "VPC": {
          "Type": "AWS::EC2::VPC",
          "Properties": {
            "CidrBlock": "10.0.0.0/16"
          }
        },
        "IP": {
          "Type": "AWS::EC2::EIP",
          "Properties": {
            "Domain": "vpc"
          }
        },
        "InternetGateway": {
          "Type": "AWS::EC2::InternetGateway"
        },
        "VPCGatewayAttachment": {
          "Type": "AWS::EC2::VPCGatewayAttachment",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            },
            "InternetGatewayId": {
              "Ref": "InternetGateway"
            }
          }
        },
        "NatGateway": {
          "Type": "AWS::EC2::NatGateway",
          "Properties": {
            "AllocationId": {
              "Fn::GetAtt": [
                "IP",
                "AllocationId"
              ]
            },
            "SubnetId": {
              "Ref": "PublicSubnetA"
            }
          }
        },
        "PrivateSubnetA": {
          "DependsOn": [
            "VPC"
          ],
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            },
            "AvailabilityZone": "us-east-1a",
            "CidrBlock": "10.0.1.0/24"
          }
        },
        "PublicSubnetA": {
          "DependsOn": [
            "VPC"
          ],
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            },
            "AvailabilityZone": "us-east-1a",
            "CidrBlock": "10.0.2.0/24"
          }
        },
        "PrivateRouteTable": {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            }
          }
        },
        "PrivateRoute": {
          "Type": "AWS::EC2::Route",
          "Properties": {
            "RouteTableId": {
              "Ref": "PrivateRouteTable"
            },
            "DestinationCidrBlock": "0.0.0.0/0",
            "NatGatewayId": {
              "Ref": "NatGateway"
            }
          }
        },
        "PublicRouteTable": {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            }
          }
        },
        "PublicRoute": {
          "Type": "AWS::EC2::Route",
          "Properties": {
            "RouteTableId": {
              "Ref": "PublicRouteTable"
            },
            "DestinationCidrBlock": "0.0.0.0/0",
            "GatewayId": {
              "Ref": "InternetGateway"
            }
          }
        },
        "SubnetRouteTableAssociationLambdaPrivateA": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "SubnetId": {
              "Ref": "PrivateSubnetA"
            },
            "RouteTableId": {
              "Ref": "PrivateRouteTable"
            }
          }
        },
        "SubnetRouteTableAssociationLambdaPublicA": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "SubnetId": {
              "Ref": "PublicSubnetA"
            },
            "RouteTableId": {
              "Ref": "PublicRouteTable"
            }
          }
        },
        "ServerlessSecurityGroup": {
          "DependsOn": [
            "VPC"
          ],
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
            "GroupDescription": "SecurityGroup for Serverless Functions",
            "VpcId": {
              "Ref": "VPC"
            }
          }
        },
        "ServerlessStorageSecurityGroup": {
          "DependsOn": [
            "VPC"
          ],
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
            "GroupDescription": "Ingress for Redis Cluster",
            "VpcId": {
              "Ref": "VPC"
            },
            "SecurityGroupIngress": [
              {
                "IpProtocol": "tcp",
                "FromPort": "6379",
                "ToPort": "6379",
                "SourceSecurityGroupId": {
                  "Ref": "ServerlessSecurityGroup"
                }
              }
            ]
          }
        },
        "ServerlessCacheSubnetGroup": {
          "Type": "AWS::ElastiCache::SubnetGroup",
          "Properties": {
            "Description": "Cache Subnet Group",
            "SubnetIds": [
              {
                "Ref": "PrivateSubnetA"
              }
            ]
          }
        },
        "ElasticCacheCluster": {
          "DependsOn": [
            "ServerlessStorageSecurityGroup"
          ],
          "Type": "AWS::ElastiCache::CacheCluster",
          "Properties": {
            "AutoMinorVersionUpgrade": true,
            "Engine": "redis",
            "CacheNodeType": "cache.t2.micro",
            "NumCacheNodes": 1,
            "VpcSecurityGroupIds": [
              {
                "Fn::GetAtt": [
                  "ServerlessStorageSecurityGroup",
                  "GroupId"
                ]
              }
            ],
            "CacheSubnetGroupName": {
              "Ref": "ServerlessCacheSubnetGroup"
            }
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "lcn-profile-service",
      "frameworkVersion": "3",
      "useDotenv": true,
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "artifactDirectoryName": "serverless/lcn-profile-service/dev/1674770166430-2023-01-26T21:56:06.430Z",
    "artifact": "lcn-profile-service.zip"
  }
}