{"version":3,"file":"main.ts-CFEwFy1K.js","sources":["../../src/background/main.ts"],"sourcesContent":["import type {\n  CredentialCandidate,\n  ExtensionMessage,\n  GetDetectedMessage,\n  SaveCredentialMessage,\n  CredentialsDetectedMessage\n} from '../types/messages';\n\n// Track detections per tab so we can show per-tab badge counts\nconst detectedByTab: Record<number, CredentialCandidate[]> = {};\n\nconst dedupeCandidates = (list: CredentialCandidate[]): CredentialCandidate[] => {\n  const map = new Map<string, CredentialCandidate>();\n  const keyFor = (c: CredentialCandidate) => {\n    if (c.url) return `url:${c.url}`;\n    try {\n      return `raw:${JSON.stringify(c.raw)}`;\n    } catch {\n      return `raw:${String(c.title ?? '')}`;\n    }\n  };\n  for (const c of list) {\n    const k = keyFor(c);\n    if (!map.has(k)) map.set(k, c);\n  }\n  return Array.from(map.values());\n};\n\nconst storageGet = <T = unknown>(defaults: Record<string, unknown>): Promise<T> =>\n  new Promise((resolve) => {\n    chrome.storage.local.get(defaults, (items) => resolve(items as unknown as T));\n  });\n\nconst storageSet = (items: Record<string, unknown>): Promise<void> =>\n  new Promise((resolve) => {\n    chrome.storage.local.set(items, () => resolve());\n  });\n\nchrome.runtime.onInstalled.addListener(() => {\n  chrome.action.setBadgeText({ text: '' });\n});\n\nchrome.runtime.onMessage.addListener((message: ExtensionMessage, _sender, sendResponse) => {\n  switch (message.type) {\n    case 'credential-detected': {\n      const tabId = _sender.tab?.id;\n      if (typeof tabId === 'number') {\n        detectedByTab[tabId] = [message.payload];\n        chrome.action.setBadgeText({ text: '1', tabId });\n      } else {\n        // Fallback if no tabId\n        detectedByTab[-1] = [message.payload];\n        chrome.action.setBadgeText({ text: '1' });\n      }\n      sendResponse({ ok: true });\n      return; // synchronous\n    }\n    case 'credentials-detected': {\n      const msg = message as CredentialsDetectedMessage;\n      const tabId = (typeof msg.tabId === 'number' ? msg.tabId : _sender.tab?.id) ?? -1;\n      const list = msg.payload ?? [];\n      const shouldMerge = typeof msg.tabId === 'number'; // Merge when explicitly sent from popup\n      const existing = detectedByTab[tabId] ?? [];\n      const next = shouldMerge ? dedupeCandidates([...existing, ...list]) : list;\n      detectedByTab[tabId] = next;\n      if (typeof tabId === 'number') {\n        chrome.action.setBadgeText({ text: next.length ? String(next.length) : '', tabId });\n      } else {\n        chrome.action.setBadgeText({ text: next.length ? String(next.length) : '' });\n      }\n      sendResponse({ ok: true });\n      return; // synchronous\n    }\n    case 'get-detected': {\n      const msg = message as GetDetectedMessage;\n      const tabId = (typeof msg.tabId === 'number' ? msg.tabId : _sender.tab?.id) ?? -1;\n      const data = detectedByTab[tabId] ?? [];\n      sendResponse({ ok: true, data });\n      return;\n    }\n    case 'save-credential': {\n      (async () => {\n        try {\n          // TODO: Replace this stub with LearnCard SDK based persistence\n          // const learnCard = await initLearnCard({ network: true });\n          // const uri = await learnCard.store.uploadEncrypted?.(detected);\n          const msg = message as SaveCredentialMessage;\n          const tabId = (typeof msg.tabId === 'number' ? msg.tabId : _sender.tab?.id) ?? -1;\n          const toSave = (detectedByTab[tabId] ?? [])[0] ?? null;\n          const { savedCredentials } = await storageGet<{ savedCredentials: unknown[] }>({\n            savedCredentials: []\n          });\n          const next = toSave\n            ? [...savedCredentials, { ...toSave, savedAt: Date.now() }]\n            : savedCredentials;\n          await storageSet({ savedCredentials: next });\n\n          // Remove the first item only and update badge count\n          const current = detectedByTab[tabId] ?? [];\n          const remaining = current.slice(1);\n          detectedByTab[tabId] = remaining;\n          const badgeText = remaining.length ? String(remaining.length) : '';\n          if (typeof tabId === 'number' && _sender.tab?.id === tabId) {\n            chrome.action.setBadgeText({ text: badgeText, tabId });\n          } else {\n            chrome.action.setBadgeText({ text: badgeText });\n          }\n          sendResponse({ ok: true });\n        } catch (err) {\n          console.error('Failed to save credential', err);\n          sendResponse({ ok: false, error: (err as Error).message });\n        }\n      })();\n      return true; // keep channel open for async\n    }\n  }\n});\n"],"names":["detectedByTab","dedupeCandidates","list","map","keyFor","c","k","storageGet","defaults","resolve","items","storageSet","message","_sender","sendResponse","tabId","msg","shouldMerge","existing","next","data","toSave","savedCredentials","remaining","badgeText","err"],"mappings":"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"}