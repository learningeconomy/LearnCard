name: Deploy

on:
    push:
        branches:
            - main
    workflow_dispatch:
        inputs:
            network-environment:
                description: 'Choose Environment'
                required: true
                default: 'learn-card-network-api-staging'
                type: environment
            learn-cloud-environment:
                description: 'Choose Environment'
                required: true
                default: 'learn-card-storage-api-staging'
                type: environment


concurrency: ${{ github.workflow }}-${{ github.ref }}

env:
    CI: true
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    AWS_DEFAULT_REGION: us-east-1

jobs:
    determine-affected:
        name: Determine Affected Projects
        runs-on: ubuntu-latest
        outputs:
            affected: ${{ steps.affected.outputs.affected }}
        steps:
            - name: Checkout Repo
              uses: actions/checkout@v3
              with:
                  ref: ${{ github.event.pull_request.head.ref }}
                  fetch-depth: 0

            - name: Fetch main for NX comparison
              run: |
                  git fetch --no-tags --prune --depth=5 origin main

            - name: Use Composite Setup Action
              uses: ./.github/actions/setup

            - name: Get Affected List
              id: affected
              run: |
                  affected=$(pnpm exec nx print-affected --base=HEAD~1 --head=HEAD --select=projects)
                  echo "affected=$affected" >> $GITHUB_OUTPUT

    test-affected:
        name: Test Affected Projects
        needs: determine-affected
        if: needs.determine-affected.outputs.affected != ''
        runs-on: ubuntu-latest
        environment: ci-tests
        steps:
            - name: Checkout Repo
              uses: actions/checkout@v3

            - name: Use Composite Setup Action
              uses: ./.github/actions/setup

            - name: Run tests
              uses: nick-fields/retry@v2
              with:
                  timeout_minutes: 10
                  max_attempts: 3
                  command: pnpm exec nx affected --target=test --base=HEAD~1 --head=HEAD
              env:
                  SEED: ${{ secrets.SEED }}
                  LEARN_CLOUD_SEED: ${{ secrets.LEARN_CLOUD_SEED }}

    deploy-brain-service:
        name: Deploy ${{ matrix.environment }} Network API 
        needs: [determine-affected, test-affected]
        if: contains(needs.determine-affected.outputs.affected, 'network-brain-service')
        runs-on: ubuntu-latest
        strategy:
            matrix:
                environment: ${{ github.event_name == 'workflow_dispatch' && fromJSON(format('["{0}"]', github.event.inputs.network-environment)) || fromJSON('["learn-cloud-network-api-production", "scout-network-api-production"]') }}
        environment: ${{ matrix.environment }}
        steps:
            - name: Checkout Repo
              uses: actions/checkout@v3

            - name: Use Composite Setup Action
              uses: ./.github/actions/setup

            - name: Deploy Brain Service Lambda
              run: pnpm exec nx serverless-deploy network-brain-service --stage ${{ vars.SERVERLESS_STAGE }} --region ${{ vars.SERVERLESS_REGION }}

    deploy-learn-cloud:
        name: Deploy ${{ matrix.environment }} Storage API
        needs: [determine-affected, test-affected]
        if: contains(needs.determine-affected.outputs.affected, 'learn-cloud-service')
        runs-on: ubuntu-latest
        strategy:
            matrix:
                environment: ${{ github.event_name == 'workflow_dispatch' && fromJSON(format('["{0}"]', github.event.inputs.learn-cloud-environment)) || fromJSON('["learn-cloud-storage-api-production", "scout-storage-api-production"]') }}
        environment: ${{ matrix.environment }}
        steps:
            - name: Checkout Repo
              uses: actions/checkout@v3

            - name: Use Composite Setup Action
              uses: ./.github/actions/setup

            - name: Deploy LearnCloud Lambda
              run: pnpm exec nx serverless-deploy learn-cloud-service --stage ${{ vars.SERVERLESS_STAGE }} --region ${{ vars.SERVERLESS_REGION }}

    generate-sdk:
        name: Generate SDK Clients for LearnCloud Network API
        needs: [determine-affected, deploy-brain-service]
        if: contains(needs.determine-affected.outputs.affected, 'network-brain-service')
        uses: ./.github/workflows/open-api-generator.yml
        with:
            affected: ${{ needs.determine-affected.outputs.affected }}
