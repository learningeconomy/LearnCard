{"version":3,"file":"index.mjs","sources":["../src/abnf.ts","../src/siwe.ts","../src/cacao.ts"],"sourcesContent":["import apgApi from 'apg-js/src/apg-api/api.js'\nimport apgLib from 'apg-js/src/apg-lib/node-exports.js'\n\nconst GRAMMAR = `\nsign-in-with-ethereum =\n    domain %s\" wants you to sign in with your Ethereum account:\" LF\n    address LF\n    LF\n    [ statement LF ]\n    LF\n    %s\"URI: \" URI LF\n    %s\"Version: \" version LF\n    %s\"Nonce: \" nonce LF\n    %s\"Issued At: \" issued-at\n    [ LF %s\"Expiration Time: \" expiration-time ]\n    [ LF %s\"Not Before: \" not-before ]\n    [ LF %s\"Request ID: \" request-id ]\n    [ LF %s\"Chain ID: \" chain-id ]\n    [ LF %s\"Resources:\"\n    resources ]\n\ndomain = dnsauthority\n\naddress = \"0x\" 40*40HEXDIG\n    ; Must also conform to captilization\n    ; checksum encoding specified in EIP-55\n    ; where applicable (EOAs).\n\nstatement = *( reserved / unreserved / \" \" )\n    ; The purpose is to exclude LF (line breaks).\n\nversion = \"1\"\n\nnonce = 8*( ALPHA / DIGIT )\n\nissued-at = date-time\nexpiration-time = date-time\nnot-before = date-time\n\nrequest-id = *pchar\n\nchain-id = 1*DIGIT\n    ; See EIP-155 for valid CHAIN_IDs.\n\nresources = *( LF resource )\n\nresource = \"- \" URI\n\n; ------------------------------------------------------------------------------\n; RFC 3986\n\nURI           = scheme \":\" hier-part [ \"?\" query ] [ \"#\" fragment ]\n\nhier-part     = \"//\" authority path-abempty\n              / path-absolute\n              / path-rootless\n              / path-empty\n\nscheme        = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n\nauthority     = [ userinfo \"@\" ] host [ \":\" port ]\nuserinfo      = *( unreserved / pct-encoded / sub-delims / \":\" )\nhost          = IP-literal / IPv4address / reg-name\nport          = *DIGIT\n\nIP-literal    = \"[\" ( IPv6address / IPvFuture  ) \"]\"\n\nIPvFuture     = \"v\" 1*HEXDIG \".\" 1*( unreserved / sub-delims / \":\" )\n\nIPv6address   =                            6( h16 \":\" ) ls32\n              /                       \"::\" 5( h16 \":\" ) ls32\n              / [               h16 ] \"::\" 4( h16 \":\" ) ls32\n              / [ *1( h16 \":\" ) h16 ] \"::\" 3( h16 \":\" ) ls32\n              / [ *2( h16 \":\" ) h16 ] \"::\" 2( h16 \":\" ) ls32\n              / [ *3( h16 \":\" ) h16 ] \"::\"    h16 \":\"   ls32\n              / [ *4( h16 \":\" ) h16 ] \"::\"              ls32\n              / [ *5( h16 \":\" ) h16 ] \"::\"              h16\n              / [ *6( h16 \":\" ) h16 ] \"::\"\n\nh16           = 1*4HEXDIG\nls32          = ( h16 \":\" h16 ) / IPv4address\nIPv4address   = dec-octet \".\" dec-octet \".\" dec-octet \".\" dec-octet\ndec-octet     = DIGIT                 ; 0-9\n                 / %x31-39 DIGIT         ; 10-99\n                 / \"1\" 2DIGIT            ; 100-199\n                 / \"2\" %x30-34 DIGIT     ; 200-249\n                 / \"25\" %x30-35          ; 250-255\n\nreg-name      = *( unreserved / pct-encoded / sub-delims )\n\npath-abempty  = *( \"/\" segment )\npath-absolute = \"/\" [ segment-nz *( \"/\" segment ) ]\npath-rootless = segment-nz *( \"/\" segment )\npath-empty    = 0pchar\n\nsegment       = *pchar\nsegment-nz    = 1*pchar\n\npchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n\nquery         = *( pchar / \"/\" / \"?\" )\n\nfragment      = *( pchar / \"/\" / \"?\" )\n\npct-encoded   = \"%\" HEXDIG HEXDIG\n\nunreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\nreserved      = gen-delims / sub-delims\ngen-delims    = \":\" / \"/\" / \"?\" / \"#\" / \"[\" / \"]\" / \"@\"\nsub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n              / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n\n; ------------------------------------------------------------------------------\n; RFC 4501\n\ndnsauthority    = host [ \":\" port ]\n                             ; See RFC 3986 for the\n                             ; definition of \"host\" and \"port\".\n\n; ------------------------------------------------------------------------------\n; RFC 3339\n\ndate-fullyear   = 4DIGIT\ndate-month      = 2DIGIT  ; 01-12\ndate-mday       = 2DIGIT  ; 01-28, 01-29, 01-30, 01-31 based on\n                          ; month/year\ntime-hour       = 2DIGIT  ; 00-23\ntime-minute     = 2DIGIT  ; 00-59\ntime-second     = 2DIGIT  ; 00-58, 00-59, 00-60 based on leap second\n                          ; rules\ntime-secfrac    = \".\" 1*DIGIT\ntime-numoffset  = (\"+\" / \"-\") time-hour \":\" time-minute\ntime-offset     = \"Z\" / time-numoffset\n\npartial-time    = time-hour \":\" time-minute \":\" time-second\n                  [time-secfrac]\nfull-date       = date-fullyear \"-\" date-month \"-\" date-mday\nfull-time       = partial-time time-offset\n\ndate-time       = full-date \"T\" full-time\n\n; ------------------------------------------------------------------------------\n; RFC 5234\n\nALPHA          =  %x41-5A / %x61-7A   ; A-Z / a-z\nLF             =  %x0A\n                  ; linefeed\nDIGIT          =  %x30-39\n                  ; 0-9\nHEXDIG         =  DIGIT / \"A\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\"\n`\n\nexport class ParsedMessage {\n  domain: string\n  address: string\n  statement: string\n  uri: string\n  version: string\n  nonce: string\n  issuedAt: string\n  expirationTime: string | null\n  notBefore: string | null\n  requestId: string | null\n  chainId: string | null\n  resources: Array<string> | null\n\n  constructor(msg: string) {\n    const api = new apgApi(GRAMMAR)\n    api.generate()\n    if (api.errors.length) {\n      console.error(api.errorsToAscii())\n      console.error(api.linesToAscii())\n      console.log(api.displayAttributeErrors())\n      throw new Error(`ABNF grammar has errors`)\n    }\n\n    const grammarObj = api.toObject()\n    const parser = new apgLib.parser()\n    parser.ast = new apgLib.ast()\n    const id = apgLib.ids\n\n    const domain = function (state, chars, phraseIndex, phraseLength, data) {\n      const ret = id.SEM_OK\n      if (state === id.SEM_PRE) {\n        data.domain = apgLib.utils.charsToString(chars, phraseIndex, phraseLength)\n      }\n      return ret\n    }\n    parser.ast.callbacks.domain = domain\n    const address = function (state, chars, phraseIndex, phraseLength, data) {\n      const ret = id.SEM_OK\n      if (state === id.SEM_PRE) {\n        data.address = apgLib.utils.charsToString(chars, phraseIndex, phraseLength)\n      }\n      return ret\n    }\n    parser.ast.callbacks.address = address\n    const statement = function (state, chars, phraseIndex, phraseLength, data) {\n      const ret = id.SEM_OK\n      if (state === id.SEM_PRE) {\n        data.statement = apgLib.utils.charsToString(chars, phraseIndex, phraseLength)\n      }\n      return ret\n    }\n    parser.ast.callbacks.statement = statement\n    const uri = function (state, chars, phraseIndex, phraseLength, data) {\n      const ret = id.SEM_OK\n      if (state === id.SEM_PRE) {\n        if (!data.uri) {\n          data.uri = apgLib.utils.charsToString(chars, phraseIndex, phraseLength)\n        }\n      }\n      return ret\n    }\n    parser.ast.callbacks.uri = uri\n    const version = function (state, chars, phraseIndex, phraseLength, data) {\n      const ret = id.SEM_OK\n      if (state === id.SEM_PRE) {\n        data.version = apgLib.utils.charsToString(chars, phraseIndex, phraseLength)\n      }\n      return ret\n    }\n    parser.ast.callbacks.version = version\n    const chainId = function (state, chars, phraseIndex, phraseLength, data) {\n      const ret = id.SEM_OK\n      if (state === id.SEM_PRE) {\n        data.chainId = apgLib.utils.charsToString(chars, phraseIndex, phraseLength)\n      }\n      return ret\n    }\n    parser.ast.callbacks['chain-id'] = chainId\n    const nonce = function (state, chars, phraseIndex, phraseLength, data) {\n      const ret = id.SEM_OK\n      if (state === id.SEM_PRE) {\n        data.nonce = apgLib.utils.charsToString(chars, phraseIndex, phraseLength)\n      }\n      return ret\n    }\n    parser.ast.callbacks.nonce = nonce\n    const issuedAt = function (state, chars, phraseIndex, phraseLength, data) {\n      const ret = id.SEM_OK\n      if (state === id.SEM_PRE) {\n        data.issuedAt = apgLib.utils.charsToString(chars, phraseIndex, phraseLength)\n      }\n      return ret\n    }\n    parser.ast.callbacks['issued-at'] = issuedAt\n    const expirationTime = function (state, chars, phraseIndex, phraseLength, data) {\n      const ret = id.SEM_OK\n      if (state === id.SEM_PRE) {\n        data.expirationTime = apgLib.utils.charsToString(chars, phraseIndex, phraseLength)\n      }\n      return ret\n    }\n    parser.ast.callbacks['expiration-time'] = expirationTime\n    const notBefore = function (state, chars, phraseIndex, phraseLength, data) {\n      const ret = id.SEM_OK\n      if (state === id.SEM_PRE) {\n        data.notBefore = apgLib.utils.charsToString(chars, phraseIndex, phraseLength)\n      }\n      return ret\n    }\n    parser.ast.callbacks['not-before'] = notBefore\n    const requestId = function (state, chars, phraseIndex, phraseLength, data) {\n      const ret = id.SEM_OK\n      if (state === id.SEM_PRE) {\n        data.requestId = apgLib.utils.charsToString(chars, phraseIndex, phraseLength)\n      }\n      return ret\n    }\n    parser.ast.callbacks['request-id'] = requestId\n    const resources = function (state, chars, phraseIndex, phraseLength, data) {\n      const ret = id.SEM_OK\n      if (state === id.SEM_PRE) {\n        data.resources = apgLib.utils\n          .charsToString(chars, phraseIndex, phraseLength)\n          .slice(3)\n          .split('\\n- ')\n      }\n      return ret\n    }\n    parser.ast.callbacks.resources = resources\n\n    const result = parser.parse(grammarObj, 'sign-in-with-ethereum', msg)\n    if (!result.success) {\n      throw new Error(`Invalid message: ${JSON.stringify(result)}`)\n    }\n    const elements = {}\n    parser.ast.translate(elements)\n    for (const [key, value] of Object.entries(elements)) {\n      this[key] = value\n    }\n  }\n}\n","import type { Cacao } from './cacao.js'\nimport { ParsedMessage as ABNFParsedMessage } from './abnf.js'\nimport { AccountId, ChainId } from 'caip'\n\n/**\n * Possible message error types.\n */\nexport enum ErrorTypes {\n  /**Thrown when the `validate()` function can verify the message. */\n  INVALID_SIGNATURE = 'Invalid signature.',\n  /**Thrown when the `expirationTime` is present and in the past. */\n  EXPIRED_MESSAGE = 'Expired message.',\n  /**Thrown when some required field is missing. */\n  MALFORMED_SESSION = 'Malformed session.',\n}\n\n/**\n * Possible signature types that this library supports.\n */\nexport enum SignatureType {\n  /**EIP-191 signature scheme */\n  PERSONAL_SIGNATURE = 'Personal signature',\n}\n\nexport class SiweMessage {\n  /**RFC 4501 dns authority that is requesting the signing. */\n  domain: string\n  /**Ethereum address performing the signing conformant to capitalization\n   * encoded checksum specified in EIP-55 where applicable. */\n  address: string\n  /**Human-readable ASCII assertion that the user will sign, and it must not\n   * contain `\\n`. */\n  statement?: string\n  /**RFC 3986 URI referring to the resource that is the subject of the signing\n   *  (as in the __subject__ of a claim). */\n  uri: string\n  /**Current version of the message. */\n  version: string\n  /**Randomized token used to prevent replay attacks, at least 8 alphanumeric\n   * characters. */\n  nonce?: string\n  /**ISO 8601 datetime string of the current time. */\n  issuedAt?: string\n  /**ISO 8601 datetime string that, if present, indicates when the signed\n   * authentication message is no longer valid. */\n  expirationTime?: string\n  /**ISO 8601 datetime string that, if present, indicates when the signed\n   * authentication message will become valid. */\n  notBefore?: string\n  /**System-specific identifier that may be used to uniquely refer to the\n   * sign-in request. */\n  requestId?: string\n  /**EIP-155 Chain ID to which the session is bound, and the network where\n   * Contract Accounts must be resolved. */\n  chainId?: string\n  /**List of information or references to information the user wishes to have\n   * resolved as part of authentication by the relying party. They are\n   * expressed as RFC 3986 URIs separated by `\\n- `. */\n  resources?: Array<string>\n  /**Signature of the message signed by the wallet. */\n  signature?: string\n  /**Type of sign message to be generated. */\n  type?: SignatureType\n\n  /**\n   * Creates a parsed Sign-In with Ethereum Message (EIP-4361) object from a\n   * string or an object. If a string is used an ABNF parser is called to\n   * validate the parameter, otherwise the fields are attributed.\n   * @param param {string | SiweMessage} Sign message as a string or an object.\n   */\n  constructor(param: string | Partial<SiweMessage>) {\n    if (typeof param === 'string') {\n      const parsedMessage = new ABNFParsedMessage(param)\n      this.domain = parsedMessage.domain\n      this.address = parsedMessage.address\n      this.statement = parsedMessage.statement\n      this.uri = parsedMessage.uri\n      this.version = parsedMessage.version\n      this.nonce = parsedMessage.nonce\n      this.issuedAt = parsedMessage.issuedAt\n      this.expirationTime = parsedMessage.expirationTime\n      this.notBefore = parsedMessage.notBefore\n      this.requestId = parsedMessage.requestId\n      this.chainId = parsedMessage.chainId\n      this.resources = parsedMessage.resources\n    } else {\n      Object.assign(this, param)\n    }\n  }\n\n  /**\n   * Creates a parsed Sign-In with Ethereum Message (EIP-4361) object from\n   * a CACAO object.\n   * @param cacao {Cacao} CACAO capability to convert to a SIWE\n   * @returns a new {SiweMessage}\n   */\n  static fromCacao(cacao: Cacao): SiweMessage {\n    const account = AccountId.parse(cacao.p.iss.replace('did:pkh:', ''))\n    const siwe = new SiweMessage({\n      domain: cacao.p.domain,\n      address: account.address,\n      uri: cacao.p.aud,\n      version: cacao.p.version,\n      chainId: new ChainId(account.chainId).reference,\n    })\n\n    if (cacao.p.statement) siwe.statement = cacao.p.statement\n    if (cacao.p.nonce) siwe.nonce = cacao.p.nonce\n    if (cacao.p.iat) siwe.issuedAt = cacao.p.iat\n    if (cacao.p.exp) siwe.expirationTime = cacao.p.exp\n    if (cacao.p.nbf) siwe.notBefore = cacao.p.nbf\n    if (cacao.p.requestId) siwe.requestId = cacao.p.requestId\n    if (cacao.p.resources) siwe.resources = cacao.p.resources\n\n    if (cacao.s) {\n      if (cacao.s.s) siwe.signature = cacao.s.s\n      if (cacao.s.t === 'eip191') siwe.type = SignatureType.PERSONAL_SIGNATURE\n    }\n\n    return siwe\n  }\n\n  /**\n   * This function can be used to retrieve an EIP-4361 formated message for\n   * signature, although you can call it directly it's advised to use\n   * [signMessage()] instead which will resolve to the correct method based\n   * on the [type] attribute of this object, in case of other formats being\n   * implemented.\n   * @returns {string} EIP-4361 formated message, ready for EIP-191 signing.\n   */\n  toMessage(): string {\n    const header = `${this.domain} wants you to sign in with your Ethereum account:`\n    const uriField = `URI: ${this.uri}`\n    let prefix = [header, this.address].join('\\n')\n    const versionField = `Version: ${this.version}`\n\n    if (!this.nonce) {\n      this.nonce = (Math.random() + 1).toString(36).substring(4)\n    }\n\n    const nonceField = `Nonce: ${this.nonce}`\n\n    const suffixArray = [uriField, versionField, nonceField]\n\n    if (this.issuedAt) {\n      Date.parse(this.issuedAt)\n    }\n    this.issuedAt = this.issuedAt ? this.issuedAt : new Date().toISOString()\n    suffixArray.push(`Issued At: ${this.issuedAt}`)\n\n    if (this.expirationTime) {\n      const expiryField = `Expiration Time: ${this.expirationTime}`\n\n      suffixArray.push(expiryField)\n    }\n\n    if (this.notBefore) {\n      suffixArray.push(`Not Before: ${this.notBefore}`)\n    }\n\n    if (this.requestId) {\n      suffixArray.push(`Request ID: ${this.requestId}`)\n    }\n\n    if (this.chainId) {\n      suffixArray.push(`Chain ID: ${this.chainId}`)\n    }\n\n    if (this.resources) {\n      suffixArray.push([`Resources:`, ...this.resources.map((x) => `- ${x}`)].join('\\n'))\n    }\n\n    const suffix = suffixArray.join('\\n')\n\n    if (this.statement) {\n      prefix = [prefix, this.statement].join('\\n\\n')\n    }\n\n    return [prefix, suffix].join('\\n\\n')\n  }\n\n  /**\n   * This method parses all the fields in the object and creates a sign\n   * message according with the type defined.\n   * @returns {string} Returns a message ready to be signed according with the\n   * type defined in the object.\n   */\n  signMessage(): string {\n    let message: string\n    switch (this.type) {\n      case SignatureType.PERSONAL_SIGNATURE: {\n        message = this.toMessage()\n        break\n      }\n\n      default: {\n        message = this.toMessage()\n        break\n      }\n    }\n    return message\n  }\n}\n","import { verifyMessage } from '@ethersproject/wallet'\nimport * as dagCbor from '@ipld/dag-cbor'\nimport * as multiformats from 'multiformats'\nimport * as Block from 'multiformats/block'\nimport { sha256 as hasher } from 'multiformats/hashes/sha2'\nimport { SiweMessage } from './siwe.js'\nimport { AccountId } from 'caip'\n\n// 5 minute default clockskew\nconst CLOCK_SKEW_DEFAULT_SEC = 5 * 60\n\nexport type Header = {\n  t: 'eip4361'\n}\n\nexport type Payload = {\n  domain: string\n  iss: string\n  aud: string\n  version: string\n  nonce: string\n  iat: string\n  nbf?: string\n  exp?: string\n  statement?: string\n  requestId?: string\n  resources?: Array<string>\n}\n\nexport type Signature = {\n  t: 'eip191' | 'eip1271'\n  s: string\n}\nexport type Cacao = {\n  h: Header\n  p: Payload\n  s?: Signature\n}\n\nexport type VerifyOptions = {\n  /**\n   * @param atTime - the point in time the capability is being verified for\n   */\n  atTime?: Date\n  /**\n   * @param expPhaseOutSecs - Number of seconds that a capability stays valid for after it was expired\n   */\n  revocationPhaseOutSecs?: number\n  /**\n   * @param clockSkewSecs - Number of seconds of clock tolerance when verifying iat, nbf, and exp\n   */\n  clockSkewSecs?: number\n}\n\nexport namespace Cacao {\n  export function fromSiweMessage(siweMessage: SiweMessage): Cacao {\n    const cacao: Cacao = {\n      h: {\n        t: 'eip4361',\n      },\n      p: {\n        domain: siweMessage.domain,\n        iat: siweMessage.issuedAt,\n        iss: `did:pkh:eip155:${siweMessage.chainId}:${siweMessage.address}`,\n        aud: siweMessage.uri,\n        version: siweMessage.version,\n        nonce: siweMessage.nonce,\n      },\n    }\n\n    if (siweMessage.signature) {\n      cacao.s = {\n        t: 'eip191',\n        s: siweMessage.signature,\n      }\n    }\n\n    if (siweMessage.notBefore) {\n      cacao.p.nbf = siweMessage.notBefore\n    }\n\n    if (siweMessage.expirationTime) {\n      cacao.p.exp = siweMessage.expirationTime\n    }\n\n    if (siweMessage.statement) {\n      cacao.p.statement = siweMessage.statement\n    }\n\n    if (siweMessage.requestId) {\n      cacao.p.requestId = siweMessage.requestId\n    }\n\n    if (siweMessage.resources) {\n      cacao.p.resources = siweMessage.resources\n    }\n\n    return cacao\n  }\n\n  export function verify(cacao: Cacao, options: VerifyOptions = {}) {\n    if (cacao.h.t === 'eip4361' && cacao.s?.t === 'eip191') {\n      return verifyEIP191Signature(cacao, options)\n    }\n    throw new Error('Unsupported CACAO signature type')\n  }\n\n  export function verifyEIP191Signature(cacao: Cacao, options: VerifyOptions) {\n    if (!cacao.s) {\n      throw new Error(`CACAO does not have a signature`)\n    }\n\n    const atTime = options.atTime ? options.atTime.getTime() : Date.now()\n    const clockSkew = (options.clockSkewSecs ?? CLOCK_SKEW_DEFAULT_SEC) * 1000\n\n    if (\n      Date.parse(cacao.p.iat) > atTime + clockSkew ||\n      Date.parse(cacao.p.nbf) > atTime + clockSkew\n    ) {\n      throw new Error(`CACAO is not valid yet`)\n    }\n\n    const phaseOutMS = options.revocationPhaseOutSecs ? options.revocationPhaseOutSecs * 1000 : 0\n\n    if (Date.parse(cacao.p.exp) + phaseOutMS + clockSkew < atTime) {\n      throw new Error(`CACAO has expired`)\n    }\n\n    const msg = SiweMessage.fromCacao(cacao)\n    const sig = cacao.s.s\n    const recoveredAddress = verifyMessage(msg.toMessage(), sig)\n    const issAddress = AccountId.parse(cacao.p.iss.replace('did:pkh:', '')).address\n    if (recoveredAddress.toLowerCase() !== issAddress.toLowerCase()) {\n      throw new Error(`Signature does not belong to issuer`)\n    }\n  }\n}\n\nexport type CacaoBlock = {\n  value: Cacao\n  cid: multiformats.CID\n  bytes: Uint8Array\n}\n\nexport namespace CacaoBlock {\n  export async function fromCacao(cacao: Cacao): Promise<CacaoBlock> {\n    const block = await Block.encode<Cacao, number, number>({\n      value: cacao,\n      codec: dagCbor,\n      hasher: hasher,\n    })\n    return block\n  }\n}\n"],"names":["GRAMMAR","ParsedMessage","constructor","msg","domain","address","statement","uri","version","nonce","issuedAt","expirationTime","notBefore","requestId","chainId","resources","api","apgApi","generate","errors","length","console","error","errorsToAscii","linesToAscii","log","displayAttributeErrors","Error","grammarObj","toObject","parser","apgLib","ast","id","ids","state","chars","phraseIndex","phraseLength","data","ret","SEM_OK","SEM_PRE","utils","charsToString","callbacks","slice","split","result","parse","success","JSON","stringify","elements","translate","key","value","Object","entries","ErrorTypes","SignatureType","SiweMessage","param","signature","type","parsedMessage","ABNFParsedMessage","assign","fromCacao","cacao","account","AccountId","p","iss","replace","siwe","aud","ChainId","reference","iat","exp","nbf","s","t","PERSONAL_SIGNATURE","toMessage","header","uriField","prefix","join","versionField","Math","random","toString","substring","nonceField","suffixArray","Date","toISOString","push","expiryField","map","x","suffix","signMessage","message","CLOCK_SKEW_DEFAULT_SEC","Cacao","fromSiweMessage","siweMessage","h","verify","options","verifyEIP191Signature","atTime","getTime","now","clockSkew","clockSkewSecs","phaseOutMS","revocationPhaseOutSecs","sig","recoveredAddress","verifyMessage","issAddress","toLowerCase","CacaoBlock","Block","encode","codec","dagCbor","hasher"],"mappings":";;;;;;;;AAGA,MAAMA,OAAO,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAhB,CAAA;MAqJaC,cAAa;AAcxBC,EAAAA,WAAA,CAAYC,GAAZ,EAAuB;AAAA,IAAA,IAAA,CAbvBC,MAauB,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAZvBC,OAYuB,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAXvBC,SAWuB,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAVvBC,GAUuB,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CATvBC,OASuB,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CARvBC,KAQuB,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAPvBC,QAOuB,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CANvBC,cAMuB,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CALvBC,SAKuB,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAJvBC,SAIuB,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAHvBC,OAGuB,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAFvBC,SAEuB,GAAA,KAAA,CAAA,CAAA;AACrB,IAAA,MAAMC,GAAG,GAAG,IAAIC,MAAJ,CAAWjB,OAAX,CAAZ,CAAA;AACAgB,IAAAA,GAAG,CAACE,QAAJ,EAAA,CAAA;;AACA,IAAA,IAAIF,GAAG,CAACG,MAAJ,CAAWC,MAAf,EAAuB;AACrBC,MAAAA,OAAO,CAACC,KAAR,CAAcN,GAAG,CAACO,aAAJ,EAAd,CAAA,CAAA;AACAF,MAAAA,OAAO,CAACC,KAAR,CAAcN,GAAG,CAACQ,YAAJ,EAAd,CAAA,CAAA;AACAH,MAAAA,OAAO,CAACI,GAAR,CAAYT,GAAG,CAACU,sBAAJ,EAAZ,CAAA,CAAA;AACA,MAAA,MAAM,IAAIC,KAAJ,CAAU,CAAA,uBAAA,CAAV,CAAN,CAAA;AACD,KAAA;;AAED,IAAA,MAAMC,UAAU,GAAGZ,GAAG,CAACa,QAAJ,EAAnB,CAAA;AACA,IAAA,MAAMC,MAAM,GAAG,IAAIC,MAAM,CAACD,MAAX,EAAf,CAAA;AACAA,IAAAA,MAAM,CAACE,GAAP,GAAa,IAAID,MAAM,CAACC,GAAX,EAAb,CAAA;AACA,IAAA,MAAMC,EAAE,GAAGF,MAAM,CAACG,GAAlB,CAAA;;AAEA,IAAA,MAAM9B,MAAM,GAAG,UAAU+B,KAAV,EAAiBC,KAAjB,EAAwBC,WAAxB,EAAqCC,YAArC,EAAmDC,IAAnD,EAAuD;AACpE,MAAA,MAAMC,GAAG,GAAGP,EAAE,CAACQ,MAAf,CAAA;;AACA,MAAA,IAAIN,KAAK,KAAKF,EAAE,CAACS,OAAjB,EAA0B;AACxBH,QAAAA,IAAI,CAACnC,MAAL,GAAc2B,MAAM,CAACY,KAAP,CAAaC,aAAb,CAA2BR,KAA3B,EAAkCC,WAAlC,EAA+CC,YAA/C,CAAd,CAAA;AACD,OAAA;;AACD,MAAA,OAAOE,GAAP,CAAA;AACD,KAND,CAAA;;AAOAV,IAAAA,MAAM,CAACE,GAAP,CAAWa,SAAX,CAAqBzC,MAArB,GAA8BA,MAA9B,CAAA;;AACA,IAAA,MAAMC,OAAO,GAAG,UAAU8B,KAAV,EAAiBC,KAAjB,EAAwBC,WAAxB,EAAqCC,YAArC,EAAmDC,IAAnD,EAAuD;AACrE,MAAA,MAAMC,GAAG,GAAGP,EAAE,CAACQ,MAAf,CAAA;;AACA,MAAA,IAAIN,KAAK,KAAKF,EAAE,CAACS,OAAjB,EAA0B;AACxBH,QAAAA,IAAI,CAAClC,OAAL,GAAe0B,MAAM,CAACY,KAAP,CAAaC,aAAb,CAA2BR,KAA3B,EAAkCC,WAAlC,EAA+CC,YAA/C,CAAf,CAAA;AACD,OAAA;;AACD,MAAA,OAAOE,GAAP,CAAA;AACD,KAND,CAAA;;AAOAV,IAAAA,MAAM,CAACE,GAAP,CAAWa,SAAX,CAAqBxC,OAArB,GAA+BA,OAA/B,CAAA;;AACA,IAAA,MAAMC,SAAS,GAAG,UAAU6B,KAAV,EAAiBC,KAAjB,EAAwBC,WAAxB,EAAqCC,YAArC,EAAmDC,IAAnD,EAAuD;AACvE,MAAA,MAAMC,GAAG,GAAGP,EAAE,CAACQ,MAAf,CAAA;;AACA,MAAA,IAAIN,KAAK,KAAKF,EAAE,CAACS,OAAjB,EAA0B;AACxBH,QAAAA,IAAI,CAACjC,SAAL,GAAiByB,MAAM,CAACY,KAAP,CAAaC,aAAb,CAA2BR,KAA3B,EAAkCC,WAAlC,EAA+CC,YAA/C,CAAjB,CAAA;AACD,OAAA;;AACD,MAAA,OAAOE,GAAP,CAAA;AACD,KAND,CAAA;;AAOAV,IAAAA,MAAM,CAACE,GAAP,CAAWa,SAAX,CAAqBvC,SAArB,GAAiCA,SAAjC,CAAA;;AACA,IAAA,MAAMC,GAAG,GAAG,UAAU4B,KAAV,EAAiBC,KAAjB,EAAwBC,WAAxB,EAAqCC,YAArC,EAAmDC,IAAnD,EAAuD;AACjE,MAAA,MAAMC,GAAG,GAAGP,EAAE,CAACQ,MAAf,CAAA;;AACA,MAAA,IAAIN,KAAK,KAAKF,EAAE,CAACS,OAAjB,EAA0B;AACxB,QAAA,IAAI,CAACH,IAAI,CAAChC,GAAV,EAAe;AACbgC,UAAAA,IAAI,CAAChC,GAAL,GAAWwB,MAAM,CAACY,KAAP,CAAaC,aAAb,CAA2BR,KAA3B,EAAkCC,WAAlC,EAA+CC,YAA/C,CAAX,CAAA;AACD,SAAA;AACF,OAAA;;AACD,MAAA,OAAOE,GAAP,CAAA;AACD,KARD,CAAA;;AASAV,IAAAA,MAAM,CAACE,GAAP,CAAWa,SAAX,CAAqBtC,GAArB,GAA2BA,GAA3B,CAAA;;AACA,IAAA,MAAMC,OAAO,GAAG,UAAU2B,KAAV,EAAiBC,KAAjB,EAAwBC,WAAxB,EAAqCC,YAArC,EAAmDC,IAAnD,EAAuD;AACrE,MAAA,MAAMC,GAAG,GAAGP,EAAE,CAACQ,MAAf,CAAA;;AACA,MAAA,IAAIN,KAAK,KAAKF,EAAE,CAACS,OAAjB,EAA0B;AACxBH,QAAAA,IAAI,CAAC/B,OAAL,GAAeuB,MAAM,CAACY,KAAP,CAAaC,aAAb,CAA2BR,KAA3B,EAAkCC,WAAlC,EAA+CC,YAA/C,CAAf,CAAA;AACD,OAAA;;AACD,MAAA,OAAOE,GAAP,CAAA;AACD,KAND,CAAA;;AAOAV,IAAAA,MAAM,CAACE,GAAP,CAAWa,SAAX,CAAqBrC,OAArB,GAA+BA,OAA/B,CAAA;;AACA,IAAA,MAAMM,OAAO,GAAG,UAAUqB,KAAV,EAAiBC,KAAjB,EAAwBC,WAAxB,EAAqCC,YAArC,EAAmDC,IAAnD,EAAuD;AACrE,MAAA,MAAMC,GAAG,GAAGP,EAAE,CAACQ,MAAf,CAAA;;AACA,MAAA,IAAIN,KAAK,KAAKF,EAAE,CAACS,OAAjB,EAA0B;AACxBH,QAAAA,IAAI,CAACzB,OAAL,GAAeiB,MAAM,CAACY,KAAP,CAAaC,aAAb,CAA2BR,KAA3B,EAAkCC,WAAlC,EAA+CC,YAA/C,CAAf,CAAA;AACD,OAAA;;AACD,MAAA,OAAOE,GAAP,CAAA;AACD,KAND,CAAA;;AAOAV,IAAAA,MAAM,CAACE,GAAP,CAAWa,SAAX,CAAqB,UAArB,IAAmC/B,OAAnC,CAAA;;AACA,IAAA,MAAML,KAAK,GAAG,UAAU0B,KAAV,EAAiBC,KAAjB,EAAwBC,WAAxB,EAAqCC,YAArC,EAAmDC,IAAnD,EAAuD;AACnE,MAAA,MAAMC,GAAG,GAAGP,EAAE,CAACQ,MAAf,CAAA;;AACA,MAAA,IAAIN,KAAK,KAAKF,EAAE,CAACS,OAAjB,EAA0B;AACxBH,QAAAA,IAAI,CAAC9B,KAAL,GAAasB,MAAM,CAACY,KAAP,CAAaC,aAAb,CAA2BR,KAA3B,EAAkCC,WAAlC,EAA+CC,YAA/C,CAAb,CAAA;AACD,OAAA;;AACD,MAAA,OAAOE,GAAP,CAAA;AACD,KAND,CAAA;;AAOAV,IAAAA,MAAM,CAACE,GAAP,CAAWa,SAAX,CAAqBpC,KAArB,GAA6BA,KAA7B,CAAA;;AACA,IAAA,MAAMC,QAAQ,GAAG,UAAUyB,KAAV,EAAiBC,KAAjB,EAAwBC,WAAxB,EAAqCC,YAArC,EAAmDC,IAAnD,EAAuD;AACtE,MAAA,MAAMC,GAAG,GAAGP,EAAE,CAACQ,MAAf,CAAA;;AACA,MAAA,IAAIN,KAAK,KAAKF,EAAE,CAACS,OAAjB,EAA0B;AACxBH,QAAAA,IAAI,CAAC7B,QAAL,GAAgBqB,MAAM,CAACY,KAAP,CAAaC,aAAb,CAA2BR,KAA3B,EAAkCC,WAAlC,EAA+CC,YAA/C,CAAhB,CAAA;AACD,OAAA;;AACD,MAAA,OAAOE,GAAP,CAAA;AACD,KAND,CAAA;;AAOAV,IAAAA,MAAM,CAACE,GAAP,CAAWa,SAAX,CAAqB,WAArB,IAAoCnC,QAApC,CAAA;;AACA,IAAA,MAAMC,cAAc,GAAG,UAAUwB,KAAV,EAAiBC,KAAjB,EAAwBC,WAAxB,EAAqCC,YAArC,EAAmDC,IAAnD,EAAuD;AAC5E,MAAA,MAAMC,GAAG,GAAGP,EAAE,CAACQ,MAAf,CAAA;;AACA,MAAA,IAAIN,KAAK,KAAKF,EAAE,CAACS,OAAjB,EAA0B;AACxBH,QAAAA,IAAI,CAAC5B,cAAL,GAAsBoB,MAAM,CAACY,KAAP,CAAaC,aAAb,CAA2BR,KAA3B,EAAkCC,WAAlC,EAA+CC,YAA/C,CAAtB,CAAA;AACD,OAAA;;AACD,MAAA,OAAOE,GAAP,CAAA;AACD,KAND,CAAA;;AAOAV,IAAAA,MAAM,CAACE,GAAP,CAAWa,SAAX,CAAqB,iBAArB,IAA0ClC,cAA1C,CAAA;;AACA,IAAA,MAAMC,SAAS,GAAG,UAAUuB,KAAV,EAAiBC,KAAjB,EAAwBC,WAAxB,EAAqCC,YAArC,EAAmDC,IAAnD,EAAuD;AACvE,MAAA,MAAMC,GAAG,GAAGP,EAAE,CAACQ,MAAf,CAAA;;AACA,MAAA,IAAIN,KAAK,KAAKF,EAAE,CAACS,OAAjB,EAA0B;AACxBH,QAAAA,IAAI,CAAC3B,SAAL,GAAiBmB,MAAM,CAACY,KAAP,CAAaC,aAAb,CAA2BR,KAA3B,EAAkCC,WAAlC,EAA+CC,YAA/C,CAAjB,CAAA;AACD,OAAA;;AACD,MAAA,OAAOE,GAAP,CAAA;AACD,KAND,CAAA;;AAOAV,IAAAA,MAAM,CAACE,GAAP,CAAWa,SAAX,CAAqB,YAArB,IAAqCjC,SAArC,CAAA;;AACA,IAAA,MAAMC,SAAS,GAAG,UAAUsB,KAAV,EAAiBC,KAAjB,EAAwBC,WAAxB,EAAqCC,YAArC,EAAmDC,IAAnD,EAAuD;AACvE,MAAA,MAAMC,GAAG,GAAGP,EAAE,CAACQ,MAAf,CAAA;;AACA,MAAA,IAAIN,KAAK,KAAKF,EAAE,CAACS,OAAjB,EAA0B;AACxBH,QAAAA,IAAI,CAAC1B,SAAL,GAAiBkB,MAAM,CAACY,KAAP,CAAaC,aAAb,CAA2BR,KAA3B,EAAkCC,WAAlC,EAA+CC,YAA/C,CAAjB,CAAA;AACD,OAAA;;AACD,MAAA,OAAOE,GAAP,CAAA;AACD,KAND,CAAA;;AAOAV,IAAAA,MAAM,CAACE,GAAP,CAAWa,SAAX,CAAqB,YAArB,IAAqChC,SAArC,CAAA;;AACA,IAAA,MAAME,SAAS,GAAG,UAAUoB,KAAV,EAAiBC,KAAjB,EAAwBC,WAAxB,EAAqCC,YAArC,EAAmDC,IAAnD,EAAuD;AACvE,MAAA,MAAMC,GAAG,GAAGP,EAAE,CAACQ,MAAf,CAAA;;AACA,MAAA,IAAIN,KAAK,KAAKF,EAAE,CAACS,OAAjB,EAA0B;AACxBH,QAAAA,IAAI,CAACxB,SAAL,GAAiBgB,MAAM,CAACY,KAAP,CACdC,aADc,CACAR,KADA,EACOC,WADP,EACoBC,YADpB,CAAA,CAEdQ,KAFc,CAER,CAFQ,CAGdC,CAAAA,KAHc,CAGR,MAHQ,CAAjB,CAAA;AAID,OAAA;;AACD,MAAA,OAAOP,GAAP,CAAA;AACD,KATD,CAAA;;AAUAV,IAAAA,MAAM,CAACE,GAAP,CAAWa,SAAX,CAAqB9B,SAArB,GAAiCA,SAAjC,CAAA;AAEA,IAAMiC,MAAAA,MAAM,GAAGlB,MAAM,CAACmB,KAAP,CAAarB,UAAb,EAAyB,uBAAzB,EAAkDzB,GAAlD,CAAf,CAAA;;AACA,IAAA,IAAI,CAAC6C,MAAM,CAACE,OAAZ,EAAqB;AACnB,MAAM,MAAA,IAAIvB,KAAJ,CAAU,CAAoBwB,iBAAAA,EAAAA,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAAwB,CAAA,CAAtD,CAAN,CAAA;AACD,KAAA;;AACD,IAAMK,MAAAA,QAAQ,GAAG,EAAjB,CAAA;AACAvB,IAAAA,MAAM,CAACE,GAAP,CAAWsB,SAAX,CAAqBD,QAArB,CAAA,CAAA;;AACA,IAAA,KAAK,MAAM,CAACE,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAeL,QAAf,CAA3B,EAAqD;AACnD,MAAKE,IAAAA,CAAAA,GAAL,IAAYC,KAAZ,CAAA;AACD,KAAA;AACF,GAAA;;AA5IuB;;ICjJdG,WAAZ;;AAAA,CAAA,UAAYA,UAAZ,EAAsB;AAEpBA,EAAAA,UAAA,CAAA,mBAAA,CAAA,GAAA,oBAAA,CAAA;AAEAA,EAAAA,UAAA,CAAA,iBAAA,CAAA,GAAA,kBAAA,CAAA;AAEAA,EAAAA,UAAA,CAAA,mBAAA,CAAA,GAAA,oBAAA,CAAA;AACD,CAPD,EAAYA,UAAU,KAAVA,UAAU,GAOrB,EAPqB,CAAtB,CAAA,CAAA;;IAYYC,cAAZ;;AAAA,CAAA,UAAYA,aAAZ,EAAyB;AAEvBA,EAAAA,aAAA,CAAA,oBAAA,CAAA,GAAA,oBAAA,CAAA;AACD,CAHD,EAAYA,aAAa,KAAbA,aAAa,GAGxB,EAHwB,CAAzB,CAAA,CAAA;;MAKaC,YAAW;AA8CtB3D,EAAAA,WAAA,CAAY4D,KAAZ,EAAgD;AAAA,IAAA,IAAA,CA5ChD1D,MA4CgD,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAzChDC,OAyCgD,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAtChDC,SAsCgD,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAnChDC,GAmCgD,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAjChDC,OAiCgD,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CA9BhDC,KA8BgD,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CA5BhDC,QA4BgD,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAzBhDC,cAyBgD,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAtBhDC,SAsBgD,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAnBhDC,SAmBgD,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAhBhDC,OAgBgD,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAZhDC,SAYgD,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAVhDgD,SAUgD,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CARhDC,IAQgD,GAAA,KAAA,CAAA,CAAA;;AAC9C,IAAA,IAAI,OAAOF,KAAP,KAAiB,QAArB,EAA+B;AAC7B,MAAA,MAAMG,aAAa,GAAG,IAAIC,aAAJ,CAAsBJ,KAAtB,CAAtB,CAAA;AACA,MAAA,IAAA,CAAK1D,MAAL,GAAc6D,aAAa,CAAC7D,MAA5B,CAAA;AACA,MAAA,IAAA,CAAKC,OAAL,GAAe4D,aAAa,CAAC5D,OAA7B,CAAA;AACA,MAAA,IAAA,CAAKC,SAAL,GAAiB2D,aAAa,CAAC3D,SAA/B,CAAA;AACA,MAAA,IAAA,CAAKC,GAAL,GAAW0D,aAAa,CAAC1D,GAAzB,CAAA;AACA,MAAA,IAAA,CAAKC,OAAL,GAAeyD,aAAa,CAACzD,OAA7B,CAAA;AACA,MAAA,IAAA,CAAKC,KAAL,GAAawD,aAAa,CAACxD,KAA3B,CAAA;AACA,MAAA,IAAA,CAAKC,QAAL,GAAgBuD,aAAa,CAACvD,QAA9B,CAAA;AACA,MAAA,IAAA,CAAKC,cAAL,GAAsBsD,aAAa,CAACtD,cAApC,CAAA;AACA,MAAA,IAAA,CAAKC,SAAL,GAAiBqD,aAAa,CAACrD,SAA/B,CAAA;AACA,MAAA,IAAA,CAAKC,SAAL,GAAiBoD,aAAa,CAACpD,SAA/B,CAAA;AACA,MAAA,IAAA,CAAKC,OAAL,GAAemD,aAAa,CAACnD,OAA7B,CAAA;AACA,MAAA,IAAA,CAAKC,SAAL,GAAiBkD,aAAa,CAAClD,SAA/B,CAAA;AACD,KAdD,MAcO;AACL0C,MAAAA,MAAM,CAACU,MAAP,CAAc,IAAd,EAAoBL,KAApB,CAAA,CAAA;AACD,KAAA;AACF,GAAA;;AAQe,EAATM,OAAAA,SAAS,CAACC,KAAD,EAAa;AAC3B,IAAA,MAAMC,OAAO,GAAGC,SAAS,CAACtB,KAAV,CAAgBoB,KAAK,CAACG,CAAN,CAAQC,GAAR,CAAYC,OAAZ,CAAoB,UAApB,EAAgC,EAAhC,CAAhB,CAAhB,CAAA;AACA,IAAA,MAAMC,IAAI,GAAG,IAAId,WAAJ,CAAgB;AAC3BzD,MAAAA,MAAM,EAAEiE,KAAK,CAACG,CAAN,CAAQpE,MADW;AAE3BC,MAAAA,OAAO,EAAEiE,OAAO,CAACjE,OAFU;AAG3BE,MAAAA,GAAG,EAAE8D,KAAK,CAACG,CAAN,CAAQI,GAHc;AAI3BpE,MAAAA,OAAO,EAAE6D,KAAK,CAACG,CAAN,CAAQhE,OAJU;AAK3BM,MAAAA,OAAO,EAAE,IAAI+D,OAAJ,CAAYP,OAAO,CAACxD,OAApB,CAA6BgE,CAAAA,SAAAA;AALX,KAAhB,CAAb,CAAA;AAQA,IAAA,IAAIT,KAAK,CAACG,CAAN,CAAQlE,SAAZ,EAAuBqE,IAAI,CAACrE,SAAL,GAAiB+D,KAAK,CAACG,CAAN,CAAQlE,SAAzB,CAAA;AACvB,IAAA,IAAI+D,KAAK,CAACG,CAAN,CAAQ/D,KAAZ,EAAmBkE,IAAI,CAAClE,KAAL,GAAa4D,KAAK,CAACG,CAAN,CAAQ/D,KAArB,CAAA;AACnB,IAAA,IAAI4D,KAAK,CAACG,CAAN,CAAQO,GAAZ,EAAiBJ,IAAI,CAACjE,QAAL,GAAgB2D,KAAK,CAACG,CAAN,CAAQO,GAAxB,CAAA;AACjB,IAAA,IAAIV,KAAK,CAACG,CAAN,CAAQQ,GAAZ,EAAiBL,IAAI,CAAChE,cAAL,GAAsB0D,KAAK,CAACG,CAAN,CAAQQ,GAA9B,CAAA;AACjB,IAAA,IAAIX,KAAK,CAACG,CAAN,CAAQS,GAAZ,EAAiBN,IAAI,CAAC/D,SAAL,GAAiByD,KAAK,CAACG,CAAN,CAAQS,GAAzB,CAAA;AACjB,IAAA,IAAIZ,KAAK,CAACG,CAAN,CAAQ3D,SAAZ,EAAuB8D,IAAI,CAAC9D,SAAL,GAAiBwD,KAAK,CAACG,CAAN,CAAQ3D,SAAzB,CAAA;AACvB,IAAA,IAAIwD,KAAK,CAACG,CAAN,CAAQzD,SAAZ,EAAuB4D,IAAI,CAAC5D,SAAL,GAAiBsD,KAAK,CAACG,CAAN,CAAQzD,SAAzB,CAAA;;AAEvB,IAAIsD,IAAAA,KAAK,CAACa,CAAV,EAAa;AACX,MAAA,IAAIb,KAAK,CAACa,CAAN,CAAQA,CAAZ,EAAeP,IAAI,CAACZ,SAAL,GAAiBM,KAAK,CAACa,CAAN,CAAQA,CAAzB,CAAA;AACf,MAAA,IAAIb,KAAK,CAACa,CAAN,CAAQC,CAAR,KAAc,QAAlB,EAA4BR,IAAI,CAACX,IAAL,GAAYJ,aAAa,CAACwB,kBAA1B,CAAA;AAC7B,KAAA;;AAED,IAAA,OAAOT,IAAP,CAAA;AACD,GAAA;;AAUDU,EAAAA,SAAS,GAAA;AACP,IAAA,MAAMC,MAAM,GAAG,CAAG,EAAA,IAAA,CAAKlF,OAAvB,iDAAA,CAAA,CAAA;AACA,IAAA,MAAMmF,QAAQ,GAAG,CAAQ,KAAA,EAAA,IAAA,CAAKhF,IAA9B,CAAA,CAAA;AACA,IAAIiF,IAAAA,MAAM,GAAG,CAACF,MAAD,EAAS,IAAKjF,CAAAA,OAAd,CAAuBoF,CAAAA,IAAvB,CAA4B,IAA5B,CAAb,CAAA;AACA,IAAA,MAAMC,YAAY,GAAG,CAAY,SAAA,EAAA,IAAA,CAAKlF,QAAtC,CAAA,CAAA;;AAEA,IAAI,IAAA,CAAC,IAAKC,CAAAA,KAAV,EAAiB;AACf,MAAA,IAAA,CAAKA,KAAL,GAAa,CAACkF,IAAI,CAACC,MAAL,EAAgB,GAAA,CAAjB,EAAoBC,QAApB,CAA6B,EAA7B,CAAA,CAAiCC,SAAjC,CAA2C,CAA3C,CAAb,CAAA;AACD,KAAA;;AAED,IAAA,MAAMC,UAAU,GAAG,CAAU,OAAA,EAAA,IAAA,CAAKtF,MAAlC,CAAA,CAAA;AAEA,IAAMuF,MAAAA,WAAW,GAAG,CAACT,QAAD,EAAWG,YAAX,EAAyBK,UAAzB,CAApB,CAAA;;AAKA,IAAA,IAAA,CAAKrF,QAAL,GAAgB,IAAKA,CAAAA,QAAL,GAAgB,IAAA,CAAKA,QAArB,GAAgC,IAAIuF,IAAJ,EAAWC,CAAAA,WAAX,EAAhD,CAAA;AACAF,IAAAA,WAAW,CAACG,IAAZ,CAAiB,CAAc,WAAA,EAAA,IAAA,CAAKzF,QAAU,CAA9C,CAAA,CAAA,CAAA;;AAEA,IAAI,IAAA,IAAA,CAAKC,cAAT,EAAyB;AACvB,MAAA,MAAMyF,WAAW,GAAG,CAAoB,iBAAA,EAAA,IAAA,CAAKzF,eAA7C,CAAA,CAAA;AAEAqF,MAAAA,WAAW,CAACG,IAAZ,CAAiBC,WAAjB,CAAA,CAAA;AACD,KAAA;;AAED,IAAI,IAAA,IAAA,CAAKxF,SAAT,EAAoB;AAClBoF,MAAAA,WAAW,CAACG,IAAZ,CAAiB,CAAe,YAAA,EAAA,IAAA,CAAKvF,SAAW,CAAhD,CAAA,CAAA,CAAA;AACD,KAAA;;AAED,IAAI,IAAA,IAAA,CAAKC,SAAT,EAAoB;AAClBmF,MAAAA,WAAW,CAACG,IAAZ,CAAiB,CAAe,YAAA,EAAA,IAAA,CAAKtF,SAAW,CAAhD,CAAA,CAAA,CAAA;AACD,KAAA;;AAED,IAAI,IAAA,IAAA,CAAKC,OAAT,EAAkB;AAChBkF,MAAAA,WAAW,CAACG,IAAZ,CAAiB,CAAa,UAAA,EAAA,IAAA,CAAKrF,OAAS,CAA5C,CAAA,CAAA,CAAA;AACD,KAAA;;AAED,IAAI,IAAA,IAAA,CAAKC,SAAT,EAAoB;AAClBiF,MAAAA,WAAW,CAACG,IAAZ,CAAiB,CAAa,CAAb,UAAA,CAAA,EAAe,GAAG,IAAA,CAAKpF,SAAL,CAAesF,GAAf,CAAoBC,CAAD,IAAY,CAAA,EAAA,EAAAA,CAAG,CAAA,CAAlC,CAAlB,CAAuDb,CAAAA,IAAvD,CAA4D,IAA5D,CAAjB,CAAA,CAAA;AACD,KAAA;;AAED,IAAA,MAAMc,MAAM,GAAGP,WAAW,CAACP,IAAZ,CAAiB,IAAjB,CAAf,CAAA;;AAEA,IAAI,IAAA,IAAA,CAAKnF,SAAT,EAAoB;AAClBkF,MAAAA,MAAM,GAAG,CAACA,MAAD,EAAS,IAAKlF,CAAAA,SAAd,CAAyBmF,CAAAA,IAAzB,CAA8B,MAA9B,CAAT,CAAA;AACD,KAAA;;AAED,IAAO,OAAA,CAACD,MAAD,EAASe,MAAT,EAAiBd,IAAjB,CAAsB,MAAtB,CAAP,CAAA;AACD,GAAA;;AAQDe,EAAAA,WAAW,GAAA;AACT,IAAA,IAAIC,OAAJ,CAAA;;AACA,IAAA,QAAQ,KAAKzC,IAAb;AACE,MAAKJ,KAAAA,aAAa,CAACwB,kBAAnB;AAAuC,QAAA;AACrCqB,UAAAA,OAAO,GAAG,IAAKpB,CAAAA,SAAL,EAAV,CAAA;AACA,UAAA,MAAA;AACD,SAAA;;AAED,MAAA;AAAS,QAAA;AACPoB,UAAAA,OAAO,GAAG,IAAKpB,CAAAA,SAAL,EAAV,CAAA;AACA,UAAA,MAAA;AACD,SAAA;AATH,KAAA;;AAWA,IAAA,OAAOoB,OAAP,CAAA;AACD,GAAA;;AAjLqB;;ACfxB,MAAMC,sBAAsB,GAAG,CAAA,GAAI,EAAnC,CAAA;IA6CiBC,MAAX;;AAAN,CAAA,UAAiBA,KAAjB,EAAsB;AACpB,EAAgBC,SAAAA,eAAhB,CAAgCC,WAAhC,EAAwD;AACtD,IAAA,MAAMxC,KAAK,GAAU;AACnByC,MAAAA,CAAC,EAAE;AACD3B,QAAAA,CAAC,EAAE,SAAA;AADF,OADgB;AAInBX,MAAAA,CAAC,EAAE;AACDpE,QAAAA,MAAM,EAAEyG,WAAW,CAACzG,MADnB;AAED2E,QAAAA,GAAG,EAAE8B,WAAW,CAACnG,QAFhB;AAGD+D,QAAAA,GAAG,oBAAoBoC,WAAW,CAAC/F,OAAW,CAAA+F,CAAAA,EAAAA,WAAW,CAACxG,OAAS,CAHlE,CAAA;AAIDuE,QAAAA,GAAG,EAAEiC,WAAW,CAACtG,GAJhB;AAKDC,QAAAA,OAAO,EAAEqG,WAAW,CAACrG,OALpB;AAMDC,QAAAA,KAAK,EAAEoG,WAAW,CAACpG,KAAAA;AANlB,OAAA;AAJgB,KAArB,CAAA;;AAcA,IAAIoG,IAAAA,WAAW,CAAC9C,SAAhB,EAA2B;AACzBM,MAAAA,KAAK,CAACa,CAAN,GAAU;AACRC,QAAAA,CAAC,EAAE,QADK;AAERD,QAAAA,CAAC,EAAE2B,WAAW,CAAC9C,SAAAA;AAFP,OAAV,CAAA;AAID,KAAA;;AAED,IAAI8C,IAAAA,WAAW,CAACjG,SAAhB,EAA2B;AACzByD,MAAAA,KAAK,CAACG,CAAN,CAAQS,GAAR,GAAc4B,WAAW,CAACjG,SAA1B,CAAA;AACD,KAAA;;AAED,IAAIiG,IAAAA,WAAW,CAAClG,cAAhB,EAAgC;AAC9B0D,MAAAA,KAAK,CAACG,CAAN,CAAQQ,GAAR,GAAc6B,WAAW,CAAClG,cAA1B,CAAA;AACD,KAAA;;AAED,IAAIkG,IAAAA,WAAW,CAACvG,SAAhB,EAA2B;AACzB+D,MAAAA,KAAK,CAACG,CAAN,CAAQlE,SAAR,GAAoBuG,WAAW,CAACvG,SAAhC,CAAA;AACD,KAAA;;AAED,IAAIuG,IAAAA,WAAW,CAAChG,SAAhB,EAA2B;AACzBwD,MAAAA,KAAK,CAACG,CAAN,CAAQ3D,SAAR,GAAoBgG,WAAW,CAAChG,SAAhC,CAAA;AACD,KAAA;;AAED,IAAIgG,IAAAA,WAAW,CAAC9F,SAAhB,EAA2B;AACzBsD,MAAAA,KAAK,CAACG,CAAN,CAAQzD,SAAR,GAAoB8F,WAAW,CAAC9F,SAAhC,CAAA;AACD,KAAA;;AAED,IAAA,OAAOsD,KAAP,CAAA;AACD,GAAA;;AA3CesC,EAAAA,KAAA,CAAAC,eAAA,kBAAA,CAAA;;AA6ChB,EAAA,SAAgBG,MAAhB,CAAuB1C,KAAvB,EAAqC2C,UAAyB,EAA9D,EAAgE;AAAA,IAAA,IAAA,QAAA,CAAA;;AAC9D,IAAA,IAAI3C,KAAK,CAACyC,CAAN,CAAQ3B,CAAR,KAAc,SAAd,IAA2B,CAAAd,CAAAA,QAAAA,GAAAA,KAAK,CAACa,CAAN,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAASC,CAAT,MAAe,QAA9C,EAAwD;AACtD,MAAA,OAAO8B,qBAAqB,CAAC5C,KAAD,EAAQ2C,OAAR,CAA5B,CAAA;AACD,KAAA;;AACD,IAAA,MAAM,IAAIrF,KAAJ,CAAU,kCAAV,CAAN,CAAA;AACD,GAAA;;AALegF,EAAAA,KAAA,CAAAI,MAAA,SAAA,CAAA;;AAOhB,EAAA,SAAgBE,qBAAhB,CAAsC5C,KAAtC,EAAoD2C,OAApD,EAA0E;AACxE,IAAA,IAAI,CAAC3C,KAAK,CAACa,CAAX,EAAc;AACZ,MAAA,MAAM,IAAIvD,KAAJ,CAAU,CAAA,+BAAA,CAAV,CAAN,CAAA;AACD,KAAA;;AAED,IAAA,MAAMuF,MAAM,GAAGF,OAAO,CAACE,MAAR,GAAiBF,OAAO,CAACE,MAAR,CAAeC,OAAf,EAAjB,GAA4ClB,IAAI,CAACmB,GAAL,EAA3D,CAAA;AACA,IAAMC,MAAAA,SAAS,GAAG,CAACL,OAAO,CAACM,aAAR,IAAyBZ,sBAA1B,IAAoD,IAAtE,CAAA;;AAEA,IACET,IAAAA,IAAI,CAAChD,KAAL,CAAWoB,KAAK,CAACG,CAAN,CAAQO,GAAnB,CAA0BmC,GAAAA,MAAM,GAAGG,SAAnC,IACApB,IAAI,CAAChD,KAAL,CAAWoB,KAAK,CAACG,CAAN,CAAQS,GAAnB,CAA0BiC,GAAAA,MAAM,GAAGG,SAFrC,EAGE;AACA,MAAA,MAAM,IAAI1F,KAAJ,CAAU,CAAA,sBAAA,CAAV,CAAN,CAAA;AACD,KAAA;;AAED,IAAA,MAAM4F,UAAU,GAAGP,OAAO,CAACQ,sBAAR,GAAiCR,OAAO,CAACQ,sBAAR,GAAiC,IAAlE,GAAyE,CAA5F,CAAA;;AAEA,IAAA,IAAIvB,IAAI,CAAChD,KAAL,CAAWoB,KAAK,CAACG,CAAN,CAAQQ,GAAnB,IAA0BuC,UAA1B,GAAuCF,SAAvC,GAAmDH,MAAvD,EAA+D;AAC7D,MAAA,MAAM,IAAIvF,KAAJ,CAAU,CAAA,iBAAA,CAAV,CAAN,CAAA;AACD,KAAA;;AAED,IAAA,MAAMxB,GAAG,GAAG0D,WAAW,CAACO,SAAZ,CAAsBC,KAAtB,CAAZ,CAAA;AACA,IAAA,MAAMoD,GAAG,GAAGpD,KAAK,CAACa,CAAN,CAAQA,CAApB,CAAA;AACA,IAAMwC,MAAAA,gBAAgB,GAAGC,aAAa,CAACxH,GAAG,CAACkF,SAAJ,EAAD,EAAkBoC,GAAlB,CAAtC,CAAA;AACA,IAAA,MAAMG,UAAU,GAAGrD,SAAS,CAACtB,KAAV,CAAgBoB,KAAK,CAACG,CAAN,CAAQC,GAAR,CAAYC,OAAZ,CAAoB,UAApB,EAAgC,EAAhC,CAAhB,EAAqDrE,OAAxE,CAAA;;AACA,IAAIqH,IAAAA,gBAAgB,CAACG,WAAjB,EAAA,KAAmCD,UAAU,CAACC,WAAX,EAAvC,EAAiE;AAC/D,MAAA,MAAM,IAAIlG,KAAJ,CAAU,CAAA,mCAAA,CAAV,CAAN,CAAA;AACD,KAAA;AACF,GAAA;;AA5BegF,EAAAA,KAAA,CAAAM,qBAAA,wBAAA,CAAA;AA6BjB,CAlFD,EAAiBN,KAAK,KAALA,KAAK,GAkFrB,EAlFqB,CAAtB,CAAA,CAAA;;IA0FiBmB,WAAX;;AAAN,CAAA,UAAiBA,UAAjB,EAA2B;AAAA,EACH1D,MAAAA,SADG,aACOC,KADP,EAAA;AAAA,IACmB,IAAA;AAAA,MACtB0D,OAAAA,OAAAA,CAAAA,OAAAA,CAAAA,KAAK,CAACC,MAAN,CAAoC;AACtDxE,QAAAA,KAAK,EAAEa,KAD+C;AAEtD4D,QAAAA,KAAK,EAAEC,OAF+C;AAGtDC,QAAAA,MAAM,EAAEA,MAAAA;AAH8C,OAApC,CADsB,CAAA,CAAA;AAO3C,KARwB,CAAA,OAAA,CAAA,EAAA;AAAA,MAAA,OAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA;AAAA,KAAA;AAAA,GAAA,CAAA;;AACHL,EAAAA,UAAA,CAAA1D,SAAA,YAAA,CAAA;AAQvB,CATD,EAAiB0D,UAAU,KAAVA,UAAU,GAS1B,EAT0B,CAA3B,CAAA;;;;"}