{"version":3,"file":"resolver.modern.js","sources":["../src/resolver.ts"],"sourcesContent":["// Copyright 2018 Consensys AG\n\n// Licensed under the Apache License, Version 2.0(the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n\n// http://www.apache.org/licenses/LICENSE-2.0\n\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type Extensible = Record<string, any>\n\nexport interface DIDResolutionResult {\n  '@context'?: 'https://w3id.org/did-resolution/v1' | string | string[]\n  didResolutionMetadata: DIDResolutionMetadata\n  didDocument: DIDDocument | null\n  didDocumentMetadata: DIDDocumentMetadata\n}\n\nexport interface DIDResolutionOptions extends Extensible {\n  accept?: string\n}\n\nexport interface DIDResolutionMetadata extends Extensible {\n  contentType?: string\n  error?: 'invalidDid' | 'notFound' | 'representationNotSupported' | 'unsupportedDidMethod' | string\n}\n\nexport interface DIDDocumentMetadata extends Extensible {\n  created?: string\n  updated?: string\n  deactivated?: boolean\n  versionId?: string\n  nextUpdate?: string\n  nextVersionId?: string\n  equivalentId?: string\n  canonicalId?: string\n}\n\nexport type KeyCapabilitySection =\n  | 'authentication'\n  | 'assertionMethod'\n  | 'keyAgreement'\n  | 'capabilityInvocation'\n  | 'capabilityDelegation'\n\nexport type DIDDocument = {\n  '@context'?: 'https://www.w3.org/ns/did/v1' | string | string[]\n  id: string\n  alsoKnownAs?: string[]\n  controller?: string | string[]\n  verificationMethod?: VerificationMethod[]\n  service?: ServiceEndpoint[]\n  /**\n   * @deprecated\n   */\n  publicKey?: VerificationMethod[]\n} & {\n  [x in KeyCapabilitySection]?: (string | VerificationMethod)[]\n}\n\nexport interface ServiceEndpoint {\n  id: string\n  type: string\n  serviceEndpoint: string\n  description?: string\n}\n\n/**\n * Encapsulates a JSON web key type that includes only the public properties that\n * can be used in DID documents.\n *\n * The private properties are intentionally omitted to discourage the use\n * (and accidental disclosure) of private keys in DID documents.\n */\nexport interface JsonWebKey extends Extensible {\n  alg?: string\n  crv?: string\n  e?: string\n  ext?: boolean\n  key_ops?: string[]\n  kid?: string\n  kty: string\n  n?: string\n  use?: string\n  x?: string\n  y?: string\n}\n\nexport interface VerificationMethod {\n  id: string\n  type: string\n  controller: string\n  publicKeyBase58?: string\n  publicKeyBase64?: string\n  publicKeyJwk?: JsonWebKey\n  publicKeyHex?: string\n  publicKeyMultibase?: string\n  blockchainAccountId?: string\n  ethereumAddress?: string\n}\n\nexport interface Params {\n  [index: string]: string\n}\n\nexport interface ParsedDID {\n  did: string\n  didUrl: string\n  method: string\n  id: string\n  path?: string\n  fragment?: string\n  query?: string\n  params?: Params\n}\n\nexport type DIDResolver = (\n  did: string,\n  parsed: ParsedDID,\n  resolver: Resolvable,\n  options: DIDResolutionOptions\n) => Promise<DIDResolutionResult>\nexport type WrappedResolver = () => Promise<DIDResolutionResult>\nexport type DIDCache = (parsed: ParsedDID, resolve: WrappedResolver) => Promise<DIDResolutionResult>\nexport type LegacyDIDResolver = (did: string, parsed: ParsedDID, resolver: Resolvable) => Promise<DIDDocument>\n\nexport type ResolverRegistry = Record<string, DIDResolver>\n\nexport interface LegacyResolverRegistry {\n  [index: string]: LegacyDIDResolver\n}\n\nexport interface ResolverOptions {\n  cache?: DIDCache | boolean | undefined\n  legacyResolvers?: LegacyResolverRegistry\n}\n\nexport function inMemoryCache(): DIDCache {\n  const cache: Map<string, DIDResolutionResult> = new Map()\n  return async (parsed: ParsedDID, resolve) => {\n    if (parsed.params && parsed.params['no-cache'] === 'true') return await resolve()\n\n    const cached = cache.get(parsed.didUrl)\n    if (cached !== undefined) return cached\n    const result = await resolve()\n    if (result.didResolutionMetadata?.error !== 'notFound') {\n      cache.set(parsed.didUrl, result)\n    }\n    return result\n  }\n}\n\nexport function noCache(parsed: ParsedDID, resolve: WrappedResolver): Promise<DIDResolutionResult> {\n  return resolve()\n}\n\nconst PCT_ENCODED = '(?:%[0-9a-fA-F]{2})'\nconst ID_CHAR = `(?:[a-zA-Z0-9._-]|${PCT_ENCODED})`\nconst METHOD = '([a-z0-9]+)'\nconst METHOD_ID = `((?:${ID_CHAR}*:)*(${ID_CHAR}+))`\nconst PARAM_CHAR = '[a-zA-Z0-9_.:%-]'\nconst PARAM = `;${PARAM_CHAR}+=${PARAM_CHAR}*`\nconst PARAMS = `((${PARAM})*)`\nconst PATH = `(/[^#?]*)?`\nconst QUERY = `([?][^#]*)?`\nconst FRAGMENT = `(#.*)?`\nconst DID_MATCHER = new RegExp(`^did:${METHOD}:${METHOD_ID}${PARAMS}${PATH}${QUERY}${FRAGMENT}$`)\n\nexport function parse(didUrl: string): ParsedDID | null {\n  if (didUrl === '' || !didUrl) return null\n  const sections = didUrl.match(DID_MATCHER)\n  if (sections) {\n    const parts: ParsedDID = {\n      did: `did:${sections[1]}:${sections[2]}`,\n      method: sections[1],\n      id: sections[2],\n      didUrl,\n    }\n    if (sections[4]) {\n      const params = sections[4].slice(1).split(';')\n      parts.params = {}\n      for (const p of params) {\n        const kv = p.split('=')\n        parts.params[kv[0]] = kv[1]\n      }\n    }\n    if (sections[6]) parts.path = sections[6]\n    if (sections[7]) parts.query = sections[7].slice(1)\n    if (sections[8]) parts.fragment = sections[8].slice(1)\n    return parts\n  }\n  return null\n}\n\nconst EMPTY_RESULT: DIDResolutionResult = {\n  didResolutionMetadata: {},\n  didDocument: null,\n  didDocumentMetadata: {},\n}\n\nexport function wrapLegacyResolver(resolve: LegacyDIDResolver): DIDResolver {\n  return async (did, parsed, resolver) => {\n    try {\n      const doc = await resolve(did, parsed, resolver)\n      return {\n        ...EMPTY_RESULT,\n        didResolutionMetadata: { contentType: 'application/did+ld+json' },\n        didDocument: doc,\n      }\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (e: any) {\n      return {\n        ...EMPTY_RESULT,\n        didResolutionMetadata: {\n          error: 'notFound',\n          message: e.toString(), // This is not in spec, but may be helpful\n        },\n      }\n    }\n  }\n}\n\nexport interface Resolvable {\n  resolve: (didUrl: string, options?: DIDResolutionOptions) => Promise<DIDResolutionResult>\n}\n\nexport class Resolver implements Resolvable {\n  private registry: ResolverRegistry\n  private cache: DIDCache\n\n  constructor(registry: ResolverRegistry = {}, options: ResolverOptions = {}) {\n    this.registry = registry\n    this.cache = options.cache === true ? inMemoryCache() : options.cache || noCache\n    if (options.legacyResolvers) {\n      Object.keys(options.legacyResolvers).map((methodName) => {\n        if (!this.registry[methodName]) {\n          this.registry[methodName] = wrapLegacyResolver(\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            options.legacyResolvers![methodName]\n          )\n        }\n      })\n    }\n  }\n\n  async resolve(didUrl: string, options: DIDResolutionOptions = {}): Promise<DIDResolutionResult> {\n    const parsed = parse(didUrl)\n    if (parsed === null) {\n      return {\n        ...EMPTY_RESULT,\n        didResolutionMetadata: { error: 'invalidDid' },\n      }\n    }\n    const resolver = this.registry[parsed.method]\n    if (!resolver) {\n      return {\n        ...EMPTY_RESULT,\n        didResolutionMetadata: { error: 'unsupportedDidMethod' },\n      }\n    }\n    return this.cache(parsed, () => resolver(parsed.did, parsed, this, options))\n  }\n}\n"],"names":["inMemoryCache","cache","Map","parsed","resolve","params","cached","get","didUrl","undefined","result","didResolutionMetadata","error","set","noCache","PCT_ENCODED","ID_CHAR","METHOD","METHOD_ID","PARAM_CHAR","PARAM","PARAMS","PATH","QUERY","FRAGMENT","DID_MATCHER","RegExp","parse","sections","match","parts","did","method","id","slice","split","p","kv","path","query","fragment","EMPTY_RESULT","didDocument","didDocumentMetadata","wrapLegacyResolver","resolver","doc","contentType","e","message","toString","Resolver","constructor","registry","options","legacyResolvers","Object","keys","map","methodName"],"mappings":"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"}