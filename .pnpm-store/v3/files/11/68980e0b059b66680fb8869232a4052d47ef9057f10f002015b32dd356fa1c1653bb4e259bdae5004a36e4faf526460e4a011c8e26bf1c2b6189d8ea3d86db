{"version":3,"sources":["ObjectInspector.tsx"],"names":["React","useEffect","useState","makeClass","parse","useTheme","ThemeProvider","ObjectInspectorItem","styles","ObjectInspector","props","data","expandLevel","sortKeys","includePrototypes","className","theme","colorScheme","onSelect","html","ast","setAST","undefined","themeClass","currentTheme","currentColorScheme","runParser","objectInspector","defaultProps"],"mappings":"0IAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,SAAP,KAAsB,MAAtB,CACA,OACEC,KADF,KAKO,4BALP,CAMA,OAA2BC,QAA3B,CAAqCC,aAArC,KAA0D,qBAA1D,CACA,MAAOC,CAAAA,mBAAP,KAAgC,uBAAhC,CAEA,MAAOC,CAAAA,MAAP,KAAmB,uBAAnB,CAiBA,MAAO,MAAMC,CAAAA,eAAe,CAAIC,KAAD,EAAiC,CAC9D,KAAM,CACJC,IADI,CAEJC,WAFI,CAGJC,QAHI,CAIJC,iBAJI,CAKJC,SALI,CAMJC,KANI,CAOJC,WAPI,CAQJC,QARI,EAUFR,KAVJ,CASKS,IATL,0BAUIT,KAVJ,qGAWA,KAAM,CAACU,GAAD,CAAMC,MAAN,EAAgBnB,QAAQ,CAAsBoB,SAAtB,CAA9B,CACA,KAAM,CAAEC,UAAF,CAAcC,YAAd,CAA4BC,kBAA5B,EAAmDpB,QAAQ,CAC/D,CAAEW,KAAF,CAASC,WAAT,CAD+D,CAE/DT,MAF+D,CAAjE,CAMAP,SAAS,CAAC,IAAM,CAEd,KAAMyB,CAAAA,SAAS,CAAG,SAAY,CAC5BL,MAAM,CAAC,KAAMjB,CAAAA,KAAK,CAACO,IAAD,CAAOE,QAAP,CAAiBC,iBAAjB,CAAZ,CACP,CAFD,CAIAY,SAAS,EACV,CAPQ,CAON,CAACf,IAAD,CAAOE,QAAP,CAAiBC,iBAAjB,CAPM,CAAT,CASA,MACE,qCACE,SAAS,CAAEX,SAAS,CAACK,MAAM,CAACmB,eAAR,CAAyBZ,SAAzB,CAAoCQ,UAApC,CADtB,EAEMJ,IAFN,EAIGC,GAAG,EACF,oBAAC,aAAD,EAAe,KAAK,CAAEI,YAAtB,CAAoC,WAAW,CAAEC,kBAAjD,EACE,oBAAC,mBAAD,EACE,GAAG,CAAEL,GADP,CAEE,WAAW,CAAER,WAFf,CAGE,QAAQ,CAAEM,QAHZ,EADF,CALJ,CAeH,CA5CM,CA8CPT,eAAe,CAACmB,YAAhB,CAA+B,CAC7BhB,WAAW,CAAE,CADgB,CAE7BC,QAAQ,CAAE,IAFmB,CAG7BC,iBAAiB,CAAE,IAHU,CAA/B,CAMA,cAAeL,CAAAA,eAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport makeClass from \"clsx\";\nimport {\n  parse,\n  SupportedTypes,\n  ASTNode,\n  ResolvedASTNode,\n} from \"@devtools-ds/object-parser\";\nimport { ThemeableElement, useTheme, ThemeProvider } from \"@devtools-ds/themes\";\nimport ObjectInspectorItem from \"./ObjectInspectorItem\";\n\nimport styles from \"./ObjectInspector.css\";\n\ninterface ObjectInspectorProps\n  extends Omit<ThemeableElement<\"div\">, \"onSelect\"> {\n  /** JSON data to render in the tree. */\n  data: SupportedTypes;\n  /** Depth of the tree that is open at first render. */\n  expandLevel: number;\n  /** Whether to sort keys like the browsers do. */\n  sortKeys: boolean;\n  /** Whether to include object Prototypes */\n  includePrototypes: boolean;\n  /** Callback when a particular node in the tree is actively selected */\n  onSelect?: (node?: ASTNode | ResolvedASTNode) => void;\n}\n\n/** An emulation of browsers JSON object inspector. */\nexport const ObjectInspector = (props: ObjectInspectorProps) => {\n  const {\n    data,\n    expandLevel,\n    sortKeys,\n    includePrototypes,\n    className,\n    theme,\n    colorScheme,\n    onSelect,\n    ...html\n  } = props;\n  const [ast, setAST] = useState<ASTNode | undefined>(undefined);\n  const { themeClass, currentTheme, currentColorScheme } = useTheme(\n    { theme, colorScheme },\n    styles\n  );\n\n  /** Handle async types */\n  useEffect(() => {\n    /** Async function run the parser */\n    const runParser = async () => {\n      setAST(await parse(data, sortKeys, includePrototypes));\n    };\n\n    runParser();\n  }, [data, sortKeys, includePrototypes]);\n\n  return (\n    <div\n      className={makeClass(styles.objectInspector, className, themeClass)}\n      {...html}\n    >\n      {ast && (\n        <ThemeProvider theme={currentTheme} colorScheme={currentColorScheme}>\n          <ObjectInspectorItem\n            ast={ast}\n            expandLevel={expandLevel}\n            onSelect={onSelect}\n          />\n        </ThemeProvider>\n      )}\n    </div>\n  );\n};\n\nObjectInspector.defaultProps = {\n  expandLevel: 0,\n  sortKeys: true,\n  includePrototypes: true,\n};\n\nexport default ObjectInspector;\n"]}
