{"version":3,"file":"PrometheusSerializer.js","sourceRoot":"","sources":["../../src/PrometheusSerializer.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport {\n  ResourceMetrics,\n  InstrumentType,\n  DataPointType,\n  InstrumentationLibraryMetrics,\n  MetricData,\n  DataPoint,\n  Histogram,\n} from '@opentelemetry/sdk-metrics-base';\nimport type { MetricAttributes } from '@opentelemetry/api-metrics';\nimport { hrTimeToMilliseconds } from '@opentelemetry/core';\n\ntype PrometheusDataTypeLiteral =\n  | 'counter'\n  | 'gauge'\n  | 'histogram'\n  | 'summary'\n  | 'untyped';\n\nfunction escapeString(str: string) {\n  return str.replace(/\\\\/g, '\\\\\\\\').replace(/\\n/g, '\\\\n');\n}\n\nfunction escapeAttributeValue(str: string) {\n  if (typeof str !== 'string') {\n    str = String(str);\n  }\n  return escapeString(str).replace(/\"/g, '\\\\\"');\n}\n\nconst invalidCharacterRegex = /[^a-z0-9_]/gi;\n/**\n * Ensures metric names are valid Prometheus metric names by removing\n * characters allowed by OpenTelemetry but disallowed by Prometheus.\n *\n * https://prometheus.io/docs/concepts/data_model/#metric-names-and-attributes\n *\n * 1. Names must match `[a-zA-Z_:][a-zA-Z0-9_:]*`\n *\n * 2. Colons are reserved for user defined recording rules.\n * They should not be used by exporters or direct instrumentation.\n *\n * OpenTelemetry metric names are already validated in the Meter when they are created,\n * and they match the format `[a-zA-Z][a-zA-Z0-9_.\\-]*` which is very close to a valid\n * prometheus metric name, so we only need to strip characters valid in OpenTelemetry\n * but not valid in prometheus and replace them with '_'.\n *\n * @param name name to be sanitized\n */\nfunction sanitizePrometheusMetricName(name: string): string {\n  return name.replace(invalidCharacterRegex, '_'); // replace all invalid characters with '_'\n}\n\n/**\n * @private\n *\n * Helper method which assists in enforcing the naming conventions for metric\n * names in Prometheus\n * @param name the name of the metric\n * @param type the kind of metric\n * @returns string\n */\nfunction enforcePrometheusNamingConvention(\n  name: string,\n  type: InstrumentType\n): string {\n  // Prometheus requires that metrics of the Counter kind have \"_total\" suffix\n  if (!name.endsWith('_total') && type === InstrumentType.COUNTER) {\n    name = name + '_total';\n  }\n\n  return name;\n}\n\nfunction valueString(value: number) {\n  if (Number.isNaN(value)) {\n    return 'Nan';\n  } else if (!Number.isFinite(value)) {\n    if (value < 0) {\n      return '-Inf';\n    } else {\n      return '+Inf';\n    }\n  } else {\n    return `${value}`;\n  }\n}\n\nfunction toPrometheusType(\n  instrumentType: InstrumentType,\n  dataPointType: DataPointType,\n): PrometheusDataTypeLiteral {\n  switch (dataPointType) {\n    case DataPointType.SINGULAR:\n      if (\n        instrumentType === InstrumentType.COUNTER ||\n        instrumentType === InstrumentType.OBSERVABLE_COUNTER\n      ) {\n        return 'counter';\n      }\n      /**\n       * - HISTOGRAM\n       * - UP_DOWN_COUNTER\n       * - OBSERVABLE_GAUGE\n       * - OBSERVABLE_UP_DOWN_COUNTER\n       */\n      return 'gauge';\n    case DataPointType.HISTOGRAM:\n      return 'histogram';\n    default:\n      return 'untyped';\n  }\n}\n\nfunction stringify(\n  metricName: string,\n  attributes: MetricAttributes,\n  value: number,\n  timestamp?: number,\n  additionalAttributes?: MetricAttributes\n) {\n  let hasAttribute = false;\n  let attributesStr = '';\n\n  for (const [key, val] of Object.entries(attributes)) {\n    const sanitizedAttributeName = sanitizePrometheusMetricName(key);\n    hasAttribute = true;\n    attributesStr += `${\n      attributesStr.length > 0 ? ',' : ''\n    }${sanitizedAttributeName}=\"${escapeAttributeValue(val)}\"`;\n  }\n  if (additionalAttributes) {\n    for (const [key, val] of Object.entries(additionalAttributes)) {\n      const sanitizedAttributeName = sanitizePrometheusMetricName(key);\n      hasAttribute = true;\n      attributesStr += `${\n        attributesStr.length > 0 ? ',' : ''\n      }${sanitizedAttributeName}=\"${escapeAttributeValue(val)}\"`;\n    }\n  }\n\n  if (hasAttribute) {\n    metricName += `{${attributesStr}}`;\n  }\n\n  return `${metricName} ${valueString(value)}${\n    timestamp !== undefined ? ' ' + String(timestamp) : ''\n  }\\n`;\n}\n\nexport class PrometheusSerializer {\n  private _prefix: string | undefined;\n  private _appendTimestamp: boolean;\n\n  constructor(prefix?: string, appendTimestamp = true) {\n    if (prefix) {\n      this._prefix = prefix + '_';\n    }\n    this._appendTimestamp = appendTimestamp;\n  }\n\n  serialize(resourceMetrics: ResourceMetrics): string {\n    let str = '';\n    for (const instrumentationLibraryMetrics of resourceMetrics.instrumentationLibraryMetrics) {\n      str += this.serializeInstrumentationLibraryMetrics(instrumentationLibraryMetrics);\n    }\n    return str;\n  }\n\n  serializeInstrumentationLibraryMetrics(instrumentationLibraryMetrics: InstrumentationLibraryMetrics) {\n    let str = '';\n    for (const metric of instrumentationLibraryMetrics.metrics) {\n      str += this.serializeMetricData(metric) + '\\n';\n    }\n    return str;\n  }\n\n  serializeMetricData(metricData: MetricData) {\n    let name = sanitizePrometheusMetricName(\n      escapeString(metricData.descriptor.name)\n    );\n    if (this._prefix) {\n      name = `${this._prefix}${name}`;\n    }\n    const dataPointType = metricData.dataPointType;\n\n    name = enforcePrometheusNamingConvention(\n      name,\n      metricData.descriptor.type\n    );\n\n    const help = `# HELP ${name} ${escapeString(\n      metricData.descriptor.description || 'description missing'\n    )}`;\n    const type = `# TYPE ${name} ${toPrometheusType(\n      metricData.descriptor.type,\n      dataPointType\n    )}`;\n\n    let results = '';\n    switch (dataPointType) {\n      case DataPointType.SINGULAR: {\n        results = metricData.dataPoints\n          .map(it => this.serializeSingularDataPoint(name, metricData.descriptor.type, it))\n          .join('');\n        break;\n      }\n      case DataPointType.HISTOGRAM: {\n        results = metricData.dataPoints\n          .map(it => this.serializeHistogramDataPoint(name, metricData.descriptor.type, it))\n          .join('');\n        break;\n      }\n      default: {\n        diag.error(`Unrecognizable DataPointType: ${dataPointType} for metric \"${name}\"`);\n      }\n    }\n\n    return `${help}\\n${type}\\n${results}`.trim();\n  }\n\n  serializeSingularDataPoint(name: string, type: InstrumentType, dataPoint: DataPoint<number>): string {\n    let results = '';\n\n    name = enforcePrometheusNamingConvention(name, type);\n    const { value, attributes } = dataPoint;\n    const timestamp = hrTimeToMilliseconds(dataPoint.endTime);\n    results += stringify(\n      name,\n      attributes,\n      value,\n      this._appendTimestamp ? timestamp : undefined,\n      undefined\n    );\n    return results;\n  }\n\n  serializeHistogramDataPoint(name: string, type: InstrumentType, dataPoint: DataPoint<Histogram>): string {\n    let results = '';\n\n    name = enforcePrometheusNamingConvention(name, type);\n    const { value, attributes } = dataPoint;\n    const timestamp = hrTimeToMilliseconds(dataPoint.endTime);\n    /** Histogram[\"bucket\"] is not typed with `number` */\n    for (const key of ['count', 'sum'] as ('count' | 'sum')[]) {\n      results += stringify(\n        name + '_' + key,\n        attributes,\n        value[key],\n        this._appendTimestamp ? timestamp : undefined,\n        undefined\n      );\n    }\n\n    let cumulativeSum = 0;\n    const countEntries = value.buckets.counts.entries();\n    let infiniteBoundaryDefined = false;\n    for (const [idx, val] of countEntries) {\n      cumulativeSum += val;\n      const upperBound = value.buckets.boundaries[idx];\n      /** HistogramAggregator is producing different boundary output -\n       * in one case not including infinity values, in other -\n       * full, e.g. [0, 100] and [0, 100, Infinity]\n       * we should consider that in export, if Infinity is defined, use it\n       * as boundary\n       */\n      if (upperBound === undefined && infiniteBoundaryDefined) {\n        break;\n      }\n      if (upperBound === Infinity) {\n        infiniteBoundaryDefined = true;\n      }\n      results += stringify(\n        name + '_bucket',\n        attributes,\n        cumulativeSum,\n        this._appendTimestamp ? timestamp : undefined,\n        {\n          le:\n            upperBound === undefined || upperBound === Infinity\n              ? '+Inf'\n              : String(upperBound),\n        }\n      );\n    }\n\n    return results;\n  }\n}\n"]}