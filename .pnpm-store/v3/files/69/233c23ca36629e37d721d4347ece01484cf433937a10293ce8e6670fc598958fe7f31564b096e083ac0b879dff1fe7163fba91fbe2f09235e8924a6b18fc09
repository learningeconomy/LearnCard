{"version":3,"sources":["logger.ts"],"names":["noop","message","noopLogger","debug","error","info","log","warn","consoleLogger","console","logger","process","env","NODE_ENV"],"mappings":"4FAMA,GAAMA,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,CAACC,OAAD,CAA6C,CAAE,CAA5D,CA2BA,GAAMC,CAAAA,UAA2B,CAAG,CAClCC,KAAK,CAAEH,IAD2B,CAElCI,KAAK,CAAEJ,IAF2B,CAGlCK,IAAI,CAAEL,IAH4B,CAIlCM,GAAG,CAAEN,IAJ6B,CAKlCO,IAAI,CAAEP,IAL4B,CAApC,CASA,GAAMQ,CAAAA,aAA8B,CAAG,CACrCL,KAAK,CAAEM,OAAO,CAACN,KADsB,CAErCC,KAAK,CAAEK,OAAO,CAACL,KAFsB,CAGrCC,IAAI,CAAEI,OAAO,CAACJ,IAHuB,CAIrCC,GAAG,CAAEG,OAAO,CAACH,GAJwB,CAKrCC,IAAI,CAAEE,OAAO,CAACF,IALuB,CAAvC,CAaO,GAAMG,CAAAA,MAAM,CACjBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,aAAzB,CAAyCL,aAAzC,CAAyDN,UADpD,C","sourcesContent":["/* eslint-disable no-console */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype logFunction = (message?: any, ...optionalParams: any[]) => void;\n\n/** Noop version of a logging function */\n// eslint-disable-next-line\nconst noop = (message?: any, ...optionalParams: any[]) => {};\n\n/** Subset of console.log calls that are removed outside of development */\ninterface LoggerInterface {\n  /**\n   * The `console.debug()` function is an alias for {@link console.log()}.\n   */\n  debug: logFunction;\n  /**\n   * Prints to `stderr` with newline.\n   */\n  error: logFunction;\n  /**\n   * The {@link console.info()} function is an alias for {@link console.log()}.\n   */\n  info: logFunction;\n  /**\n   * Prints to `stdout` with newline.\n   */\n  log: logFunction;\n  /**\n   * The {@link console.warn()} function is an alias for {@link console.error()}.\n   */\n  warn: logFunction;\n}\n\n/** Logger which no-ops in production */\nconst noopLogger: LoggerInterface = {\n  debug: noop,\n  error: noop,\n  info: noop,\n  log: noop,\n  warn: noop\n};\n\n/** Logger which returns console in development mode */\nconst consoleLogger: LoggerInterface = {\n  debug: console.debug,\n  error: console.error,\n  info: console.info,\n  log: console.log,\n  warn: console.warn\n};\n\n/**\n * Logger\n * A logging utility which maps to console in development but\n * is a no-op in production.\n */\nexport const logger =\n  process.env.NODE_ENV === 'development' ? consoleLogger : noopLogger;\n"]}
