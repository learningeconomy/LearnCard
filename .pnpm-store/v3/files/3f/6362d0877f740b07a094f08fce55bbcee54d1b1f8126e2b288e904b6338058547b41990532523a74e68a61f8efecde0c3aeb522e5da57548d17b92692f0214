{"version":3,"sources":["styled.tsx"],"names":["styled","element","options","defaultDescription","className","description","name","slot","elements","ElementsReduced","reduce","Accumulator","CurrentValue","asProps","Wrapped","React","forwardRef","props","ref","as","rest","Component","_SLOT_","Symbol","displayName","__docgenInfo"],"mappings":"wiBAAA,oDACA,kDACA,oCAiDO,QAASA,CAAAA,MAAT,CACLC,OADK,CAELC,OAFK,CAGL,CACA,GAAMC,CAAAA,kBAAkB,8DAAwDF,OAAxD,eAAxB,CADA,SAGE,MAAOC,CAAAA,OAAP,GAAmB,QAAnB,CACK,CAAE,QAAOA,OAAT,CADL,CAEIA,OALN,CAEeE,SAFf,eAE0BC,WAF1B,MAE0BA,WAF1B,CAEuCC,IAFvC,MAEuCA,IAFvC,CAE6CC,IAF7C,MAE6CA,IAF7C,CAgBA,GAAMC,CAAAA,QAAQ,CAAG,uBAASP,OAAT,CAAjB,CAKA,GAAMQ,CAAAA,eAAe,CAAG,mCACnBD,QADmB,EAEtBE,MAFsB,CAEf,SAACC,WAAD,CAAmBC,YAAnB,QAAyC,UAACC,OAAD,QAChD,qBAAC,YAAD,6BAAkBA,OAAlB,EAA2B,EAAE,CAAEF,WAA/B,GADgD,CAAzC,CAFe,CAAxB,CAOA,GAAMG,CAAAA,OAAO,CAAGC,KAAK,CAACC,UAAN,CAAqC,SAACC,KAAD,CAAQC,GAAR,CAAgB,IAC3DC,CAAAA,EAD2D,CAC3CF,KAD2C,CAC3DE,EAD2D,CACpDC,IADoD,0CAC3CH,KAD2C,SAInE,GAAMI,CAAAA,SAAS,CAAGF,EAAE,EAAIV,eAAxB,CAEA,MACE,qBAAC,SAAD,2BACE,GAAG,CAAES,GADP,EAEME,IAFN,EAGE,SAAS,CAAE,qBAAUhB,SAAV,CAAsBa,KAAD,CAAeb,SAApC,CAHb,GAMH,CAbe,CAAhB,CAgBAU,OAAO,CAACQ,MAAR,CAAiBf,IAAI,EAAIgB,MAAM,CAACf,QAAQ,CAAC,CAAD,CAAT,CAA/B,CACAM,OAAO,CAACU,WAAR,CAAsBlB,IAAtB,CAEAQ,OAAO,CAACW,YAAR,CAAuB,CACrBpB,WAAW,CAAEA,WAAW,WACjBA,WADiB,aACFF,kBADE,EAEpBA,kBAHiB,CAAvB,CAMA,MAAOW,CAAAA,OACR","sourcesContent":["import * as React from 'react';\nimport makeClass from 'clsx';\nimport { arrayify } from './arrayify';\n\nimport { Element } from '..';\n\nexport interface DocGen {\n  /** The generated docs for the react component */\n  __docgenInfo?: {\n    /** A description for the component */\n    description: string | undefined;\n  };\n}\n\nexport interface Slotted {\n  /** The slot the styled element should render in */\n  _SLOT_: symbol;\n}\n\ninterface WrappedComponent {\n  /** A className to attach to the root component */\n  class?: string;\n  /** The name to set as the display name for the component */\n  name: string;\n  /** A description for documentation tools */\n  description?: string;\n  /** The slot the styled element should render in */\n  slot?: symbol;\n}\n\n/**\n * Create a react element with a className attached. The generated element accepts\n * all the same props as the element prop.\n *\n * @param element - The html dom element to create a Component for\n * @param options - The class an metadata to attach to the Component\n *\n * @example\n *\n * const Wrapper = styled('div', {\n *   class: styles.fancy,\n *   description: 'A fancy component',\n *   name: 'FancyWrapper'\n * });\n *\n * const Example = ({ children, ...html }) => {\n *   <Wrapper {...html}>\n *     {children}\n *   </Wrapper>\n * }\n */\nexport function styled<T extends keyof JSX.IntrinsicElements>(\n  element: T | [T, ...((props: any) => React.ReactNode)[]],\n  options: string | WrappedComponent\n) {\n  const defaultDescription = `This component accepts all HTML attributes for a \"${element}\" element.`;\n  const { class: className, description, name, slot } =\n    typeof options === 'string'\n      ? ({ class: options } as WrappedComponent)\n      : options;\n\n  type Props = Element<T> & {\n    /** A component to render as instead of a 'div' */\n    as?: React.ElementType;\n  };\n\n  type WithRef = React.ForwardRefExoticComponent<\n    React.PropsWithoutRef<Props> & React.RefAttributes<HTMLElement>\n  >;\n\n  const elements = arrayify(element) as [\n    T,\n    ...((props: unknown) => JSX.Element)[]\n  ];\n\n  const ElementsReduced = [\n    ...elements\n  ].reduce((Accumulator: any, CurrentValue: any) => (asProps: unknown) => (\n    <CurrentValue {...asProps} as={Accumulator} />\n  )) as any;\n\n  /** The result \"styled\" component. */\n  const Wrapped = React.forwardRef<HTMLElement, Props>((props, ref) => {\n    const { as, ...rest } = props;\n\n    /* If more then one component comes reduce into one component */\n    const Component = as || ElementsReduced;\n\n    return (\n      <Component\n        ref={ref}\n        {...rest}\n        className={makeClass(className, (props as any).className)}\n      />\n    );\n  }) as DocGen & Slotted & WithRef;\n\n  // eslint-disable-next-line no-underscore-dangle\n  Wrapped._SLOT_ = slot || Symbol(elements[0]);\n  Wrapped.displayName = name;\n  // eslint-disable-next-line no-underscore-dangle\n  Wrapped.__docgenInfo = {\n    description: description\n      ? `${description} ${defaultDescription}`\n      : defaultDescription\n  };\n\n  return Wrapped;\n}\n"]}
