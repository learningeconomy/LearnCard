{"version":3,"file":"MeterSharedState.js","sourceRoot":"","sources":["../../../src/state/MeterSharedState.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAMH,kEAAmG;AACnG,oCAAiC;AACjC,oCAAwC;AACxC,6DAA0D;AAG1D,mEAAgE;AAChE,6EAAkE;AAClE,2DAAwD;AAExD;;GAEG;AACH,MAAa,gBAAgB;IAI3B,YAAoB,yBAAmD,EAAU,uBAA+C;QAA5G,8BAAyB,GAAzB,yBAAyB,CAA0B;QAAU,4BAAuB,GAAvB,uBAAuB,CAAwB;QAHxH,2BAAsB,GAAG,IAAI,6CAAqB,EAAE,CAAC;QAI3D,IAAI,CAAC,KAAK,GAAG,IAAI,aAAK,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED,qBAAqB,CAAC,UAAgC;QACpD,MAAM,KAAK,GAAG,IAAI,CAAC,yBAAyB,CAAC,YAAY,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,uBAAuB,CAAC,CAAC;QAC9G,MAAM,QAAQ,GAAG,KAAK;aACnB,GAAG,CAAC,IAAI,CAAC,EAAE;YACV,MAAM,cAAc,GAAG,IAAA,yDAAkC,EAAC,IAAI,EAAE,UAAU,CAAC,CAAC;YAC5E,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;YACrE,MAAM,OAAO,GAAG,IAAI,qCAAiB,CAAC,cAAc,EAAE,UAAU,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;YAC5F,OAAO,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACvD,CAAC,CAAC;aACD,MAAM,CAAC,oBAAY,CAAC,CAAC;QACxB,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAG;YAC1B,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC;SACpB;QACD,OAAO,IAAI,+CAAkB,CAAC,QAAQ,CAAC,CAAC;IAC1C,CAAC;IAED,0BAA0B,CAAC,UAAgC,EAAE,QAAoC;QAC/F,MAAM,KAAK,GAAG,IAAI,CAAC,yBAAyB,CAAC,YAAY,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,uBAAuB,CAAC,CAAC;QAC9G,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACnB,MAAM,cAAc,GAAG,IAAA,yDAAkC,EAAC,IAAI,EAAE,UAAU,CAAC,CAAC;YAC5E,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;YACrE,MAAM,WAAW,GAAG,IAAI,uCAAkB,CAAC,cAAc,EAAE,UAAU,EAAE,IAAI,CAAC,mBAAmB,EAAE,QAAQ,CAAC,CAAC;YAC3G,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,OAAO,CAAC,SAAgC,EAAE,cAAsB;QACpE;;;WAGG;QACH,MAAM,cAAc,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,WAAW,EAAE,CAAC;aAC3F,GAAG,CAAC,aAAa,CAAC,EAAE;YACnB,OAAO,aAAa,CAAC,OAAO,CAC1B,SAAS,EACT,IAAI,CAAC,yBAAyB,CAAC,gBAAgB,EAC/C,IAAI,CAAC,yBAAyB,CAAC,YAAY,EAC3C,cAAc,CAAC,CAAC;QACpB,CAAC,CAAC;aACD,MAAM,CAAC,oBAAY,CAAC,CAAC,CAAC;QAEzB,OAAO;YACL,sBAAsB,EAAE,IAAI,CAAC,uBAAuB;YACpD,OAAO,EAAE,cAAc,CAAC,MAAM,CAAC,oBAAY,CAAC;SAC7C,CAAC;IACJ,CAAC;CACF;AA3DD,4CA2DC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport * as metrics from '@opentelemetry/api-metrics';\nimport { InstrumentationLibrary } from '@opentelemetry/core';\nimport { InstrumentationLibraryMetrics } from '../export/MetricData';\nimport { createInstrumentDescriptorWithView, InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { Meter } from '../Meter';\nimport { isNotNullish } from '../utils';\nimport { AsyncMetricStorage } from './AsyncMetricStorage';\nimport { MeterProviderSharedState } from './MeterProviderSharedState';\nimport { MetricCollectorHandle } from './MetricCollector';\nimport { MetricStorageRegistry } from './MetricStorageRegistry';\nimport { MultiMetricStorage } from './MultiWritableMetricStorage';\nimport { SyncMetricStorage } from './SyncMetricStorage';\n\n/**\n * An internal record for shared meter provider states.\n */\nexport class MeterSharedState {\n  private _metricStorageRegistry = new MetricStorageRegistry();\n  meter: Meter;\n\n  constructor(private _meterProviderSharedState: MeterProviderSharedState, private _instrumentationLibrary: InstrumentationLibrary) {\n    this.meter = new Meter(this);\n  }\n\n  registerMetricStorage(descriptor: InstrumentDescriptor) {\n    const views = this._meterProviderSharedState.viewRegistry.findViews(descriptor, this._instrumentationLibrary);\n    const storages = views\n      .map(view => {\n        const viewDescriptor = createInstrumentDescriptorWithView(view, descriptor);\n        const aggregator = view.aggregation.createAggregator(viewDescriptor);\n        const storage = new SyncMetricStorage(viewDescriptor, aggregator, view.attributesProcessor);\n        return this._metricStorageRegistry.register(storage);\n      })\n      .filter(isNotNullish);\n    if (storages.length === 1)  {\n      return storages[0];\n    }\n    return new MultiMetricStorage(storages);\n  }\n\n  registerAsyncMetricStorage(descriptor: InstrumentDescriptor, callback: metrics.ObservableCallback) {\n    const views = this._meterProviderSharedState.viewRegistry.findViews(descriptor, this._instrumentationLibrary);\n    views.forEach(view => {\n      const viewDescriptor = createInstrumentDescriptorWithView(view, descriptor);\n      const aggregator = view.aggregation.createAggregator(viewDescriptor);\n      const viewStorage = new AsyncMetricStorage(viewDescriptor, aggregator, view.attributesProcessor, callback);\n      this._metricStorageRegistry.register(viewStorage);\n    });\n  }\n\n  /**\n   * @param collector opaque handle of {@link MetricCollector} which initiated the collection.\n   * @param collectionTime the HrTime at which the collection was initiated.\n   * @returns the list of {@link MetricData} collected.\n   */\n  async collect(collector: MetricCollectorHandle, collectionTime: HrTime): Promise<InstrumentationLibraryMetrics> {\n    /**\n     * 1. Call all observable callbacks first.\n     * 2. Collect metric result for the collector.\n     */\n    const metricDataList = await Promise.all(Array.from(this._metricStorageRegistry.getStorages())\n      .map(metricStorage => {\n        return metricStorage.collect(\n          collector,\n          this._meterProviderSharedState.metricCollectors,\n          this._meterProviderSharedState.sdkStartTime,\n          collectionTime);\n      })\n      .filter(isNotNullish));\n\n    return {\n      instrumentationLibrary: this._instrumentationLibrary,\n      metrics: metricDataList.filter(isNotNullish),\n    };\n  }\n}\n"]}