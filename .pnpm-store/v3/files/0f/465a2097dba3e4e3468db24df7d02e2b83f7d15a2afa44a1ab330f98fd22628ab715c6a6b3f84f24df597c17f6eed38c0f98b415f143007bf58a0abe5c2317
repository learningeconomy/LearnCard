{"version":3,"sources":["AutoThemeProvider.tsx"],"names":["React","all","ThemeContext","isWindowDefined","window","isFirefox","navigator","userAgent","toLowerCase","includes","useDarkMode","darkMode","setDarkMode","useState","matchMedia","matches","useEffect","mediaQuery","changeDarkMode","addListener","removeListener","AutoThemeProvider","theme","propsTheme","colorScheme","propsColorScheme","autoStyle","children","html","isDark","style","backgroundColor","color","textColor","minHeight","width","undefined"],"mappings":"0IAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,UAApB,CACA,OAA2BC,YAA3B,KAA+C,SAA/C,CAEA,KAAMC,CAAAA,eAAe,CAAG,MAAOC,CAAAA,MAAP,GAAkB,WAA1C,CAGA,MAAO,MAAMC,CAAAA,SAAS,CAAG,IAAM,+BAC7B,GAAIF,eAAe,WAAIC,MAAJ,+CAAI,QAAQE,SAAZ,sCAAI,kBAAmBC,SAA1C,CAAqD,CACnD,GAAIH,MAAM,CAACE,SAAP,CAAiBC,SAAjB,CAA2BC,WAA3B,GAAyCC,QAAzC,CAAkD,SAAlD,CAAJ,CAAkE,CAChE,MAAO,KACR,CACF,CAED,MAAO,MACR,CARM,CAqBP,KAAMC,CAAAA,WAAW,CAAG,IAAM,CACxB,KAAM,CAACC,QAAD,CAAWC,WAAX,EAA0BZ,KAAK,CAACa,QAAN,CAC9BV,eAAe,EAAIC,MAAnB,CACIA,MAAM,CAACU,UAAP,CAAkB,8BAAlB,EAAkDC,OADtD,CAEI,KAH0B,CAAhC,CAMAf,KAAK,CAACgB,SAAN,CAAgB,IAAM,CACpB,GAAI,CAACb,eAAL,CAAsB,CACpB,MACD,CAED,KAAMc,CAAAA,UAAU,CAAGb,MAAM,CAACU,UAAP,CAAkB,8BAAlB,CAAnB,CAGA,KAAMI,CAAAA,cAAc,CAAG,IAAMN,WAAW,CAAC,CAACD,QAAF,CAAxC,CAEAM,UAAU,CAACE,WAAX,CAAuBD,cAAvB,EAEA,MAAO,IAAM,CACXD,UAAU,CAACG,cAAX,CAA0BF,cAA1B,CACD,CACF,CAfD,CAeG,CAACP,QAAD,CAfH,EAiBA,MAAOA,CAAAA,QACR,CAzBD,CAgCA,MAAO,MAAMU,CAAAA,iBAAiB,CAAG,QAMH,IANI,CAChCC,KAAK,CAAEC,UADyB,CAEhCC,WAAW,CAAEC,gBAFmB,CAGhCC,SAHgC,CAIhCC,QAJgC,CAMJ,MADzBC,IACyB,+EAC5B,KAAMC,CAAAA,MAAM,CAAGnB,WAAW,EAA1B,CACA,KAAMc,CAAAA,WAAW,CAAGC,gBAAgB,GAAKI,MAAM,CAAG,MAAH,CAAY,OAAvB,CAApC,CACA,KAAMP,CAAAA,KAAK,CAAGC,UAAU,GAAKlB,SAAS,GAAK,SAAL,CAAiB,QAA/B,CAAxB,CACA,KAAMyB,CAAAA,KAAK,CAAG,CACZC,eAAe,CAAE9B,GAAG,CAACqB,KAAD,CAAH,CAAWE,WAAX,EAAwBO,eAD7B,CAEZC,KAAK,CAAE/B,GAAG,CAACqB,KAAD,CAAH,CAAWE,WAAX,EAAwBS,SAFnB,CAGZC,SAAS,CAAE,MAHC,CAIZC,KAAK,CAAE,MAJK,CAAd,CAOA,MACE,qBAAC,YAAD,CAAc,QAAd,EAAuB,KAAK,CAAE,CAAEb,KAAF,CAASE,WAAT,CAA9B,EACE,oCAAK,KAAK,CAAEE,SAAS,CAAGI,KAAH,CAAWM,SAAhC,EAA+CR,IAA/C,EACGD,QADH,CADF,CAMH,CAxBM","sourcesContent":["import React from \"react\";\nimport { all } from \"./themes\";\nimport { ThemeableElement, ThemeContext } from \"./utils\";\n\nconst isWindowDefined = typeof window !== \"undefined\";\n\n/** Determine if the current browser is FireFox */\nexport const isFirefox = () => {\n  if (isWindowDefined && window?.navigator?.userAgent) {\n    if (window.navigator.userAgent.toLowerCase().includes(\"firefox\")) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport interface AutoThemeProviderProps extends ThemeableElement<\"div\"> {\n  /** Whether to automatically change the font and background color */\n  autoStyle?: boolean;\n  /** Any React node children */\n  children: React.ReactNode;\n}\n\n/**\n * Determine if the user has a \"prefers-color-scheme\" mode enabled in their browser.\n * This is helpful for detecting if a user prefers dark mode.\n */\nconst useDarkMode = () => {\n  const [darkMode, setDarkMode] = React.useState(\n    isWindowDefined && window\n      ? window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n      : false\n  );\n\n  React.useEffect(() => {\n    if (!isWindowDefined) {\n      return;\n    }\n\n    const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\n\n    /** Run when the user changes this setting. */\n    const changeDarkMode = () => setDarkMode(!darkMode);\n\n    mediaQuery.addListener(changeDarkMode);\n\n    return () => {\n      mediaQuery.removeListener(changeDarkMode);\n    };\n  }, [darkMode]);\n\n  return darkMode;\n};\n\n/**\n * A theme provider that automatically detects a users browser and colorScheme.\n * Themes are set for each component using React Context.\n * It also sets the background color and text color to the correct color.\n */\nexport const AutoThemeProvider = ({\n  theme: propsTheme,\n  colorScheme: propsColorScheme,\n  autoStyle,\n  children,\n  ...html\n}: AutoThemeProviderProps) => {\n  const isDark = useDarkMode();\n  const colorScheme = propsColorScheme || (isDark ? \"dark\" : \"light\");\n  const theme = propsTheme || (isFirefox() ? \"firefox\" : \"chrome\");\n  const style = {\n    backgroundColor: all[theme][colorScheme].backgroundColor,\n    color: all[theme][colorScheme].textColor,\n    minHeight: \"100%\",\n    width: \"100%\",\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, colorScheme }}>\n      <div style={autoStyle ? style : undefined} {...html}>\n        {children}\n      </div>\n    </ThemeContext.Provider>\n  );\n};\n"]}
