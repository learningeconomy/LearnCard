{"version":3,"sources":["index.tsx"],"names":["Tree","props","theme","hover","colorScheme","children","label","className","onUpdate","onSelect","open","html","themeClass","currentTheme","styles","isOpen","setOpen","updateState","value","hasChildren","React","Children","count","updateFocus","newNode","previousNode","isSameNode","focusableNode","querySelector","focus","setAttribute","removeAttribute","getParent","node","role","parent","parentElement","getAttribute","getListElements","tree","Array","from","querySelectorAll","moveBack","group","toggle","previousElementSibling","toggleParent","nodeParent","moveHome","direction","elements","forEach","element","length","moveFocusAdjacent","i","currentNode","handleKeypress","event","isChild","target","key","handleClick","found","handleBlur","currentTarget","contains","document","activeElement","handleFocus","selected","handleButtonFocus","getPaddingStyles","depth","space","paddingLeft","width","hasHover","useContext","TreeContext","showHover","item","focusWhite","e","arrowClass","arrow","map","child","defaultProps"],"mappings":"kcAAA,qDACA,2CACA,kDACA,kEACA,wDAmBO,KAAMA,CAAAA,IAAI,CAAIC,KAAD,EAAsB,CACxC,KAAM,CACJC,KADI,CAEJC,KAFI,CAGJC,WAHI,CAIJC,QAJI,CAKJC,KALI,CAMJC,SANI,CAOJC,QAPI,CAQJC,QARI,CASJC,IATI,EAWFT,KAXJ,CAUKU,IAVL,uCAWIV,KAXJ,8FAaA,KAAM,CAAEW,UAAF,CAAcC,YAAd,EAA+B,qBAAS,CAAEX,KAAF,CAASE,WAAT,CAAT,CAAiCU,aAAjC,CAArC,CAEA,KAAM,CAACC,MAAD,CAASC,OAAT,EAAoB,oBAASN,IAAT,CAA1B,CAEA,qBAAU,IAAM,CACdM,OAAO,CAACN,IAAD,CACR,CAFD,CAEG,CAACA,IAAD,CAFH,EAKA,KAAMO,CAAAA,WAAW,CAAIC,KAAD,EAAoB,CACtCF,OAAO,CAACE,KAAD,CAAP,CACA,GAAIV,QAAJ,CAAcA,QAAQ,CAACU,KAAD,CACvB,CAHD,CAKA,KAAMC,CAAAA,WAAW,CAAGC,eAAMC,QAAN,CAAeC,KAAf,CAAqBjB,QAArB,EAAiC,CAArD,CAGA,KAAMkB,CAAAA,WAAW,CAAG,CAClBC,OADkB,CAElBC,YAFkB,GAGf,CACH,GAAID,OAAO,CAACE,UAAR,CAAmBD,YAAY,EAAI,IAAnC,CAAJ,CAA8C,OAC9C,KAAME,CAAAA,aAAa,CAAGH,OAAO,CAACI,aAAR,CACpB,mBADoB,CAAtB,CAGAD,aAAa,OAAb,EAAAA,aAAa,SAAb,QAAAA,aAAa,CAAEE,KAAf,GACAL,OAAO,CAACM,YAAR,CAAqB,eAArB,CAAsC,MAAtC,EACAL,YAAY,OAAZ,EAAAA,YAAY,SAAZ,QAAAA,YAAY,CAAEM,eAAd,CAA8B,eAA9B,CACD,CAXD,CAkBA,KAAMC,CAAAA,SAAS,CAAG,CAChBC,IADgB,CAEhBC,IAFgB,GAGb,CACH,GAAIC,CAAAA,MAAM,CAAGF,IAAb,CACA,MAAOE,MAAM,EAAIA,MAAM,CAACC,aAAxB,CAAuC,CAErC,GAAID,MAAM,CAACE,YAAP,CAAoB,MAApB,IAAgCH,IAApC,CAA0C,CACxC,MAAOC,CAAAA,MACR,CAGDA,MAAM,CAAGA,MAAM,CAACC,aACjB,CAED,MAAO,KACR,CAhBD,CAmBA,KAAME,CAAAA,eAAe,CAAIL,IAAD,EAAuB,CAC7C,KAAMM,CAAAA,IAAI,CAAGP,SAAS,CAACC,IAAD,CAAO,MAAP,CAAtB,CACA,GAAI,CAACM,IAAL,CAAW,MAAO,EAAP,CACX,MAAOC,CAAAA,KAAK,CAACC,IAAN,CAAWF,IAAI,CAACG,gBAAL,CAAqC,IAArC,CAAX,CACR,CAJD,CAOA,KAAMC,CAAAA,QAAQ,CAAIV,IAAD,EAAuB,CACtC,KAAMW,CAAAA,KAAK,CAAGZ,SAAS,CAACC,IAAD,CAAO,OAAP,CAAvB,CACA,KAAMY,CAAAA,MAAM,CAAGD,KAAH,SAAGA,KAAH,iBAAGA,KAAK,CAAEE,sBAAtB,CAEA,GAAID,MAAM,EAAIA,MAAM,CAACR,YAAP,CAAoB,UAApB,IAAoC,IAAlD,CAAwD,CACtD,KAAMU,CAAAA,YAAY,CAAGF,MAAM,CAACT,aAA5B,CACA,KAAMY,CAAAA,UAAU,CAAGf,IAAI,CAACG,aAAxB,CACAb,WAAW,CAACwB,YAAD,CAAeC,UAAf,CACZ,CACF,CATD,CAYA,KAAMC,CAAAA,QAAQ,CAAG,CAAChB,IAAD,CAAoBiB,SAApB,GAAmD,CAClE,KAAMC,CAAAA,QAAQ,CAAGb,eAAe,CAACL,IAAD,CAAhC,CACAkB,QAAQ,CAACC,OAAT,CAAkBC,OAAD,EAAa,CAC5BA,OAAO,CAACtB,eAAR,CAAwB,eAAxB,CACD,CAFD,EAGA,GAAImB,SAAS,GAAK,OAAd,EAAyBC,QAAQ,CAAC,CAAD,CAArC,CAA0C,CACxC5B,WAAW,CAAC4B,QAAQ,CAAC,CAAD,CAAT,CACZ,CAED,GAAID,SAAS,GAAK,KAAd,EAAuBC,QAAQ,CAACA,QAAQ,CAACG,MAAT,CAAkB,CAAnB,CAAnC,CAA0D,CACxD/B,WAAW,CAAC4B,QAAQ,CAACA,QAAQ,CAACG,MAAT,CAAkB,CAAnB,CAAT,CACZ,CACF,CAZD,CAeA,KAAMC,CAAAA,iBAAiB,CAAG,CAACtB,IAAD,CAAoBiB,SAApB,GAAiD,CACzE,KAAMC,CAAAA,QAAQ,CAAGb,eAAe,CAACL,IAAD,CAAf,EAAyB,EAA1C,CACA,IAAK,GAAIuB,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGL,QAAQ,CAACG,MAA7B,CAAqCE,CAAC,EAAtC,CAA0C,CAExC,KAAMC,CAAAA,WAAW,CAAGN,QAAQ,CAACK,CAAD,CAA5B,CACA,GAAIC,WAAW,CAACpB,YAAZ,CAAyB,eAAzB,IAA8C,MAAlD,CAA0D,CACxD,GAAIa,SAAS,GAAK,IAAd,EAAsBC,QAAQ,CAACK,CAAC,CAAG,CAAL,CAAlC,CAA2C,CAEzCjC,WAAW,CAAC4B,QAAQ,CAACK,CAAC,CAAG,CAAL,CAAT,CAAkBC,WAAlB,CACZ,CAHD,IAGO,IAAIP,SAAS,GAAK,MAAd,EAAwBC,QAAQ,CAACK,CAAC,CAAG,CAAL,CAApC,CAA6C,CAElDjC,WAAW,CAAC4B,QAAQ,CAACK,CAAC,CAAG,CAAL,CAAT,CAAkBC,WAAlB,CACZ,CAED,MACD,CACF,CAGDlC,WAAW,CAAC4B,QAAQ,CAAC,CAAD,CAAT,CACZ,CApBD,CAuBA,KAAMO,CAAAA,cAAc,CAAG,CAACC,KAAD,CAA6BC,OAA7B,GAAmD,CACxE,KAAM3B,CAAAA,IAAI,CAAG0B,KAAK,CAACE,MAAnB,CAEA,GAAIF,KAAK,CAACG,GAAN,GAAc,OAAd,EAAyBH,KAAK,CAACG,GAAN,GAAc,GAA3C,CAAgD,CAC9C7C,WAAW,CAAC,CAACF,MAAF,CACZ,CAED,GAAI4C,KAAK,CAACG,GAAN,GAAc,YAAd,EAA8B/C,MAA9B,EAAwC,CAAC6C,OAA7C,CAAsD,CACpDL,iBAAiB,CAACtB,IAAD,CAAO,MAAP,CAClB,CAFD,IAEO,IAAI0B,KAAK,CAACG,GAAN,GAAc,YAAlB,CAAgC,CACrC7C,WAAW,CAAC,IAAD,CACZ,CAED,GAAI0C,KAAK,CAACG,GAAN,GAAc,WAAd,GAA8B,CAAC/C,MAAD,EAAW6C,OAAzC,CAAJ,CAAuD,CACrDjB,QAAQ,CAACV,IAAD,CACT,CAFD,IAEO,IAAI0B,KAAK,CAACG,GAAN,GAAc,WAAlB,CAA+B,CACpC7C,WAAW,CAAC,KAAD,CACZ,CAED,GAAI0C,KAAK,CAACG,GAAN,GAAc,WAAlB,CAA+B,CAC7BP,iBAAiB,CAACtB,IAAD,CAAO,MAAP,CAClB,CAED,GAAI0B,KAAK,CAACG,GAAN,GAAc,SAAlB,CAA6B,CAC3BP,iBAAiB,CAACtB,IAAD,CAAO,IAAP,CAClB,CAED,GAAI0B,KAAK,CAACG,GAAN,GAAc,MAAlB,CAA0B,CACxBb,QAAQ,CAAChB,IAAD,CAAO,OAAP,CACT,CAED,GAAI0B,KAAK,CAACG,GAAN,GAAc,KAAlB,CAAyB,CACvBb,QAAQ,CAAChB,IAAD,CAAO,KAAP,CACT,CACF,CAlCD,CAqCA,KAAM8B,CAAAA,WAAW,CAAG,CAACJ,KAAD,CAA0BC,OAA1B,GAAgD,CAClE,KAAM3B,CAAAA,IAAI,CAAG0B,KAAK,CAACE,MAAnB,CACA,KAAM1B,CAAAA,MAAM,CAAGH,SAAS,CAACC,IAAD,CAAO,UAAP,CAAxB,CAGA,KAAMkB,CAAAA,QAAQ,CAAGb,eAAe,CAACL,IAAD,CAAf,EAAyB,EAA1C,CACA,GAAI+B,CAAAA,KAAK,CAAG,KAAZ,CACA,IAAK,GAAIR,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGL,QAAQ,CAACG,MAA7B,CAAqCE,CAAC,EAAtC,CAA0C,CAExC,KAAMC,CAAAA,WAAW,CAAGN,QAAQ,CAACK,CAAD,CAA5B,CACA,GAAIC,WAAW,CAACpB,YAAZ,CAAyB,eAAzB,IAA8C,MAAlD,CAA0D,CAExD,GAAIF,MAAJ,CAAY,CACV6B,KAAK,CAAG,IAAR,CACAzC,WAAW,CAACY,MAAD,CAASsB,WAAT,CACZ,CAED,KACD,CACF,CAGD,GAAI,CAACO,KAAD,EAAU7B,MAAd,CAAsB,CACpBZ,WAAW,CAACY,MAAD,CACZ,CAGD,GAAI,CAACyB,OAAL,CAAc,CACZ3C,WAAW,CAAC,CAACF,MAAF,CACZ,CACF,CA9BD,CAiCA,KAAMkD,CAAAA,UAAU,CAAIN,KAAD,EAA6B,CAC9C,KAAM1B,CAAAA,IAAI,CAAG0B,KAAK,CAACO,aAAnB,CACA,GACE,CAACjC,IAAI,CAACkC,QAAL,CAAcC,QAAQ,CAACC,aAAvB,CAAD,EACApC,IAAI,CAACI,YAAL,CAAkB,MAAlB,IAA8B,MAFhC,CAGE,CACAJ,IAAI,CAACH,YAAL,CAAkB,UAAlB,CAA8B,GAA9B,CACD,CACF,CARD,CAWA,KAAMwC,CAAAA,WAAW,CAAIX,KAAD,EAA6B,CAC/C,KAAM1B,CAAAA,IAAI,CAAG0B,KAAK,CAACE,MAAnB,CACA,GAAI5B,IAAI,CAACI,YAAL,CAAkB,MAAlB,IAA8B,MAAlC,CAA0C,CACxC,KAAMkC,CAAAA,QAAQ,CAAGtC,IAAI,CAACL,aAAL,CACf,0BADe,CAAjB,CAIA,GAAI2C,QAAJ,CAAc,CAEZhD,WAAW,CAACgD,QAAD,CACZ,CAHD,IAGO,CAELhB,iBAAiB,CAACtB,IAAD,CAAsB,MAAtB,CAClB,CAGDA,IAAI,CAACH,YAAL,CAAkB,UAAlB,CAA8B,IAA9B,CACD,CACF,CAlBD,CAqBA,KAAM0C,CAAAA,iBAAiB,CAAG,IAAM,CAC9B/D,QAAQ,OAAR,EAAAA,QAAQ,SAAR,QAAAA,QAAQ,EACT,CAFD,CAKA,KAAMgE,CAAAA,gBAAgB,CAAIC,KAAD,EAAmB,CAC1C,KAAMC,CAAAA,KAAK,CAAGD,KAAK,CAAG,GAAR,CAAc,GAA5B,CACA,MAAO,CACLE,WAAW,CAAG,GAAED,KAAM,IADjB,CAELE,KAAK,CAAG,eAAcF,KAAM,KAFvB,CAIR,CAND,CAUA,KAAM,CAAEf,OAAF,CAAWc,KAAX,CAAkBI,QAAlB,EAA+B1D,eAAM2D,UAAN,CAAiBC,oBAAjB,CAArC,CACA,KAAMC,CAAAA,SAAS,CAAGH,QAAQ,CAAG3E,KAAH,CAAW,KAArC,CAKA,GAAI,CAACyD,OAAL,CAAc,CACZ,MACE,0DACE,IAAI,CAAC,MADP,CAEE,QAAQ,CAAE,CAFZ,CAGE,SAAS,CAAE,kBAAU9C,cAAOyB,IAAjB,CAAuBzB,cAAO8B,KAA9B,CAAqChC,UAArC,CAAiDL,SAAjD,CAHb,CAIE,OAAO,CAAE+D,WAJX,CAKE,MAAM,CAAEL,UALV,EAMMtD,IANN,EAQE,6BAAC,oBAAD,CAAa,QAAb,EACE,KAAK,CAAE,CAAEiD,OAAO,CAAE,IAAX,CAAiBc,KAAK,CAAE,CAAxB,CAA2BI,QAAQ,CAAEG,SAArC,CADT,EAGE,6BAAC,IAAD,CAAUhF,KAAV,CAHF,CARF,CAeH,CAGD,GAAI,CAACkB,WAAL,CAAkB,CAChB,MACE,0DAAI,IAAI,CAAC,UAAT,CAAoB,SAAS,CAAEL,cAAOoE,IAAtC,EAAiDvE,IAAjD,EACE,oCACE,IAAI,CAAC,QADP,CAEE,SAAS,CAAE,kBAAUG,cAAOR,KAAjB,CAAwB,CACjC,CAACQ,cAAOX,KAAR,EAAgB8E,SADiB,CAEjC,CAACnE,cAAOqE,UAAR,EAAqBtE,YAAY,GAAK,SAFL,CAAxB,CAFb,CAME,QAAQ,CAAE,CAAC,CANb,CAOE,KAAK,CAAE4D,gBAAgB,CAACC,KAAD,CAPzB,CAQE,SAAS,CAAGU,CAAD,EAAO,CAChB1B,cAAc,CAAC0B,CAAD,CAAIxB,OAAJ,CACf,CAVH,CAWE,OAAO,CAAGwB,CAAD,EAAOrB,WAAW,CAACqB,CAAD,CAAI,IAAJ,CAX7B,CAYE,OAAO,CAAEZ,iBAZX,EAcE,yCAAOlE,KAAP,CAdF,CADF,CAmBH,CAGD,KAAM+E,CAAAA,UAAU,CAAG,kBAAUvE,cAAOwE,KAAjB,CAAwB,CAAE,CAACxE,cAAOJ,IAAR,EAAeK,MAAjB,CAAxB,CAAnB,CACA,MACE,oCAAI,IAAI,CAAC,UAAT,CAAoB,gBAAeA,MAAnC,CAA2C,SAAS,CAAED,cAAOoE,IAA7D,EACE,oCACE,IAAI,CAAC,QADP,CAEE,QAAQ,CAAE,CAAC,CAFb,CAGE,SAAS,CAAE,kBAAUpE,cAAOR,KAAjB,CAAwB,CACjC,CAACQ,cAAOX,KAAR,EAAgB8E,SADiB,CAEjC,CAACnE,cAAOqE,UAAR,EAAqBtE,YAAY,GAAK,SAFL,CAAxB,CAHb,CAOE,KAAK,CAAE4D,gBAAgB,CAACC,KAAD,CAPzB,CAQE,OAAO,CAAGU,CAAD,EAAOrB,WAAW,CAACqB,CAAD,CAR7B,CASE,SAAS,CAAGA,CAAD,EAAO1B,cAAc,CAAC0B,CAAD,CATlC,CAUE,OAAO,CAAEZ,iBAVX,EAYE,yCACE,qCAAM,kBAAN,CAAkB,SAAS,CAAEa,UAA7B,EADF,CAEE,yCAAO/E,KAAP,CAFF,CAZF,CADF,CAkBE,yDAAI,IAAI,CAAC,OAAT,CAAiB,SAAS,CAAE,kBAAUC,SAAV,CAAqBO,cAAO8B,KAA5B,CAA5B,EAAoEjC,IAApE,EACGI,MAAM,EACLK,eAAMC,QAAN,CAAekE,GAAf,CAAmBlF,QAAnB,CAA8BmF,KAAD,EAAW,CACtC,MACE,8BAAC,oBAAD,CAAa,QAAb,EACE,KAAK,CAAE,CAAE5B,OAAO,CAAE,IAAX,CAAiBc,KAAK,CAAEA,KAAK,CAAG,CAAhC,CAAmCI,QAAQ,CAAEG,SAA7C,CADT,EAGGO,KAHH,CAMH,CARD,CAFJ,CAlBF,CAgCH,CAtUM,C,kBAwUPxF,IAAI,CAACyF,YAAL,CAAoB,CAClB/E,IAAI,CAAE,KADY,CAElBP,KAAK,CAAE,IAFW,CAApB","sourcesContent":["import React, { ReactNode, useState, useEffect } from \"react\";\nimport { ThemeableElement, useTheme } from \"@devtools-ds/themes\";\nimport makeClass from \"clsx\";\nimport TreeContext from \"./TreeContext\";\nimport styles from \"./Tree.css\";\n\nexport interface TreeProps extends ThemeableElement<\"ul\"> {\n  /** The label for this node */\n  label: string | ReactNode;\n  /** Whether this node is open */\n  open: boolean;\n  /** Whether to add hover styles to children */\n  hover: boolean;\n  /** Send state updates so parent can track them */\n  onUpdate?: (value: boolean) => void;\n  /**\n   * Called when the given node is selected/focused\n   * For nodes w/ children, this is equivalent to them updating their state\n   */\n  onSelect?: () => void;\n}\n\n/** A keyboard accessible expanding tree view. */\nexport const Tree = (props: TreeProps) => {\n  const {\n    theme,\n    hover,\n    colorScheme,\n    children,\n    label,\n    className,\n    onUpdate,\n    onSelect,\n    open,\n    ...html\n  } = props;\n\n  const { themeClass, currentTheme } = useTheme({ theme, colorScheme }, styles);\n\n  const [isOpen, setOpen] = useState(open);\n  // For some reason the useState above default doesn't work, so useEffect is needed\n  useEffect(() => {\n    setOpen(open);\n  }, [open]);\n\n  /** Update state and call callback */\n  const updateState = (value: boolean) => {\n    setOpen(value);\n    if (onUpdate) onUpdate(value);\n  };\n\n  const hasChildren = React.Children.count(children) > 0;\n\n  /** Set focus and aria-selected onto a new <li>, unselect old if provided */\n  const updateFocus = (\n    newNode: HTMLLIElement,\n    previousNode?: HTMLLIElement\n  ) => {\n    if (newNode.isSameNode(previousNode || null)) return;\n    const focusableNode = newNode.querySelector<HTMLLIElement>(\n      '[tabindex=\"-1\"]'\n    );\n    focusableNode?.focus();\n    newNode.setAttribute(\"aria-selected\", \"true\");\n    previousNode?.removeAttribute(\"aria-selected\");\n  };\n\n  /**\n   * Find a parent DOM node with a given role.\n   *\n   * @param node - Current HTMLElement\n   */\n  const getParent = (\n    node: HTMLElement,\n    role: \"tree\" | \"group\" | \"treeitem\"\n  ) => {\n    let parent = node;\n    while (parent && parent.parentElement) {\n      // Find the top of the tree\n      if (parent.getAttribute(\"role\") === role) {\n        return parent;\n      }\n\n      // Move up the tree after, in case the node provided is the tree\n      parent = parent.parentElement;\n    }\n\n    return null;\n  };\n\n  /** Get all list elements for the current tree. */\n  const getListElements = (node: HTMLElement) => {\n    const tree = getParent(node, \"tree\");\n    if (!tree) return [];\n    return Array.from(tree.querySelectorAll<HTMLLIElement>(\"li\"));\n  };\n\n  /** Move focus up to the tree node above */\n  const moveBack = (node: HTMLElement) => {\n    const group = getParent(node, \"group\");\n    const toggle = group?.previousElementSibling;\n\n    if (toggle && toggle.getAttribute(\"tabindex\") === \"-1\") {\n      const toggleParent = toggle.parentElement as HTMLLIElement;\n      const nodeParent = node.parentElement as HTMLLIElement;\n      updateFocus(toggleParent, nodeParent);\n    }\n  };\n\n  /** Move the focus to the start or end of the tree */\n  const moveHome = (node: HTMLElement, direction: \"start\" | \"end\") => {\n    const elements = getListElements(node);\n    elements.forEach((element) => {\n      element.removeAttribute(\"aria-selected\");\n    });\n    if (direction === \"start\" && elements[0]) {\n      updateFocus(elements[0]);\n    }\n\n    if (direction === \"end\" && elements[elements.length - 1]) {\n      updateFocus(elements[elements.length - 1]);\n    }\n  };\n\n  /** Move focus up or down a level from the provided Element */\n  const moveFocusAdjacent = (node: HTMLElement, direction: \"up\" | \"down\") => {\n    const elements = getListElements(node) || [];\n    for (let i = 0; i < elements.length; i++) {\n      // Go through each <li> and look for the currently selected node\n      const currentNode = elements[i];\n      if (currentNode.getAttribute(\"aria-selected\") === \"true\") {\n        if (direction === \"up\" && elements[i - 1]) {\n          // Move focus to the <li> above\n          updateFocus(elements[i - 1], currentNode);\n        } else if (direction === \"down\" && elements[i + 1]) {\n          // Move focus to the <li> below\n          updateFocus(elements[i + 1], currentNode);\n        }\n\n        return;\n      }\n    }\n\n    // Select first node if one isn't currently selected\n    updateFocus(elements[0]);\n  };\n\n  /** Handle all keyboard events from tree nodes */\n  const handleKeypress = (event: React.KeyboardEvent, isChild?: boolean) => {\n    const node = event.target as HTMLElement;\n    // Handle open/close toggle\n    if (event.key === \"Enter\" || event.key === \" \") {\n      updateState(!isOpen);\n    }\n\n    if (event.key === \"ArrowRight\" && isOpen && !isChild) {\n      moveFocusAdjacent(node, \"down\");\n    } else if (event.key === \"ArrowRight\") {\n      updateState(true);\n    }\n\n    if (event.key === \"ArrowLeft\" && (!isOpen || isChild)) {\n      moveBack(node);\n    } else if (event.key === \"ArrowLeft\") {\n      updateState(false);\n    }\n\n    if (event.key === \"ArrowDown\") {\n      moveFocusAdjacent(node, \"down\");\n    }\n\n    if (event.key === \"ArrowUp\") {\n      moveFocusAdjacent(node, \"up\");\n    }\n\n    if (event.key === \"Home\") {\n      moveHome(node, \"start\");\n    }\n\n    if (event.key === \"End\") {\n      moveHome(node, \"end\");\n    }\n  };\n\n  /** Set selected and focus states on click events */\n  const handleClick = (event: React.MouseEvent, isChild?: boolean) => {\n    const node = event.target as HTMLElement;\n    const parent = getParent(node, \"treeitem\") as HTMLLIElement;\n\n    // We need to check if another node was selected and move it\n    const elements = getListElements(node) || [];\n    let found = false;\n    for (let i = 0; i < elements.length; i++) {\n      // Go through each <li> and look for the currently selected node\n      const currentNode = elements[i];\n      if (currentNode.getAttribute(\"aria-selected\") === \"true\") {\n        // Move selected to clicked LI\n        if (parent) {\n          found = true;\n          updateFocus(parent, currentNode);\n        }\n\n        break;\n      }\n    }\n\n    // If we didn't find an existing one select the new one\n    if (!found && parent) {\n      updateFocus(parent);\n    }\n\n    // Toggle open state if needed\n    if (!isChild) {\n      updateState(!isOpen);\n    }\n  };\n\n  /** When the tree is blurred make it focusable again */\n  const handleBlur = (event: React.FocusEvent) => {\n    const node = event.currentTarget;\n    if (\n      !node.contains(document.activeElement) &&\n      node.getAttribute(\"role\") === \"tree\"\n    ) {\n      node.setAttribute(\"tabindex\", \"0\");\n    }\n  };\n\n  /** Move focus back to the selected tree node, or focus the first one */\n  const handleFocus = (event: React.FocusEvent) => {\n    const node = event.target;\n    if (node.getAttribute(\"role\") === \"tree\") {\n      const selected = node.querySelector<HTMLLIElement>(\n        '[aria-selected=\"true\"]'\n      );\n\n      if (selected) {\n        // Move to previously selected node\n        updateFocus(selected);\n      } else {\n        // Focus the first node\n        moveFocusAdjacent(node as HTMLElement, \"down\");\n      }\n\n      //\n      node.setAttribute(\"tabindex\", \"-1\");\n    }\n  };\n\n  /** Detect when a button has been focused */\n  const handleButtonFocus = () => {\n    onSelect?.();\n  };\n\n  /** Get the styles for padding based on depth */\n  const getPaddingStyles = (depth: number) => {\n    const space = depth * 0.9 + 0.3;\n    return {\n      paddingLeft: `${space}em`,\n      width: `calc(100% - ${space}em)`,\n    };\n  };\n\n  // The first node needs role \"tree\", while sub-trees need role \"group\"\n  // This is tracked through context to be flexible to elements in the subtree.\n  const { isChild, depth, hasHover } = React.useContext(TreeContext);\n  const showHover = hasHover ? hover : false;\n\n  // Tree root node\n  // Needs to have role tree and one top level UL\n  // https://dequeuniversity.com/library/aria/tabpanels-accordions/sf-tree-view\n  if (!isChild) {\n    return (\n      <ul\n        role=\"tree\"\n        tabIndex={0}\n        className={makeClass(styles.tree, styles.group, themeClass, className)}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n        {...html}\n      >\n        <TreeContext.Provider\n          value={{ isChild: true, depth: 0, hasHover: showHover }}\n        >\n          <Tree {...props} />\n        </TreeContext.Provider>\n      </ul>\n    );\n  }\n\n  // Leaf nodes that don't expand, but still highlight and focus.\n  if (!hasChildren) {\n    return (\n      <li role=\"treeitem\" className={styles.item} {...(html as any)}>\n        <div\n          role=\"button\"\n          className={makeClass(styles.label, {\n            [styles.hover]: showHover,\n            [styles.focusWhite]: currentTheme === \"firefox\",\n          })}\n          tabIndex={-1}\n          style={getPaddingStyles(depth)}\n          onKeyDown={(e) => {\n            handleKeypress(e, isChild);\n          }}\n          onClick={(e) => handleClick(e, true)}\n          onFocus={handleButtonFocus}\n        >\n          <span>{label}</span>\n        </div>\n      </li>\n    );\n  }\n\n  // Child tree node with children\n  const arrowClass = makeClass(styles.arrow, { [styles.open]: isOpen });\n  return (\n    <li role=\"treeitem\" aria-expanded={isOpen} className={styles.item}>\n      <div\n        role=\"button\"\n        tabIndex={-1}\n        className={makeClass(styles.label, {\n          [styles.hover]: showHover,\n          [styles.focusWhite]: currentTheme === \"firefox\",\n        })}\n        style={getPaddingStyles(depth)}\n        onClick={(e) => handleClick(e)}\n        onKeyDown={(e) => handleKeypress(e)}\n        onFocus={handleButtonFocus}\n      >\n        <span>\n          <span aria-hidden className={arrowClass} />\n          <span>{label}</span>\n        </span>\n      </div>\n      <ul role=\"group\" className={makeClass(className, styles.group)} {...html}>\n        {isOpen &&\n          React.Children.map(children, (child) => {\n            return (\n              <TreeContext.Provider\n                value={{ isChild: true, depth: depth + 1, hasHover: showHover }}\n              >\n                {child}\n              </TreeContext.Provider>\n            );\n          })}\n      </ul>\n    </li>\n  );\n};\n\nTree.defaultProps = {\n  open: false,\n  hover: true,\n};\n"]}
