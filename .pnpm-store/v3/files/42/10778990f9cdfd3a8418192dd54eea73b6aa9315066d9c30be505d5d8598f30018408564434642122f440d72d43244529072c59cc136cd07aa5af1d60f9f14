import * as domTestingLibrary from '@testing-library/dom';
export declare const buildQueries: typeof domTestingLibrary.buildQueries, configure: typeof domTestingLibrary.configure, createEvent: domTestingLibrary.CreateObject & domTestingLibrary.CreateFunction, findAllByAltText: typeof domTestingLibrary.findAllByAltText, findAllByDisplayValue: typeof domTestingLibrary.findAllByDisplayValue, findAllByLabelText: typeof domTestingLibrary.findAllByLabelText, findAllByPlaceholderText: typeof domTestingLibrary.findAllByPlaceholderText, findAllByRole: typeof domTestingLibrary.findAllByRole, findAllByTestId: typeof domTestingLibrary.findAllByTestId, findAllByText: typeof domTestingLibrary.findAllByText, findAllByTitle: typeof domTestingLibrary.findAllByTitle, findByAltText: typeof domTestingLibrary.findByAltText, findByDisplayValue: typeof domTestingLibrary.findByDisplayValue, findByLabelText: typeof domTestingLibrary.findByLabelText, findByPlaceholderText: typeof domTestingLibrary.findByPlaceholderText, findByRole: typeof domTestingLibrary.findByRole, findByTestId: typeof domTestingLibrary.findByTestId, findByText: typeof domTestingLibrary.findByText, findByTitle: typeof domTestingLibrary.findByTitle, fireEvent: domTestingLibrary.FireFunction & domTestingLibrary.FireObject, getAllByAltText: typeof domTestingLibrary.getAllByAltText, getAllByDisplayValue: typeof domTestingLibrary.getAllByDisplayValue, getAllByLabelText: typeof domTestingLibrary.getAllByLabelText, getAllByPlaceholderText: typeof domTestingLibrary.getAllByPlaceholderText, getAllByRole: typeof domTestingLibrary.getAllByRole, getAllByTestId: typeof domTestingLibrary.getAllByTestId, getAllByText: typeof domTestingLibrary.getAllByText, getAllByTitle: typeof domTestingLibrary.getAllByTitle, getByAltText: typeof domTestingLibrary.getByAltText, getByDisplayValue: typeof domTestingLibrary.getByDisplayValue, getByLabelText: typeof domTestingLibrary.getByLabelText, getByPlaceholderText: typeof domTestingLibrary.getByPlaceholderText, getByRole: typeof domTestingLibrary.getByRole, getByTestId: typeof domTestingLibrary.getByTestId, getByText: typeof domTestingLibrary.getByText, getByTitle: typeof domTestingLibrary.getByTitle, getConfig: typeof domTestingLibrary.getConfig, getDefaultNormalizer: typeof domTestingLibrary.getDefaultNormalizer, getElementError: typeof domTestingLibrary.getElementError, getNodeText: typeof domTestingLibrary.getNodeText, getQueriesForElement: typeof domTestingLibrary.getQueriesForElement, getRoles: typeof domTestingLibrary.getRoles, getSuggestedQuery: typeof domTestingLibrary.getSuggestedQuery, isInaccessible: typeof domTestingLibrary.isInaccessible, logDOM: typeof domTestingLibrary.logDOM, logRoles: typeof domTestingLibrary.logRoles, prettyDOM: typeof domTestingLibrary.prettyDOM, queries: typeof domTestingLibrary.queries, queryAllByAltText: typeof domTestingLibrary.queryAllByAltText, queryAllByAttribute: domTestingLibrary.AllByAttribute, queryAllByDisplayValue: typeof domTestingLibrary.queryAllByDisplayValue, queryAllByLabelText: typeof domTestingLibrary.queryAllByLabelText, queryAllByPlaceholderText: typeof domTestingLibrary.queryAllByPlaceholderText, queryAllByRole: typeof domTestingLibrary.queryAllByRole, queryAllByTestId: typeof domTestingLibrary.queryAllByTestId, queryAllByText: typeof domTestingLibrary.queryAllByText, queryAllByTitle: typeof domTestingLibrary.queryAllByTitle, queryByAltText: typeof domTestingLibrary.queryByAltText, queryByAttribute: domTestingLibrary.QueryByAttribute, queryByDisplayValue: typeof domTestingLibrary.queryByDisplayValue, queryByLabelText: typeof domTestingLibrary.queryByLabelText, queryByPlaceholderText: typeof domTestingLibrary.queryByPlaceholderText, queryByRole: typeof domTestingLibrary.queryByRole, queryByTestId: typeof domTestingLibrary.queryByTestId, queryByText: typeof domTestingLibrary.queryByText, queryByTitle: typeof domTestingLibrary.queryByTitle, queryHelpers: typeof domTestingLibrary.queryHelpers, screen: domTestingLibrary.Screen<typeof domTestingLibrary.queries>, waitFor: typeof domTestingLibrary.waitFor, waitForElementToBeRemoved: typeof domTestingLibrary.waitForElementToBeRemoved, within: typeof domTestingLibrary.getQueriesForElement, prettyFormat: typeof domTestingLibrary.prettyFormat;
export declare const userEvent: {
    click: typeof import("@testing-library/user-event/dist/click").click;
    dblClick: typeof import("@testing-library/user-event/dist/click").dblClick;
    type: typeof import("@testing-library/user-event/dist/type").type;
    clear: typeof import("@testing-library/user-event/dist/clear").clear;
    tab: typeof import("@testing-library/user-event/dist/tab").tab;
    hover: typeof import("@testing-library/user-event/dist/hover").hover;
    unhover: typeof import("@testing-library/user-event/dist/hover").unhover;
    upload: typeof import("@testing-library/user-event/dist/upload").upload;
    selectOptions: (args_0: Element, args_1: string | string[] | HTMLElement | HTMLElement[], args_2?: MouseEventInit, args_3?: import("@testing-library/user-event/dist/utils").PointerOptions) => void;
    deselectOptions: (args_0: Element, args_1: string | string[] | HTMLElement | HTMLElement[], args_2?: MouseEventInit, args_3?: import("@testing-library/user-event/dist/utils").PointerOptions) => void;
    paste: typeof import("@testing-library/user-event/dist/paste").paste;
    keyboard: typeof import("@testing-library/user-event/dist/keyboard").keyboard;
};
