{"version":3,"file":"MeterProvider.js","sourceRoot":"","sources":["../../src/MeterProvider.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport * as metrics from '@opentelemetry/api-metrics';\nimport { Resource } from '@opentelemetry/resources';\nimport { MetricReader } from './export/MetricReader';\nimport { MeterProviderSharedState } from './state/MeterProviderSharedState';\nimport { InstrumentSelector } from './view/InstrumentSelector';\nimport { MeterSelector } from './view/MeterSelector';\nimport { View } from './view/View';\nimport { MetricCollector } from './state/MetricCollector';\nimport { Aggregation } from './view/Aggregation';\nimport { FilteringAttributesProcessor } from './view/AttributesProcessor';\nimport { InstrumentType } from './InstrumentDescriptor';\nimport { PatternPredicate } from './view/Predicate';\nimport { ForceFlushOptions, ShutdownOptions } from './types';\n\n/**\n * MeterProviderOptions provides an interface for configuring a MeterProvider.\n */\nexport interface MeterProviderOptions {\n  /** Resource associated with metric telemetry  */\n  resource?: Resource;\n}\n\nexport type ViewOptions = {\n  /**\n   *  If not provided, the Instrument name will be used by default. This will be used as the name of the metrics stream.\n   */\n  name?: string,\n  /**\n   * If not provided, the Instrument description will be used by default.\n   */\n  description?: string,\n  /**\n   * If provided, the attributes that are not in the list will be ignored.\n   * If not provided, all the attribute keys will be used by default.\n   */\n  attributeKeys?: string[],\n  /**\n   * The {@link Aggregation} aggregation to be used.\n   */\n  aggregation?: Aggregation,\n\n  // TODO: Add ExemplarReservoir\n};\n\nexport type SelectorOptions = {\n  instrument?: {\n    /**\n     * The type of the Instrument(s).\n     */\n    type?: InstrumentType,\n    /**\n     * Name of the Instrument(s) with wildcard support.\n     */\n    name?: string,\n  }\n  meter?: {\n    /**\n     * The name of the Meter.\n     */\n    name?: string;\n    /**\n     * The version of the Meter.\n     */\n    version?: string;\n    /**\n     * The schema URL of the Meter.\n     */\n    schemaUrl?: string;\n  }\n};\n\nfunction isViewOptionsEmpty(options: ViewOptions): boolean {\n  return (options.name == null &&\n    options.aggregation == null &&\n    options.attributeKeys == null &&\n    options.description == null);\n}\n\n/**\n * This class implements the {@link metrics.MeterProvider} interface.\n */\nexport class MeterProvider implements metrics.MeterProvider {\n  private _sharedState: MeterProviderSharedState;\n  private _shutdown = false;\n\n  constructor(options?: MeterProviderOptions) {\n    this._sharedState = new MeterProviderSharedState(options?.resource ?? Resource.empty());\n  }\n\n  /**\n   * Get a meter with the configuration of the MeterProvider.\n   */\n  getMeter(name: string, version = '', options: metrics.MeterOptions = {}): metrics.Meter {\n    // https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/sdk.md#meter-creation\n    if (this._shutdown) {\n      api.diag.warn('A shutdown MeterProvider cannot provide a Meter');\n      return metrics.NOOP_METER;\n    }\n\n    return this._sharedState\n      .getMeterSharedState({ name, version, schemaUrl: options.schemaUrl })\n      .meter;\n  }\n\n  /**\n   * Register a {@link MetricReader} to the meter provider. After the\n   * registration, the MetricReader can start metrics collection.\n   *\n   * @param metricReader the metric reader to be registered.\n   */\n  addMetricReader(metricReader: MetricReader) {\n    const collector = new MetricCollector(this._sharedState, metricReader);\n    metricReader.setMetricProducer(collector);\n    this._sharedState.metricCollectors.push(collector);\n  }\n\n  addView(options: ViewOptions, selectorOptions?: SelectorOptions) {\n    if (isViewOptionsEmpty(options)) {\n      throw new Error('Cannot create view with no view arguments supplied');\n    }\n\n    // the SDK SHOULD NOT allow Views with a specified name to be declared with instrument selectors that\n    // may select more than one instrument (e.g. wild card instrument name) in the same Meter.\n    if (options.name != null &&\n      (selectorOptions?.instrument?.name == null ||\n        PatternPredicate.hasWildcard(selectorOptions.instrument.name))) {\n      throw new Error('Views with a specified name must be declared with an instrument selector that selects at most one instrument per meter.');\n    }\n\n    // Create AttributesProcessor if attributeKeys are defined set.\n    let attributesProcessor = undefined;\n    if (options.attributeKeys != null) {\n      attributesProcessor = new FilteringAttributesProcessor(options.attributeKeys);\n    }\n\n    const view = new View({\n      name: options.name,\n      description: options.description,\n      aggregation: options.aggregation,\n      attributesProcessor: attributesProcessor\n    });\n    const instrument = new InstrumentSelector(selectorOptions?.instrument);\n    const meter = new MeterSelector(selectorOptions?.meter);\n\n    this._sharedState.viewRegistry.addView(view, instrument, meter);\n  }\n\n  /**\n   * Flush all buffered data and shut down the MeterProvider and all registered\n   * MetricReaders.\n   *\n   * Returns a promise which is resolved when all flushes are complete.\n   */\n  async shutdown(options?: ShutdownOptions): Promise<void> {\n    if (this._shutdown) {\n      api.diag.warn('shutdown may only be called once per MeterProvider');\n      return;\n    }\n\n    this._shutdown = true;\n\n    await Promise.all(this._sharedState.metricCollectors.map(collector => {\n      return collector.shutdown(options);\n    }));\n  }\n\n  /**\n   * Notifies all registered MetricReaders to flush any buffered data.\n   *\n   * Returns a promise which is resolved when all flushes are complete.\n   */\n  async forceFlush(options?: ForceFlushOptions): Promise<void> {\n    // do not flush after shutdown\n    if (this._shutdown) {\n      api.diag.warn('invalid attempt to force flush after MeterProvider shutdown');\n      return;\n    }\n\n    await Promise.all(this._sharedState.metricCollectors.map(collector => {\n      return collector.forceFlush(options);\n    }));\n  }\n}\n"]}