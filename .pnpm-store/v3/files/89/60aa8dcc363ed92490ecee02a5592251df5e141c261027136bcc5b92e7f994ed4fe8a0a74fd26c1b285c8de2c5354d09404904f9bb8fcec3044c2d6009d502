{"version":3,"file":"config.js","sourceRoot":"","sources":["../../src/helpers/config.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @file\n *\n * This file has all helperfunctions related to configuration.\n */\n\n/** */\nimport { existsSync, lstatSync } from 'fs';\nimport { Dir, Json } from 'mylas';\nimport { basename, dirname, isAbsolute, join, resolve } from 'path';\nimport {\n  IConfig,\n  IOutput,\n  IProjectConfig,\n  IRawTSConfig,\n  ITSConfig,\n  ReplaceTscAliasPathsOptions\n} from '../interfaces';\nimport { Output, PathCache, TrieNode } from '../utils';\nimport { importReplacers } from './replacers';\nimport normalizePath = require('normalize-path');\n\n/**\n * prepareConfig prepares a IConfig object for tsc-alias to be used.\n * @param {ReplaceTscAliasPathsOptions} options options that are used to prepare a config object.\n * @returns {Promise<IConfig>} a promise of a IConfig object.\n */\nexport async function prepareConfig(\n  options: ReplaceTscAliasPathsOptions\n): Promise<IConfig> {\n  const output = options.output ?? new Output(options.verbose);\n\n  const configFile = !options.configFile\n    ? resolve(process.cwd(), 'tsconfig.json')\n    : !isAbsolute(options.configFile)\n    ? resolve(process.cwd(), options.configFile)\n    : options.configFile;\n\n  output.assert(existsSync(configFile), `Invalid file path => ${configFile}`);\n\n  const {\n    baseUrl = './',\n    outDir,\n    declarationDir,\n    paths,\n    replacers,\n    resolveFullPaths,\n    verbose\n  } = loadConfig(configFile, output);\n\n  output.verbose = verbose;\n\n  if (options.resolveFullPaths || resolveFullPaths) {\n    options.resolveFullPaths = true;\n  }\n\n  const _outDir = options.outDir ?? outDir;\n  if (declarationDir && _outDir !== declarationDir) {\n    options.declarationDir ??= declarationDir;\n  }\n\n  output.assert(_outDir, 'compilerOptions.outDir is not set');\n\n  const configDir: string = normalizePath(dirname(configFile));\n\n  // config with project details and paths\n  const projectConfig: IProjectConfig = {\n    configFile: configFile,\n    baseUrl: baseUrl,\n    outDir: _outDir,\n    configDir: configDir,\n    outPath: _outDir,\n    confDirParentFolderName: basename(configDir),\n    hasExtraModule: false,\n    configDirInOutPath: null,\n    relConfDirPathInOutPath: null,\n    pathCache: new PathCache(!options.watch)\n  };\n\n  const config: IConfig = {\n    ...projectConfig,\n    output: output,\n    aliasTrie:\n      options.aliasTrie ?? TrieNode.buildAliasTrie(projectConfig, paths),\n    replacers: []\n  };\n\n  // Import replacers.\n  await importReplacers(config, replacers, options.replacers);\n  return config;\n}\n\n/**\n * loadConfig loads a config file from fs.\n * @param {string} file file path to the config file that will be loaded.\n * @param {IOutput} output the output instance to log error to.\n * @returns {ITSConfig} a ITSConfig object\n */\nexport const loadConfig = (file: string, output: IOutput): ITSConfig => {\n  if (!existsSync(file)) {\n    output.error(`File ${file} not found`, true);\n  }\n  const {\n    extends: ext,\n    compilerOptions: { baseUrl, outDir, declarationDir, paths } = {\n      baseUrl: undefined,\n      outDir: undefined,\n      declarationDir: undefined,\n      paths: undefined\n    },\n    'tsc-alias': TSCAliasConfig\n  } = Json.loadS<IRawTSConfig>(file, true);\n\n  const configDir = dirname(file);\n  const config: ITSConfig = {};\n\n  if (baseUrl) config.baseUrl = baseUrl;\n  if (outDir) {\n    config.outDir = isAbsolute(outDir) ? outDir : join(configDir, outDir);\n  }\n  if (paths) config.paths = paths;\n  if (declarationDir) {\n    config.declarationDir = isAbsolute(declarationDir)\n      ? declarationDir\n      : join(configDir, declarationDir);\n  }\n  if (TSCAliasConfig?.replacers) config.replacers = TSCAliasConfig.replacers;\n  if (TSCAliasConfig?.resolveFullPaths)\n    config.resolveFullPaths = TSCAliasConfig.resolveFullPaths;\n  if (TSCAliasConfig?.verbose) config.verbose = TSCAliasConfig.verbose;\n\n  const replacerFile = config.replacers?.pathReplacer?.file;\n\n  if (replacerFile) {\n    config.replacers.pathReplacer.file = join(configDir, replacerFile);\n  }\n\n  if (ext) {\n    return {\n      ...(ext.startsWith('.')\n        ? loadConfig(\n            join(configDir, ext.endsWith('.json') ? ext : `${ext}.json`),\n            output\n          )\n        : loadConfig(resolveTsConfigExtendsPath(ext, file), output)),\n      ...config\n    };\n  }\n\n  return config;\n};\n\n/**\n * resolveTsConfigExtendsPath resolves the path to the config file that is being inherited.\n * @param {string} ext the value of the extends field in the loaded config file.\n * @param {string} file file path to the config file that was loaded.\n * @returns {string} a file path to the config file that is being inherited.\n */\nexport function resolveTsConfigExtendsPath(ext: string, file: string): string {\n  const tsConfigDir = dirname(file);\n  const node_modules: string[] = Dir.nodeModules({ cwd: tsConfigDir }); // Getting all node_modules directories.\n  const targetPaths = node_modules.map((v) => join(tsConfigDir, v, ext)); // Mapping node_modules to target paths.\n\n  // Recursively checking ancestor directories for tsconfig.\n  for (const targetPath of targetPaths) {\n    if (ext.endsWith('.json')) {\n      // Check if the file exists.\n      if (existsSync(targetPath)) {\n        return targetPath;\n      } else {\n        continue; // Continue checking when ext is a file but not yet found.\n      }\n    }\n    let isDirectory = false;\n    try {\n      const stats = lstatSync(targetPath);\n      isDirectory = stats.isDirectory() || stats.isSymbolicLink();\n    } catch (err) {}\n    if (isDirectory) {\n      return join(targetPath, 'tsconfig.json');\n    } else {\n      // When target is not a file nor directory check with '.json' extension.\n      if (existsSync(`${targetPath}.json`)) {\n        return `${targetPath}.json`;\n      }\n    }\n  }\n}\n"]}