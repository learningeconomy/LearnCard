{"version":3,"file":"ObservableResult.js","sourceRoot":"","sources":["../../src/ObservableResult.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAGH,6CAAmD;AAEnD;;GAEG;AACH,MAAa,gBAAgB;IAA7B;QACE;;WAEG;QACH,WAAM,GAAG,IAAI,0BAAgB,EAAU,CAAC;IAQ1C,CAAC;IANC;;OAEG;IACH,OAAO,CAAC,KAAa,EAAE,aAAuC,EAAE;QAC9D,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;IACrC,CAAC;CACF;AAZD,4CAYC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as metrics from '@opentelemetry/api-metrics';\nimport { AttributeHashMap } from './state/HashMap';\n\n/**\n * The class implements {@link metrics.observableResult} interface.\n */\nexport class ObservableResult implements metrics.ObservableResult {\n  /**\n   * @internal\n   */\n  buffer = new AttributeHashMap<number>();\n\n  /**\n   * Observe a measurement of the value associated with the given attributes.\n   */\n  observe(value: number, attributes: metrics.MetricAttributes = {}): void {\n    this.buffer.set(attributes, value);\n  }\n}\n"]}