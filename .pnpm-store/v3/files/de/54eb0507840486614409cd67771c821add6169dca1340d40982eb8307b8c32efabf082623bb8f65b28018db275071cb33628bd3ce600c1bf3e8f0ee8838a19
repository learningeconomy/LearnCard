{"version":3,"file":"android.js","sourceRoot":"","sources":["../../src/platforms/android.ts"],"names":[],"mappings":";;;;;;AAAA,0DAA6B;AAC7B,wDAA0B;AAC1B,gDAAwB;AAIxB;;GAEG;AACI,KAAK,UAAU,wBAAwB,CAC5C,OAA2B,EAC3B,UAAkB,EAClB,SAAiB;IAEjB,MAAM,oBAAoB,GAAG,MAAM,mCAAmC,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;IAC3F,MAAM,kBAAE,CAAC,UAAU,CAAC,UAAU,EAAE,oBAAoB,CAAC,CAAC;AACxD,CAAC;AAPD,4DAOC;AAEM,KAAK,UAAU,kBAAkB,CACtC,WAAmB,EACnB,QAAyB;IAEzB,8EAA8E;IAE9E,0BAA0B;IAC1B,IAAI,WAAW,KAAK,kCAAkC,EAAE;QACtD,OAAO,IAAI,CAAC;KACb;IAED,MAAM,CAAC,eAAe,CAAC,GAAG,MAAM,mBAAI,CAAC,gBAAgB,EAAE;QACrD,GAAG,EAAE,QAAQ,CAAC,IAAI;QAClB,MAAM,EAAE,CAAC,oBAAoB,CAAC;KAC/B,CAAC,CAAC;IACH,MAAM,SAAS,GAAG,cAAI,CAAC,OAAO,CAAC,cAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC,CAAC;IAE1E,OAAO;QACL,WAAW,EAAE,+BAA+B,CAAC,WAAW,CAAC;QACzD,SAAS;KACV,CAAC;AACJ,CAAC;AArBD,gDAqBC;AAED;;GAEG;AACH,KAAK,UAAU,mCAAmC,CAChD,OAA2B,EAC3B,SAAiB;IAEjB,MAAM,eAAe,GAAG,MAAM,wBAAwB,CAAC,OAAO,CAAC,CAAC;IAEhE,OAAO,WAAW,SAAS;;;;;;;;;EAS3B,eAAe,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE,CAAC,aAAa,YAAY,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;;;;CAI/E,CAAC;AACF,CAAC;AAED,KAAK,UAAU,wBAAwB,CAAC,OAA2B;IACjE,MAAM,OAAO,GAAa,EAAE,CAAC;IAE7B,MAAM,OAAO,CAAC,GAAG,CACf,OAAO,CAAC,GAAG,CAAC,KAAK,EAAC,MAAM,EAAC,EAAE;QACzB,MAAM,KAAK,GAAG,MAAM,mBAAI,CAAC,2BAA2B,EAAE;YACpD,GAAG,EAAE,MAAM,CAAC,SAAS;SACtB,CAAC,CAAC;QAEH,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACxB,MAAM,WAAW,GAAG,MAAM,kBAAE,CAAC,QAAQ,CAAC,cAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,MAAM,CAAC,CAAC;YAEjF,6CAA6C;YAC7C,IACE,CAAC,uEAAuE,CAAC,IAAI,CAAC,WAAW,CAAC,EAC1F;gBACA,SAAS;aACV;YAED,MAAM,gBAAgB,GAAG,WAAW,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;YAEnE,IAAI,gBAAgB,EAAE;gBACpB,MAAM,QAAQ,GAAG,cAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,cAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;gBACzD,OAAO,CAAC,IAAI,CAAC,GAAG,gBAAgB,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE,CAAC,CAAC;aACpD;SACF;IACH,CAAC,CAAC,CACH,CAAC;IACF,OAAO,OAAO,CAAC,IAAI,EAAE,CAAC;AACxB,CAAC;AAED;;;GAGG;AACH,SAAS,+BAA+B,CAAC,WAAmB;IAC1D,OAAO,WAAW,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AAC7D,CAAC","sourcesContent":["import glob from 'fast-glob';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { ModuleDescriptor, PackageRevision } from '../types';\n\n/**\n * Generates Java file that contains all autolinked packages.\n */\nexport async function generatePackageListAsync(\n  modules: ModuleDescriptor[],\n  targetPath: string,\n  namespace: string\n): Promise<void> {\n  const generatedFileContent = await generatePackageListFileContentAsync(modules, namespace);\n  await fs.outputFile(targetPath, generatedFileContent);\n}\n\nexport async function resolveModuleAsync(\n  packageName: string,\n  revision: PackageRevision\n): Promise<ModuleDescriptor | null> {\n  // TODO: Relative source dir should be configurable through the module config.\n\n  // Don't link itself... :D\n  if (packageName === '@unimodules/react-native-adapter') {\n    return null;\n  }\n\n  const [buildGradleFile] = await glob('*/build.gradle', {\n    cwd: revision.path,\n    ignore: ['**/node_modules/**'],\n  });\n  const sourceDir = path.dirname(path.join(revision.path, buildGradleFile));\n\n  return {\n    projectName: convertPackageNameToProjectName(packageName),\n    sourceDir,\n  };\n}\n\n/**\n * Generates the string to put into the generated package list.\n */\nasync function generatePackageListFileContentAsync(\n  modules: ModuleDescriptor[],\n  namespace: string\n): Promise<string> {\n  const packagesClasses = await findAndroidPackagesAsync(modules);\n\n  return `package ${namespace};\n\nimport java.util.Arrays;\nimport java.util.List;\nimport org.unimodules.core.interfaces.Package;\n\npublic class ExpoModulesPackageList {\n  public List<Package> getPackageList() {\n    return Arrays.<Package>asList(\n${packagesClasses.map(packageClass => `      new ${packageClass}()`).join(',\\n')}\n    );\n  }\n}\n`;\n}\n\nasync function findAndroidPackagesAsync(modules: ModuleDescriptor[]): Promise<string[]> {\n  const classes: string[] = [];\n\n  await Promise.all(\n    modules.map(async module => {\n      const files = await glob('src/**/*Package.{java,kt}', {\n        cwd: module.sourceDir,\n      });\n\n      for (const file of files) {\n        const fileContent = await fs.readFile(path.join(module.sourceDir, file), 'utf8');\n\n        // Very naive check to skip non-expo packages\n        if (\n          !/\\bimport\\s+org\\.unimodules\\.core\\.(interfaces\\.Package|BasePackage)\\b/.test(fileContent)\n        ) {\n          continue;\n        }\n\n        const classPathMatches = fileContent.match(/^package ([\\w.]+)\\b/m);\n\n        if (classPathMatches) {\n          const basename = path.basename(file, path.extname(file));\n          classes.push(`${classPathMatches[1]}.${basename}`);\n        }\n      }\n    })\n  );\n  return classes.sort();\n}\n\n/**\n * Converts the package name to Android's project name.\n * Example: `@unimodules/core` â†’ `unimodules-core`\n */\nfunction convertPackageNameToProjectName(projectName: string): string {\n  return projectName.replace(/^@/g, '').replace(/\\W+/g, '-');\n}\n"]}