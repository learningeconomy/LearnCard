{"version":3,"file":"use-immer.module.js","sources":["../src/index.ts"],"sourcesContent":["import produce, { Draft, nothing, freeze } from \"immer\";\nimport { useState, useReducer, useCallback, useMemo, Dispatch } from \"react\";\n\nexport type Reducer<S = any, A = any> = (\n  draftState: Draft<S>,\n  action: A\n) => void | (S extends undefined ? typeof nothing : S);\nexport type DraftFunction<S> = (draft: Draft<S>) => void;\nexport type Updater<S> = (arg: S | DraftFunction<S>) => void;\nexport type ImmerHook<S> = [S, Updater<S>];\nexport function useImmer<S = any>(initialValue: S | (() => S)): ImmerHook<S>;\n\nexport function useImmer(initialValue: any) {\n  const [val, updateValue] = useState(() =>\n    freeze(\n      typeof initialValue === \"function\" ? initialValue() : initialValue,\n      true\n    )\n  );\n  return [\n    val,\n    useCallback((updater) => {\n      if (typeof updater === \"function\") updateValue(produce(updater));\n      else updateValue(freeze(updater));\n    }, []),\n  ];\n}\n\nexport function useImmerReducer<S = any, A = any>(\n  reducer: Reducer<S, A>,\n  initialState: S,\n  initialAction?: (initial: any) => S\n): [S, Dispatch<A>];\nexport function useImmerReducer(\n  reducer: any,\n  initialState: any,\n  initialAction: any\n) {\n  const cachedReducer = useMemo(() => produce(reducer), [reducer]);\n  return useReducer(cachedReducer, initialState as any, initialAction);\n}\n"],"names":["useImmer","initialValue","useState","freeze","updateValue","useCallback","updater","produce","useImmerReducer","reducer","initialState","initialAction","cachedReducer","useMemo","useReducer"],"mappings":"0HAYgBA,EAASC,SACIC,EAAS,kBAClCC,EAC0B,mBAAjBF,EAA8BA,IAAiBA,GACtD,KAHQG,OAMZ,MAAO,MAELC,EAAY,SAACC,GACwBF,EAAZ,mBAAZE,EAAoCC,EAAQD,GACtCH,EAAOG,KACvB,cASSE,EACdC,EACAC,EACAC,GAEA,IAAMC,EAAgBC,EAAQ,kBAAMN,EAAQE,IAAU,CAACA,IACvD,OAAOK,EAAWF,EAAeF,EAAqBC"}