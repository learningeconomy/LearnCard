{"version":3,"file":"View.js","sourceRoot":"","sources":["../../../src/view/View.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAEH,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAC5C,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAuB5D;;;;;;;GAOG;AACH;IAME;;;;OAIG;IACH,cAAY,MAAyB;;QACnC,IAAI,CAAC,IAAI,GAAG,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,IAAI,CAAC;QACzB,IAAI,CAAC,WAAW,GAAG,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,WAAW,CAAC;QACvC,IAAI,CAAC,WAAW,GAAG,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,WAAW,mCAAI,WAAW,CAAC,OAAO,EAAE,CAAC;QAChE,IAAI,CAAC,mBAAmB,GAAG,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,mBAAmB,mCAAI,mBAAmB,CAAC,IAAI,EAAE,CAAC;IACvF,CAAC;IACH,WAAC;AAAD,CAAC,AAjBD,IAiBC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Aggregation } from './Aggregation';\nimport { AttributesProcessor } from './AttributesProcessor';\n\n// https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/sdk.md#view\n\nexport interface ViewStreamConfig {\n  /**\n   * the name of the resulting metric to generate, or null if the same as the instrument.\n   */\n  name?: string;\n  /**\n   * the name of the resulting metric to generate, or null if the same as the instrument.\n   */\n  description?: string;\n  /**\n   * the aggregation used for this view.\n   */\n  aggregation?: Aggregation;\n  /**\n   * processor of attributes before performing aggregation.\n   */\n  attributesProcessor?: AttributesProcessor;\n}\n\n/**\n * A View provides the flexibility to customize the metrics that are output by\n * the SDK. For example, the view can\n * - customize which Instruments are to be processed/ignored.\n * - customize the aggregation.\n * - customize which attribute(s) are to be reported as metrics dimension(s).\n * - add additional dimension(s) from the {@link Context}.\n */\nexport class View {\n  readonly name?: string;\n  readonly description?: string;\n  readonly aggregation: Aggregation;\n  readonly attributesProcessor: AttributesProcessor;\n\n  /**\n   * Construct a metric view\n   *\n   * @param config how the result metric streams were configured\n   */\n  constructor(config?: ViewStreamConfig) {\n    this.name = config?.name;\n    this.description = config?.description;\n    this.aggregation = config?.aggregation ?? Aggregation.Default();\n    this.attributesProcessor = config?.attributesProcessor ?? AttributesProcessor.Noop();\n  }\n}\n"]}