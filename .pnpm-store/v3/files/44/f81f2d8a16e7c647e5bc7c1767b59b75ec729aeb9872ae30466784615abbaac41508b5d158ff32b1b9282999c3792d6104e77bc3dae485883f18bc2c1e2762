{"version":3,"file":"DeltaMetricProcessor.js","sourceRoot":"","sources":["../../../src/state/DeltaMetricProcessor.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAMH,OAAO,EAAE,gBAAgB,EAAE,MAAM,WAAW,CAAC;AAE7C;;;;;;GAMG;AACH,MAAM,OAAO,oBAAoB;IAM/B,YAAoB,WAA0B;QAA1B,gBAAW,GAAX,WAAW,CAAe;QALtC,6BAAwB,GAAG,IAAI,gBAAgB,EAAK,CAAC;QAC7D,kDAAkD;QAClD,0EAA0E;QAClE,2BAAsB,GAAG,IAAI,gBAAgB,EAAK,CAAC;IAEV,CAAC;IAElD,gEAAgE;IACxD,IAAI,CAAC,UAA4B;QACvC,OAAO,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,UAAU,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,kBAAkB,EAAE,CAAC,CAAC;IAC7G,CAAC;IAED,MAAM,CAAC,KAAa,EAAE,UAA4B,EAAE,QAAiB;QACnE,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC3C,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,MAAM,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;IAED,aAAa,CAAC,YAAsC;QAClD,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,UAAU,EAAE,KAAK,EAAE,QAAQ,CAAC,EAAE,EAAE;YAC3E,IAAI,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,kBAAkB,EAAE,CAAC;YACzD,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,MAAM,CAAC,KAAK,CAAC,CAAC;YAC5B,IAAI,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,EAAE;gBACzD,oEAAoE;gBACpE,MAAM,QAAQ,GAAG,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAE,CAAC;gBACxE,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;aAC9D;YAED,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,UAAU,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC;YACpE,IAAI,CAAC,wBAAwB,CAAC,GAAG,CAAC,UAAU,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;IACL,CAAC;IAED,OAAO;QACL,MAAM,eAAe,GAAG,IAAI,CAAC,wBAAwB,CAAC;QACtD,IAAI,CAAC,wBAAwB,GAAG,IAAI,gBAAgB,EAAE,CAAC;QACvD,OAAO,eAAe,CAAC;IACzB,CAAC;CACF","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '@opentelemetry/api';\nimport { MetricAttributes } from '@opentelemetry/api-metrics';\nimport { Maybe } from '../utils';\nimport { Accumulation, Aggregator } from '../aggregator/types';\nimport { AttributeHashMap } from './HashMap';\n\n/**\n * Internal interface.\n *\n * Allows synchronous collection of metrics. This processor should allow\n * allocation of new aggregation cells for metrics and convert cumulative\n * recording to delta data points.\n */\nexport class DeltaMetricProcessor<T extends Maybe<Accumulation>> {\n  private _activeCollectionStorage = new AttributeHashMap<T>();\n  // TODO: find a reasonable mean to clean the memo;\n  // https://github.com/open-telemetry/opentelemetry-specification/pull/2208\n  private _cumulativeMemoStorage = new AttributeHashMap<T>();\n\n  constructor(private _aggregator: Aggregator<T>) {}\n\n  /** Bind an efficient storage handle for a set of attributes. */\n  private bind(attributes: MetricAttributes) {\n    return this._activeCollectionStorage.getOrDefault(attributes, () => this._aggregator.createAccumulation());\n  }\n\n  record(value: number, attributes: MetricAttributes, _context: Context) {\n    const accumulation = this.bind(attributes);\n    accumulation?.record(value);\n  }\n\n  batchCumulate(measurements: AttributeHashMap<number>) {\n    Array.from(measurements.entries()).forEach(([attributes, value, hashCode]) => {\n      let accumulation = this._aggregator.createAccumulation();\n      accumulation?.record(value);\n      if (this._cumulativeMemoStorage.has(attributes, hashCode)) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const previous = this._cumulativeMemoStorage.get(attributes, hashCode)!;\n        accumulation = this._aggregator.diff(previous, accumulation);\n      }\n\n      this._cumulativeMemoStorage.set(attributes, accumulation, hashCode);\n      this._activeCollectionStorage.set(attributes, accumulation, hashCode);\n    });\n  }\n\n  collect() {\n    const unreportedDelta = this._activeCollectionStorage;\n    this._activeCollectionStorage = new AttributeHashMap();\n    return unreportedDelta;\n  }\n}\n"]}