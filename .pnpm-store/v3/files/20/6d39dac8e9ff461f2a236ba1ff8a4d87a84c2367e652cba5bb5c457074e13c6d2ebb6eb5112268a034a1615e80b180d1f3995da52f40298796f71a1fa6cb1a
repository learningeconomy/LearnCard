{"version":3,"sources":["ObjectLabel.tsx"],"names":["buildPreview","children","previewMax","showKey","previews","i","length","child","isPrototype","push","key","pop","getArrayLabel","ast","open","theme","l","value","getObjectLabel","getPromiseLabel","String","getMapLabel","size","getSetLabel","ObjectLabel","props","colorScheme","className","html","themeClass","currentTheme","styles","classes","objectLabel","prototype","isRoot","depth","Key","type","functionDecorator","function","name","defaultProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport makeClass from \"clsx\";\nimport { ThemeableElement, useTheme, Theme } from \"@devtools-ds/themes\";\nimport {\n  ResolvedASTNode,\n  ResolvedASTArray,\n  ResolvedASTObject,\n  ResolvedASTSet,\n  ResolvedASTPromise,\n  ResolvedASTMap,\n  ASTNode,\n} from \"@devtools-ds/object-parser\";\nimport ObjectValue from \"./ObjectValue\";\nimport styles from \"./ObjectInspector.css\";\n\ninterface ObjectLabelProps extends ThemeableElement<\"span\"> {\n  /** Type of object. */\n  ast: ResolvedASTNode;\n  /** How many previews to render */\n  previewMax: number;\n  /** Whether the Object label is open */\n  open: boolean;\n}\n\n/** Build a list of previews */\nconst buildPreview = (\n  children: ASTNode[],\n  previewMax: number,\n  showKey: boolean\n) => {\n  const previews = [];\n  for (let i = 0; i < children.length; i++) {\n    const child = children[i];\n\n    if (!child.isPrototype) {\n      previews.push(\n        <ObjectValue key={child.key} ast={child} showKey={showKey} />\n      );\n\n      if (i < children.length - 1) {\n        previews.push(\", \");\n      } else {\n        previews.push(\" \");\n      }\n    }\n\n    if (child.isPrototype && i === children.length - 1) {\n      previews.pop();\n      previews.push(\" \");\n    }\n\n    // Add ellipsis if needed\n    if (i === previewMax - 1 && children.length > previewMax) {\n      previews.push(\"… \");\n      break;\n    }\n  }\n\n  return previews;\n};\n\n/** Get the label for an array */\nconst getArrayLabel = (\n  ast: ResolvedASTArray,\n  open: boolean,\n  previewMax: number,\n  theme: Theme\n) => {\n  const l = ast.value.length;\n\n  if (open) {\n    return <span>Array({l})</span>;\n  }\n\n  return (\n    <>\n      <span>{`${theme === \"firefox\" ? \"Array\" : \"\"}(${l}) [ `}</span>\n      {buildPreview(ast.children, previewMax, false)}\n      <span>]</span>\n    </>\n  );\n};\n\n/** Get the label for an object */\nconst getObjectLabel = (\n  ast: ResolvedASTObject,\n  open: boolean,\n  previewMax: number,\n  theme: Theme\n) => {\n  if (ast.isPrototype) {\n    return <span>{`Object ${theme === \"firefox\" ? \"{ … }\" : \"\"}`}</span>;\n  }\n\n  if (open) {\n    return <span>{\"{…}\"}</span>;\n  }\n\n  return (\n    <>\n      <span>{`${theme === \"firefox\" ? \"Object \" : \"\"}{ `}</span>\n      {buildPreview(ast.children, previewMax, true)}\n      <span>{\"}\"}</span>\n    </>\n  );\n};\n\n/** Get the label for a Promise */\nconst getPromiseLabel = (\n  ast: ResolvedASTPromise,\n  open: boolean,\n  previewMax: number\n) => {\n  if (open) {\n    return <span>{`Promise { \"${String(ast.children[0].value)}\" }`}</span>;\n  }\n\n  return (\n    <>\n      <span>{`Promise { `}</span>\n      {buildPreview(ast.children, previewMax, true)}\n      <span>{\"}\"}</span>\n    </>\n  );\n};\n\n/** Get the label for a Map */\nconst getMapLabel = (\n  ast: ResolvedASTMap,\n  open: boolean,\n  previewMax: number,\n  theme: Theme\n) => {\n  const { size } = ast.value;\n  if (open) {\n    return <span>{`Map(${size})`}</span>;\n  }\n\n  return (\n    <>\n      <span>{`Map${theme === \"chrome\" ? `(${size})` : \"\"} { `}</span>\n      {buildPreview(ast.children, previewMax, true)}\n      <span>{\"}\"}</span>\n    </>\n  );\n};\n\n/** Get the label for a Set */\nconst getSetLabel = (\n  ast: ResolvedASTSet,\n  open: boolean,\n  previewMax: number\n) => {\n  const { size } = ast.value;\n  if (open) {\n    return <span>Set({size})</span>;\n  }\n\n  return (\n    <>\n      <span>{`Set(${ast.value.size}) {`}</span>\n      {buildPreview(ast.children, previewMax, true)}\n      <span>{\"}\"}</span>\n    </>\n  );\n};\n\n/** Create a styled label for an object, with previews of the object contents. */\nexport const ObjectLabel = (props: ObjectLabelProps) => {\n  const {\n    ast,\n    theme,\n    previewMax,\n    open,\n    colorScheme,\n    className,\n    ...html\n  } = props;\n  const { themeClass, currentTheme } = useTheme({ theme, colorScheme }, styles);\n  const isPrototype = ast.isPrototype || false;\n  const classes = makeClass(styles.objectLabel, themeClass, className, {\n    [styles.prototype]: isPrototype,\n  });\n\n  const isRoot = ast.depth <= 0;\n\n  /** The key for the node */\n  const Key = () => {\n    return (\n      <span className={isPrototype ? styles.prototype : styles.key}>\n        {isRoot ? \"\" : `${ast.key}: `}\n      </span>\n    );\n  };\n\n  if (ast.type === \"array\") {\n    return (\n      <span className={classes} {...html}>\n        <Key />\n        {getArrayLabel(ast, open, previewMax, currentTheme)}\n      </span>\n    );\n  }\n\n  if (ast.type === \"function\") {\n    return (\n      <span className={classes} {...html}>\n        <Key />\n        {currentTheme === \"chrome\" && (\n          <span className={styles.functionDecorator}>{\"ƒ \"}</span>\n        )}\n        <span\n          className={makeClass({ [styles.function]: !isPrototype })}\n        >{`${ast.value.name}()`}</span>\n      </span>\n    );\n  }\n\n  if (ast.type === \"promise\") {\n    return (\n      <span className={classes} {...html}>\n        <Key />\n        {getPromiseLabel(ast, open, previewMax)}\n      </span>\n    );\n  }\n\n  if (ast.type === \"map\") {\n    return (\n      <span className={classes} {...html}>\n        <Key />\n        {getMapLabel(ast, open, previewMax, currentTheme)}\n      </span>\n    );\n  }\n\n  if (ast.type === \"set\") {\n    return (\n      <span className={classes} {...html}>\n        <Key />\n        {getSetLabel(ast, open, previewMax)}\n      </span>\n    );\n  }\n\n  return (\n    <span className={classes} {...html}>\n      <Key />\n      {getObjectLabel(ast, open, previewMax, currentTheme)}\n    </span>\n  );\n};\n\nObjectLabel.defaultProps = {\n  previewMax: 8,\n  open: false,\n};\n\nexport default ObjectLabel;\n"]}
