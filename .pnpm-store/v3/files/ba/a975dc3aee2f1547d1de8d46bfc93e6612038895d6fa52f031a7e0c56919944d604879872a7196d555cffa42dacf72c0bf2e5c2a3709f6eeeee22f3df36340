{"version":3,"file":"TemporalMetricProcessor.js","sourceRoot":"","sources":["../../../src/state/TemporalMetricProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport { AccumulationRecord, Aggregator } from '../aggregator/types';\nimport { MetricData } from '../export/MetricData';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\nimport { Maybe } from '../utils';\nimport { MetricCollectorHandle } from './MetricCollector';\nimport { AttributeHashMap } from './HashMap';\n\n/**\n * Remembers what was presented to a specific exporter.\n */\ninterface LastReportedHistory<T> {\n  /**\n   * The last accumulation of metric data.\n   */\n  accumulations: AttributeHashMap<T>;\n  /**\n   * The timestamp the data was reported.\n   */\n  collectionTime: HrTime;\n}\n\n/**\n * Internal interface.\n *\n * Provides unique reporting for each collectors. Allows synchronous collection\n * of metrics and reports given temporality values.\n */\nexport class TemporalMetricProcessor<T> {\n  private _unreportedAccumulations = new Map<MetricCollectorHandle, AttributeHashMap<T>[]>();\n  private _reportHistory = new Map<MetricCollectorHandle, LastReportedHistory<T>>();\n\n  constructor(private _aggregator: Aggregator<T>) {}\n\n  /**\n   * Builds the {@link MetricData} streams to report against a specific MetricCollector.\n   * @param collector The information of the MetricCollector.\n   * @param collectors The registered collectors.\n   * @param resource The resource to attach these metrics against.\n   * @param instrumentationLibrary The instrumentation library that generated these metrics.\n   * @param instrumentDescriptor The instrumentation descriptor that these metrics generated with.\n   * @param currentAccumulations The current accumulation of metric data from instruments.\n   * @param sdkStartTime The sdk start timestamp.\n   * @param collectionTime The current collection timestamp.\n   * @returns The {@link MetricData} points or `null`.\n   */\n  buildMetrics(\n    collector: MetricCollectorHandle,\n    collectors: MetricCollectorHandle[],\n    instrumentDescriptor: InstrumentDescriptor,\n    currentAccumulations: AttributeHashMap<T>,\n    sdkStartTime: HrTime,\n    collectionTime: HrTime,\n  ): Maybe<MetricData> {\n    const aggregationTemporality = collector.aggregatorTemporality;\n    // In case it's our first collection, default to start timestamp (see below for explanation).\n    let lastCollectionTime = sdkStartTime;\n\n    this._stashAccumulations(collectors, currentAccumulations);\n    const unreportedAccumulations = this._getMergedUnreportedAccumulations(collector);\n\n    let result = unreportedAccumulations;\n    // Check our last report time.\n    if (this._reportHistory.has(collector)) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const last = this._reportHistory.get(collector)!;\n      lastCollectionTime = last.collectionTime;\n\n      // Use aggregation temporality + instrument to determine if we do a merge or a diff of\n      // previous. We have the following four scenarios:\n      // 1. Cumulative Aggregation (temporality) + Delta recording (sync instrument).\n      //    Here we merge with our last record to get a cumulative aggregation.\n      // 2. Cumulative Aggregation + Cumulative recording - do nothing\n      // 3. Delta Aggregation + Delta recording - do nothing.\n      // 4. Delta Aggregation + Cumulative recording (async instrument) - do nothing\n      if (aggregationTemporality === AggregationTemporality.CUMULATIVE) {\n        // We need to make sure the current delta recording gets merged into the previous cumulative\n        // for the next cumulative measurement.\n        result = TemporalMetricProcessor.merge(last.accumulations, unreportedAccumulations, this._aggregator);\n      }\n    }\n\n    // Update last reported (cumulative) accumulation.\n    this._reportHistory.set(collector, {\n      accumulations: result,\n      collectionTime,\n    });\n\n    // Metric data time span is determined as:\n    // 1. Cumulative Aggregation time span: (sdkStartTime, collectionTime]\n    // 2. Delta Aggregation time span: (lastCollectionTime, collectionTime]\n    return this._aggregator.toMetricData(\n      instrumentDescriptor,\n      AttributesMapToAccumulationRecords(result),\n      /* startTime */ aggregationTemporality === AggregationTemporality.CUMULATIVE ? sdkStartTime : lastCollectionTime,\n      /* endTime */ collectionTime);\n  }\n\n  private _stashAccumulations(collectors: MetricCollectorHandle[], currentAccumulation: AttributeHashMap<T>) {\n    collectors.forEach(it => {\n      let stash = this._unreportedAccumulations.get(it);\n      if (stash === undefined) {\n        stash = [];\n        this._unreportedAccumulations.set(it, stash);\n      }\n      stash.push(currentAccumulation);\n    });\n  }\n\n  private _getMergedUnreportedAccumulations(collector: MetricCollectorHandle) {\n    let result = new AttributeHashMap<T>();\n    const unreportedList = this._unreportedAccumulations.get(collector);\n    this._unreportedAccumulations.set(collector, []);\n    if (unreportedList === undefined) {\n      return result;\n    }\n    for (const it of unreportedList) {\n      result = TemporalMetricProcessor.merge(result, it, this._aggregator);\n    }\n    return result;\n  }\n\n  static merge<T>(last: AttributeHashMap<T>, current: AttributeHashMap<T>, aggregator: Aggregator<T>) {\n    const result = last;\n    const iterator = current.entries();\n    let next = iterator.next();\n    while (next.done !== true) {\n      const [key, record, hash] = next.value;\n      const lastAccumulation = last.get(key, hash) ?? aggregator.createAccumulation();\n      result.set(key, aggregator.merge(lastAccumulation, record), hash);\n\n      next = iterator.next();\n    }\n    return result;\n  }\n}\n\n// TypeScript complains about converting 3 elements tuple to AccumulationRecord<T>.\nfunction AttributesMapToAccumulationRecords<T>(map: AttributeHashMap<T>): AccumulationRecord<T>[] {\n  return Array.from(map.entries()) as unknown as AccumulationRecord<T>[];\n}\n"]}