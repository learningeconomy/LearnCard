{"version":3,"sources":["ObjectInspector.tsx"],"names":["ObjectInspector","props","data","expandLevel","sortKeys","includePrototypes","className","theme","colorScheme","onSelect","html","ast","setAST","undefined","themeClass","currentTheme","currentColorScheme","styles","runParser","objectInspector","defaultProps"],"mappings":"6dAAA,qDACA,kDACA,wDAMA,2CACA,kFAEA,8EAiBO,KAAMA,CAAAA,eAAe,CAAIC,KAAD,EAAiC,CAC9D,KAAM,CACJC,IADI,CAEJC,WAFI,CAGJC,QAHI,CAIJC,iBAJI,CAKJC,SALI,CAMJC,KANI,CAOJC,WAPI,CAQJC,QARI,EAUFR,KAVJ,CASKS,IATL,uCAUIT,KAVJ,qGAWA,KAAM,CAACU,GAAD,CAAMC,MAAN,EAAgB,oBAA8BC,SAA9B,CAAtB,CACA,KAAM,CAAEC,UAAF,CAAcC,YAAd,CAA4BC,kBAA5B,EAAmD,qBACvD,CAAET,KAAF,CAASC,WAAT,CADuD,CAEvDS,wBAFuD,CAAzD,CAMA,qBAAU,IAAM,CAEd,KAAMC,CAAAA,SAAS,CAAG,SAAY,CAC5BN,MAAM,CAAC,KAAM,wBAAMV,IAAN,CAAYE,QAAZ,CAAsBC,iBAAtB,CAAP,CACP,CAFD,CAIAa,SAAS,EACV,CAPD,CAOG,CAAChB,IAAD,CAAOE,QAAP,CAAiBC,iBAAjB,CAPH,EASA,MACE,2DACE,SAAS,CAAE,kBAAUY,yBAAOE,eAAjB,CAAkCb,SAAlC,CAA6CQ,UAA7C,CADb,EAEMJ,IAFN,EAIGC,GAAG,EACF,6BAAC,qBAAD,EAAe,KAAK,CAAEI,YAAtB,CAAoC,WAAW,CAAEC,kBAAjD,EACE,6BAAC,4BAAD,EACE,GAAG,CAAEL,GADP,CAEE,WAAW,CAAER,WAFf,CAGE,QAAQ,CAAEM,QAHZ,EADF,CALJ,CAeH,CA5CM,C,wCA8CPT,eAAe,CAACoB,YAAhB,CAA+B,CAC7BjB,WAAW,CAAE,CADgB,CAE7BC,QAAQ,CAAE,IAFmB,CAG7BC,iBAAiB,CAAE,IAHU,CAA/B,C,aAMeL,e","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport makeClass from \"clsx\";\nimport {\n  parse,\n  SupportedTypes,\n  ASTNode,\n  ResolvedASTNode,\n} from \"@devtools-ds/object-parser\";\nimport { ThemeableElement, useTheme, ThemeProvider } from \"@devtools-ds/themes\";\nimport ObjectInspectorItem from \"./ObjectInspectorItem\";\n\nimport styles from \"./ObjectInspector.css\";\n\ninterface ObjectInspectorProps\n  extends Omit<ThemeableElement<\"div\">, \"onSelect\"> {\n  /** JSON data to render in the tree. */\n  data: SupportedTypes;\n  /** Depth of the tree that is open at first render. */\n  expandLevel: number;\n  /** Whether to sort keys like the browsers do. */\n  sortKeys: boolean;\n  /** Whether to include object Prototypes */\n  includePrototypes: boolean;\n  /** Callback when a particular node in the tree is actively selected */\n  onSelect?: (node?: ASTNode | ResolvedASTNode) => void;\n}\n\n/** An emulation of browsers JSON object inspector. */\nexport const ObjectInspector = (props: ObjectInspectorProps) => {\n  const {\n    data,\n    expandLevel,\n    sortKeys,\n    includePrototypes,\n    className,\n    theme,\n    colorScheme,\n    onSelect,\n    ...html\n  } = props;\n  const [ast, setAST] = useState<ASTNode | undefined>(undefined);\n  const { themeClass, currentTheme, currentColorScheme } = useTheme(\n    { theme, colorScheme },\n    styles\n  );\n\n  /** Handle async types */\n  useEffect(() => {\n    /** Async function run the parser */\n    const runParser = async () => {\n      setAST(await parse(data, sortKeys, includePrototypes));\n    };\n\n    runParser();\n  }, [data, sortKeys, includePrototypes]);\n\n  return (\n    <div\n      className={makeClass(styles.objectInspector, className, themeClass)}\n      {...html}\n    >\n      {ast && (\n        <ThemeProvider theme={currentTheme} colorScheme={currentColorScheme}>\n          <ObjectInspectorItem\n            ast={ast}\n            expandLevel={expandLevel}\n            onSelect={onSelect}\n          />\n        </ThemeProvider>\n      )}\n    </div>\n  );\n};\n\nObjectInspector.defaultProps = {\n  expandLevel: 0,\n  sortKeys: true,\n  includePrototypes: true,\n};\n\nexport default ObjectInspector;\n"]}
