{"version":3,"sources":["focus-lock.tsx"],"names":["FocusGuard","active","width","height","padding","overflow","position","top","left","FocusLock","React","forwardRef","ref","onBlur","undefined","html","trap","useRef","trapFocus","current","setTimeout","document","activeElement","useEffect","e","relatedTarget","getAttribute"],"mappings":"ucAEA,oDACA,8DACA,wEAUA,GAAMA,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,UAAGC,CAAAA,MAAH,MAAGA,MAAH,OACjB,4BACE,uBADF,CAEE,QAAQ,CAAEA,MAAM,CAAG,CAAH,CAAO,CAAC,CAF1B,CAGE,KAAK,CAAE,CACLC,KAAK,CAAE,CADF,CAELC,MAAM,CAAE,CAFH,CAGLC,OAAO,CAAE,CAHJ,CAILC,QAAQ,CAAE,QAJL,CAKLC,QAAQ,CAAE,OALL,CAMLC,GAAG,CAAE,CANA,CAOLC,IAAI,CAAE,CAPD,CAHT,EADiB,CAAnB,CAiBO,GAAMC,CAAAA,SAAS,CAAGC,KAAK,CAACC,UAAN,CAGvB,eAAgDC,GAAhD,CAAwD,IAArDX,CAAAA,MAAqD,OAArDA,MAAqD,oBAA7CY,MAA6C,CAA7CA,OAA6C,uBAApC,iBAAMC,CAAAA,SAAN,CAAoC,cAAhBC,IAAgB,qEACxD,GAAMC,CAAAA,IAAI,CAAGN,KAAK,CAACO,MAAN,CAA6B,IAA7B,CAAb,CAGA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACtB,GAAIjB,MAAM,EAAI,CAAC,2BAAYe,IAAI,CAACG,OAAjB,CAAf,CAA0C,CACxCC,UAAU,CACR,iBAAM,0BAAgBJ,IAAI,CAACG,OAArB,CAA8BE,QAAQ,CAACC,aAAvC,CAAN,CADQ,CAER,EAFQ,CAIX,CACF,CAPD,CASAZ,KAAK,CAACa,SAAN,CAAgBL,SAAhB,EAEA,MACE,yCACE,oBAAC,UAAD,EAAY,MAAM,CAAEjB,MAApB,EADF,CAEE,oDACE,GAAG,CAAE,+BAAU,CAACe,IAAD,CAAOJ,GAAP,CAAV,CADP,EAEMG,IAFN,EAGE,MAAM,CAAE,gBAAAS,CAAC,CAAI,CACX,GACEA,CAAC,CAACC,aAAF,EACCD,CAAC,CAACC,aAAH,CAAiCC,YAAjC,CAA8C,kBAA9C,CAFF,CAGE,CACAR,SAAS,EACV,CAEDL,OAAM,CAACW,CAAD,CACP,CAZH,GAFF,CAgBE,oBAAC,UAAD,EAAY,MAAM,CAAEvB,MAApB,EAhBF,CAmBH,CAtCwB,CAAlB,C","sourcesContent":["/* eslint-disable jsx-a11y/no-noninteractive-tabindex */\n\nimport * as React from 'react';\nimport moveFocusInside, { focusInside } from 'focus-lock';\nimport mergeRefs from 'react-merge-refs';\n\nimport { Element } from '..';\n\ninterface FocusLockProps {\n  /** Whether the lock is activated */\n  active: boolean;\n}\n\n/** A boundary for the focus lock */\nconst FocusGuard = ({ active }: FocusLockProps) => (\n  <div\n    data-focus-guard\n    tabIndex={active ? 0 : -1}\n    style={{\n      width: 1,\n      height: 0,\n      padding: 0,\n      overflow: 'hidden',\n      position: 'fixed',\n      top: 1,\n      left: 1\n    }}\n  />\n);\n\n/** Lock focus withing an area of the app */\nexport const FocusLock = React.forwardRef<\n  HTMLDivElement,\n  FocusLockProps & Element<'div'>\n>(({ active, onBlur = () => undefined, ...html }, ref) => {\n  const trap = React.useRef<HTMLDivElement>(null);\n\n  /** Trap the focus within the locks if active */\n  const trapFocus = () => {\n    if (active && !focusInside(trap.current)) {\n      setTimeout(\n        () => moveFocusInside(trap.current, document.activeElement),\n        50\n      );\n    }\n  };\n\n  React.useEffect(trapFocus);\n\n  return (\n    <>\n      <FocusGuard active={active} />\n      <div\n        ref={mergeRefs([trap, ref])}\n        {...html}\n        onBlur={e => {\n          if (\n            e.relatedTarget &&\n            (e.relatedTarget as HTMLElement).getAttribute('data-focus-guard')\n          ) {\n            trapFocus();\n          }\n\n          onBlur(e);\n        }}\n      />\n      <FocusGuard active={active} />\n    </>\n  );\n});\n"]}
