{"version":3,"file":"Meter.js","sourceRoot":"","sources":["../../src/Meter.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAGH,iEAAoF;AACpF,+CAAgG;AAGhG;;GAEG;AACH,MAAa,KAAK;IAChB,YAAoB,iBAAmC;QAAnC,sBAAiB,GAAjB,iBAAiB,CAAkB;IAAG,CAAC;IAE3D;;OAEG;IACH,eAAe,CAAC,IAAY,EAAE,OAAkC;QAC9D,MAAM,UAAU,GAAG,IAAA,iDAA0B,EAAC,IAAI,EAAE,qCAAc,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACvF,MAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;QACzE,OAAO,IAAI,iCAAmB,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;IACtD,CAAC;IAED;;OAEG;IACH,aAAa,CAAC,IAAY,EAAE,OAAgC;QAC1D,MAAM,UAAU,GAAG,IAAA,iDAA0B,EAAC,IAAI,EAAE,qCAAc,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACrF,MAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;QACzE,OAAO,IAAI,+BAAiB,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;IACpD,CAAC;IAED;;OAEG;IACH,mBAAmB,CAAC,IAAY,EAAE,OAAsC;QACtE,MAAM,UAAU,GAAG,IAAA,iDAA0B,EAAC,IAAI,EAAE,qCAAc,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;QAC7F,MAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;QACzE,OAAO,IAAI,qCAAuB,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;IAC1D,CAAC;IAED;;OAEG;IACH,qBAAqB,CACnB,IAAY,EACZ,QAAoC,EACpC,OAAwC;QAExC,MAAM,UAAU,GAAG,IAAA,iDAA0B,EAAC,IAAI,EAAE,qCAAc,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;QAC9F,IAAI,CAAC,iBAAiB,CAAC,0BAA0B,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;IAC1E,CAAC;IAED;;OAEG;IACH,uBAAuB,CACrB,IAAY,EACZ,QAAoC,EACpC,OAA0C;QAE1C,MAAM,UAAU,GAAG,IAAA,iDAA0B,EAAC,IAAI,EAAE,qCAAc,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;QAChG,IAAI,CAAC,iBAAiB,CAAC,0BAA0B,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;IAC1E,CAAC;IAED;;OAEG;IACH,6BAA6B,CAC3B,IAAY,EACZ,QAAoC,EACpC,OAAgD;QAEhD,MAAM,UAAU,GAAG,IAAA,iDAA0B,EAAC,IAAI,EAAE,qCAAc,CAAC,0BAA0B,EAAE,OAAO,CAAC,CAAC;QACxG,IAAI,CAAC,iBAAiB,CAAC,0BAA0B,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;IAC1E,CAAC;CACF;AAjED,sBAiEC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as metrics from '@opentelemetry/api-metrics';\nimport { createInstrumentDescriptor, InstrumentType } from './InstrumentDescriptor';\nimport { CounterInstrument, HistogramInstrument, UpDownCounterInstrument } from './Instruments';\nimport { MeterSharedState } from './state/MeterSharedState';\n\n/**\n * This class implements the {@link metrics.Meter} interface.\n */\nexport class Meter implements metrics.Meter {\n  constructor(private _meterSharedState: MeterSharedState) {}\n\n  /**\n   * Create a {@link metrics.Histogram} instrument.\n   */\n  createHistogram(name: string, options?: metrics.HistogramOptions): metrics.Histogram {\n    const descriptor = createInstrumentDescriptor(name, InstrumentType.HISTOGRAM, options);\n    const storage = this._meterSharedState.registerMetricStorage(descriptor);\n    return new HistogramInstrument(storage, descriptor);\n  }\n\n  /**\n   * Create a {@link metrics.Counter} instrument.\n   */\n  createCounter(name: string, options?: metrics.CounterOptions): metrics.Counter {\n    const descriptor = createInstrumentDescriptor(name, InstrumentType.COUNTER, options);\n    const storage = this._meterSharedState.registerMetricStorage(descriptor);\n    return new CounterInstrument(storage, descriptor);\n  }\n\n  /**\n   * Create a {@link metrics.UpDownCounter} instrument.\n   */\n  createUpDownCounter(name: string, options?: metrics.UpDownCounterOptions): metrics.UpDownCounter {\n    const descriptor = createInstrumentDescriptor(name, InstrumentType.UP_DOWN_COUNTER, options);\n    const storage = this._meterSharedState.registerMetricStorage(descriptor);\n    return new UpDownCounterInstrument(storage, descriptor);\n  }\n\n  /**\n   * Create a ObservableGauge instrument.\n   */\n  createObservableGauge(\n    name: string,\n    callback: metrics.ObservableCallback,\n    options?: metrics.ObservableGaugeOptions,\n  ): void {\n    const descriptor = createInstrumentDescriptor(name, InstrumentType.OBSERVABLE_GAUGE, options);\n    this._meterSharedState.registerAsyncMetricStorage(descriptor, callback);\n  }\n\n  /**\n   * Create a ObservableCounter instrument.\n   */\n  createObservableCounter(\n    name: string,\n    callback: metrics.ObservableCallback,\n    options?: metrics.ObservableCounterOptions,\n  ): void {\n    const descriptor = createInstrumentDescriptor(name, InstrumentType.OBSERVABLE_COUNTER, options);\n    this._meterSharedState.registerAsyncMetricStorage(descriptor, callback);\n  }\n\n  /**\n   * Create a ObservableUpDownCounter instrument.\n   */\n  createObservableUpDownCounter(\n    name: string,\n    callback: metrics.ObservableCallback,\n    options?: metrics.ObservableUpDownCounterOptions,\n  ): void {\n    const descriptor = createInstrumentDescriptor(name, InstrumentType.OBSERVABLE_UP_DOWN_COUNTER, options);\n    this._meterSharedState.registerAsyncMetricStorage(descriptor, callback);\n  }\n}\n"]}