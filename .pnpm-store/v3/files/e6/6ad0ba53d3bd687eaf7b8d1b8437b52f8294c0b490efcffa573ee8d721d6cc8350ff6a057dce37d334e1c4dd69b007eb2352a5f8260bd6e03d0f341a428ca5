{"version":3,"file":"Instruments.js","sourceRoot":"","sources":["../../src/Instruments.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,0CAA0C;AAC1C,sDAAsD;AAItD,MAAa,cAAc;IACzB,YAAoB,sBAA6C,EAAU,WAAiC;QAAxF,2BAAsB,GAAtB,sBAAsB,CAAuB;QAAU,gBAAW,GAAX,WAAW,CAAsB;IAAG,CAAC;IAEhH,OAAO;QACL,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;IAC/B,CAAC;IAES,OAAO,CAAC,KAAa,EAAE,aAAuC,EAAE,EAAE,UAAuB,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE;QACrH,IAAI,IAAI,CAAC,WAAW,CAAC,SAAS,KAAK,OAAO,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;YACpF,GAAG,CAAC,IAAI,CAAC,IAAI,CACX,2DAA2D,IAAI,CAAC,WAAW,CAAC,IAAI,mCAAmC,CACpH,CAAC;YACF,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SAC3B;QACD,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,KAAK,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;IACjE,CAAC;CACF;AAhBD,wCAgBC;AAED;;GAEG;AACH,MAAa,uBAAwB,SAAQ,cAAc;IACzD;;OAEG;IACH,GAAG,CAAC,KAAa,EAAE,UAAqC,EAAE,GAAiB;QACzE,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,UAAU,EAAE,GAAG,CAAC,CAAC;IACvC,CAAC;CACF;AAPD,0DAOC;AAED;;GAEG;AACH,MAAa,iBAAkB,SAAQ,cAAc;IACnD;;OAEG;IACH,GAAG,CAAC,KAAa,EAAE,UAAqC,EAAE,GAAiB;QACzE,IAAI,KAAK,GAAG,CAAC,EAAE;YACb,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,sCAAsC,IAAI,CAAC,OAAO,EAAE,KAAK,KAAK,EAAE,CAAC,CAAC;YAChF,OAAO;SACR;QAED,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,UAAU,EAAE,GAAG,CAAC,CAAC;IACvC,CAAC;CACF;AAZD,8CAYC;AAED;;GAEG;AACH,MAAa,mBAAoB,SAAQ,cAAc;IACrD;;OAEG;IACH,MAAM,CAAC,KAAa,EAAE,UAAqC,EAAE,GAAiB;QAC5E,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,UAAU,EAAE,GAAG,CAAC,CAAC;IACvC,CAAC;CACF;AAPD,kDAOC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport * as metrics from '@opentelemetry/api-metrics';\nimport { InstrumentDescriptor } from './InstrumentDescriptor';\nimport { WritableMetricStorage } from './state/WritableMetricStorage';\n\nexport class SyncInstrument {\n  constructor(private _writableMetricStorage: WritableMetricStorage, private _descriptor: InstrumentDescriptor) {}\n\n  getName(): string {\n    return this._descriptor.name;\n  }\n\n  protected _record(value: number, attributes: metrics.MetricAttributes = {}, context: api.Context = api.context.active()) {\n    if (this._descriptor.valueType === metrics.ValueType.INT && !Number.isInteger(value)) {\n      api.diag.warn(\n        `INT value type cannot accept a floating-point value for ${this._descriptor.name}, ignoring the fractional digits.`\n      );\n      value = Math.trunc(value);\n    }\n    this._writableMetricStorage.record(value, attributes, context);\n  }\n}\n\n/**\n * The class implements {@link metrics.UpDownCounter} interface.\n */\nexport class UpDownCounterInstrument extends SyncInstrument implements metrics.UpDownCounter {\n  /**\n   * Increment value of counter by the input. Inputs may be negative.\n   */\n  add(value: number, attributes?: metrics.MetricAttributes, ctx?: api.Context): void {\n    this._record(value, attributes, ctx);\n  }\n}\n\n/**\n * The class implements {@link metrics.Counter} interface.\n */\nexport class CounterInstrument extends SyncInstrument implements metrics.Counter {\n  /**\n   * Increment value of counter by the input. Inputs may not be negative.\n   */\n  add(value: number, attributes?: metrics.MetricAttributes, ctx?: api.Context): void {\n    if (value < 0) {\n      api.diag.warn(`negative value provided to counter ${this.getName()}: ${value}`);\n      return;\n    }\n\n    this._record(value, attributes, ctx);\n  }\n}\n\n/**\n * The class implements {@link metrics.Histogram} interface.\n */\nexport class HistogramInstrument extends SyncInstrument implements metrics.Histogram {\n  /**\n   * Records a measurement. Value of the measurement must not be negative.\n   */\n  record(value: number, attributes?: metrics.MetricAttributes, ctx?: api.Context): void {\n    this._record(value, attributes, ctx);\n  }\n}\n"]}