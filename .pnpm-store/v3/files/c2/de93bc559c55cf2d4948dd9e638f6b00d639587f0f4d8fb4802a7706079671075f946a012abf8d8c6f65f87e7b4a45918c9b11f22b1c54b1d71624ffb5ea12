#!/usr/bin/env node

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);

// templates/react/aqu.template.ts
var aqu_template_exports = {};
__export(aqu_template_exports, {
  default: () => aqu_template_default
});

// src/utils/packageManager.ts
var import_chalk2 = __toESM(require("chalk"));
var import_execa = __toESM(require("execa"));
var import_inquirer = __toESM(require("inquirer"));

// src/utils/insertArgs.ts
var insertArgs = (str, args) => str.replace(/\${\s*((?:\w|\.)+)\s*}/g, (_, paramName) => paramName in args ? args[paramName] : `\${${paramName}}`);

// src/logger.ts
var import_chalk = __toESM(require("chalk"));
var import_ora = __toESM(require("ora"));

// package.json
var name = "aqu";

// src/logger.ts
var logger = {
  error: (...args) => {
    console.error(import_chalk.default.red(`[${name}]`, ...args));
  },
  fatal: (...args) => {
    logger.error(...args);
    process.exit(1);
  },
  warn: (...args) => {
    console.warn(import_chalk.default.yellow(`[${name}] WARNING:`), ...args);
  },
  info: (...args) => {
    console.log(import_chalk.default.gray(`[${name}]:`), ...args);
  },
  success: (...args) => {
    console.log(import_chalk.default.green(`[${name}]:`, ...args));
  }
};
var logger_default = logger;

// src/messages.json
var unknownPackageManager = "Unknown package manager ${manager} found";

// src/utils/packageManager.ts
var getPackageVersion = async (pkg, manager) => {
  if (manager === "npm" || manager === "pnpm") {
    const { stdout } = await (0, import_execa.default)(manager, ["view", pkg, "version"]);
    return stdout.trim();
  } else if (manager === "yarn") {
    const { stdout } = await (0, import_execa.default)(manager, [
      "info",
      pkg,
      "version",
      "--silent"
    ]);
    return stdout.trim();
  } else {
    logger_default.fatal(insertArgs(unknownPackageManager, {
      manager: import_chalk2.default.bold.red(manager)
    }));
  }
};

// templates/react/aqu.template.ts
var templateScript = {
  initialize: async (manager) => ({
    extend: "_base",
    filesToMergePaths: [
      "package.json",
      ".prettierrc",
      "./example/package.json"
    ],
    templateFilePaths: [
      "package.json",
      "./example/package.json",
      "./example/src/index.jsx",
      "./example/public/index.html"
    ],
    customArgs: {
      ["versions.reactDom"]: await getPackageVersion("react-dom", manager),
      ["versions.react"]: await getPackageVersion("react", manager),
      ["versions.reactScripts"]: await getPackageVersion("react-scripts", manager)
    }
  })
};
var aqu_template_default = templateScript;
module.exports = __toCommonJS(aqu_template_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
