{"version":3,"sources":["omit.ts"],"names":["omit","obj","keys","Object","entries","filter","key","includes"],"mappings":"yQAAA,0CA6BO,GAAMA,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,CAClBC,GADkB,CAElBC,IAFkB,QAIlB,6BACEC,MAAM,CAACC,OAAP,CAAeH,GAAf,EAAoBI,MAApB,CAA2B,gEAAEC,GAAF,gBAAW,CAACJ,IAAI,CAACK,QAAL,CAAcD,GAAd,CAAZ,CAA3B,CADF,CAJkB,CAAb,C","sourcesContent":["import { fromEntries } from './fromEntries';\n\n/**\n * Omit keys from a type.\n *\n * @example\n * Omit<{foo: string, bar: string}, 'foo'>\n * // = { bar: string }\n */\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n/**\n * Omit keys from an object.\n *\n * @param obj - The object to omit props from\n * @param keys - A list of keys to omit\n *\n * @example Here is a simple example\n * ```ts\n * const result = omit({ foo: 'a', bar: 'b' }, 'foo')\n * // result = { bar: 'b' }\n * ```\n *\n * @example Here is a another example\n * ```ts\n * const result = omit({ baz: 'a', bar: 'b' }, 'baz')\n * // result = { bar: 'b' }\n * ```\n */\nexport const omit = <Props, Prop extends keyof Props>(\n  obj: Props,\n  keys: Prop[]\n) =>\n  fromEntries(\n    Object.entries(obj).filter(([key]) => !keys.includes(key as Prop))\n  ) as Omit<Props, Prop>;\n"]}
