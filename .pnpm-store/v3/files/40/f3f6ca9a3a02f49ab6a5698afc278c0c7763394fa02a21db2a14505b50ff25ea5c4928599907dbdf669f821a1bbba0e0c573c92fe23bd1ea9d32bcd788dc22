{"version":3,"file":"MetricData.js","sourceRoot":"","sources":["../../../src/export/MetricData.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAoDH;;GAEG;AACH,MAAM,CAAN,IAAY,aAIX;AAJD,WAAY,aAAa;IACvB,yDAAQ,CAAA;IACR,2DAAS,CAAA;IACT,mFAAqB,CAAA;AACvB,CAAC,EAJW,aAAa,KAAb,aAAa,QAIxB","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport { MetricAttributes } from '@opentelemetry/api-metrics';\nimport { InstrumentationLibrary } from '@opentelemetry/core';\nimport { Resource } from '@opentelemetry/resources';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { Histogram } from '../aggregator/types';\n\n/**\n * Basic metric data fields.\n */\nexport interface BaseMetricData {\n  readonly descriptor: InstrumentDescriptor;\n  /**\n   * DataPointType of the metric instrument.\n   */\n  readonly dataPointType: DataPointType;\n}\n\n/**\n * Represents a metric data aggregated by either a LastValueAggregation or\n * SumAggregation.\n */\nexport interface SingularMetricData extends BaseMetricData {\n  readonly dataPointType: DataPointType.SINGULAR;\n  readonly dataPoints: DataPoint<number>[];\n}\n\n/**\n * Represents a metric data aggregated by a HistogramAggregation.\n */\nexport interface HistogramMetricData extends BaseMetricData {\n  readonly dataPointType: DataPointType.HISTOGRAM;\n  readonly dataPoints: DataPoint<Histogram>[];\n}\n\n/**\n * Represents an aggregated metric data.\n */\nexport type MetricData = SingularMetricData | HistogramMetricData;\n\nexport interface InstrumentationLibraryMetrics {\n  instrumentationLibrary: InstrumentationLibrary;\n  metrics: MetricData[];\n}\n\nexport interface ResourceMetrics {\n  resource: Resource;\n  instrumentationLibraryMetrics: InstrumentationLibraryMetrics[];\n}\n\n/**\n * The aggregated point data type.\n */\nexport enum DataPointType {\n  SINGULAR,\n  HISTOGRAM,\n  EXPONENTIAL_HISTOGRAM,\n}\n\n/**\n * Represents an aggregated point data with start time, end time and their\n * associated attributes and points.\n */\nexport interface DataPoint<T> {\n  /**\n   * The start epoch timestamp of the DataPoint, usually the time when\n   * the metric was created when the preferred AggregationTemporality is\n   * CUMULATIVE, or last collection time otherwise.\n   */\n  readonly startTime: HrTime;\n  /**\n   * The end epoch timestamp when data were collected, usually it represents\n   * the moment when `MetricReader.collect` was called.\n   */\n  readonly endTime: HrTime;\n  /**\n   * The attributes associated with this DataPoint.\n   */\n  readonly attributes: MetricAttributes;\n  /**\n   * The value for this DataPoint.\n   */\n  readonly value: T;\n}\n"]}