{"version":3,"file":"MetricExporter.js","sourceRoot":"","sources":["../../../src/export/MetricExporter.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAEH,OAAO,EAAE,sBAAsB,EAAE,MAAM,0BAA0B,CAAC;AAElE,OAAO,EAEL,gBAAgB,GACjB,MAAM,qBAAqB,CAAC;AAiB7B,MAAM,OAAO,qBAAqB;IAAlC;QACY,cAAS,GAAG,IAAI,CAAC;IAmB7B,CAAC;IAjBC,MAAM,CAAC,OAAwB,EAAE,cAA8C;QAC7E,OAAO,cAAc,CAAC;YAClB,IAAI,EAAE,gBAAgB,CAAC,MAAM;YAC7B,KAAK,EAAE,IAAI,KAAK,CAAC,wBAAwB,CAAC;SAC3C,CAAC,CAAC;IACP,CAAC;IAED,kCAAkC;QAChC,OAAO,sBAAsB,CAAC,UAAU,CAAC;IAC3C,CAAC;IAED,gBAAgB;IAChB,KAAK,CAAC,UAAU,KAAI,CAAC;IAErB,KAAK,CAAC,QAAQ;QACZ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IACxB,CAAC;CACF","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AggregationTemporality } from './AggregationTemporality';\nimport { ResourceMetrics } from './MetricData';\nimport {\n  ExportResult,\n  ExportResultCode,\n} from '@opentelemetry/core';\n\n\n// https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/sdk.md#metricexporter\n\nexport interface PushMetricExporter {\n\n  export(metrics: ResourceMetrics, resultCallback: (result: ExportResult) => void): void;\n\n  forceFlush(): Promise<void>;\n\n  getPreferredAggregationTemporality(): AggregationTemporality;\n\n  shutdown(): Promise<void>;\n\n}\n\nexport class ConsoleMetricExporter implements PushMetricExporter {\n  protected _shutdown = true;\n\n  export(metrics: ResourceMetrics, resultCallback: (result: ExportResult) => void) {\n    return resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Method not implemented')\n      });\n  }\n\n  getPreferredAggregationTemporality() {\n    return AggregationTemporality.CUMULATIVE;\n  }\n\n  // nothing to do\n  async forceFlush() {}\n\n  async shutdown() {\n    this._shutdown = true;\n  }\n}\n"]}