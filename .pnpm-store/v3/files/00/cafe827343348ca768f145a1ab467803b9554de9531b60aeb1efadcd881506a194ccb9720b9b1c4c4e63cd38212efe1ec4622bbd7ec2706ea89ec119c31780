{"version":3,"sources":["utils.tsx"],"names":["React","makeClass","colorSchemes","themes","isWindowDefined","window","ThemeContext","createContext","theme","colorScheme","useDarkMode","darkMode","setDarkMode","useState","matchMedia","matches","useEffect","mediaQuery","changeDarkMode","addListener","removeListener","ThemeProvider","children","value","wrappedTheme","useContext","useTheme","props","styles","themeContext","currentTheme","currentColorScheme","themeClass"],"mappings":"26BAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,SAAP,KAAsB,MAAtB,CAGA,MAAO,MAAMC,CAAAA,YAAY,CAAG,CAAC,OAAD,CAAU,MAAV,CAArB,CAGP,MAAO,MAAMC,CAAAA,MAAM,CAAG,CAAC,QAAD,CAAW,SAAX,CAAf,CAGP,KAAMC,CAAAA,eAAe,CAAG,MAAOC,CAAAA,MAAP,GAAkB,WAA1C,CAuBA,MAAO,MAAMC,CAAAA,YAAY,CAAGN,KAAK,CAACO,aAAN,CAA+B,CACzDC,KAAK,CAAE,QADkD,CAEzDC,WAAW,CAAE,OAF4C,CAA/B,CAArB,CASP,MAAO,MAAMC,CAAAA,WAAW,CAAG,IAAM,CAC/B,KAAM,CAACC,QAAD,CAAWC,WAAX,EAA0BZ,KAAK,CAACa,QAAN,CAC9BT,eAAe,EAAIC,MAAnB,CACIA,MAAM,CAACS,UAAP,CAAkB,8BAAlB,EAAkDC,OADtD,CAEI,KAH0B,CAAhC,CAMAf,KAAK,CAACgB,SAAN,CAAgB,IAAM,CACpB,GAAI,CAACZ,eAAL,CAAsB,CACpB,MACD,CAED,KAAMa,CAAAA,UAAU,CAAGZ,MAAM,CAACS,UAAP,CAAkB,8BAAlB,CAAnB,CAGA,KAAMI,CAAAA,cAAc,CAAG,IAAMN,WAAW,CAAC,CAACD,QAAF,CAAxC,CAEAM,UAAU,CAACE,WAAX,CAAuBD,cAAvB,EAEA,MAAO,IAAM,CACXD,UAAU,CAACG,cAAX,CAA0BF,cAA1B,CACD,CACF,CAfD,CAeG,CAACP,QAAD,CAfH,EAiBA,MAAOA,CAAAA,QACR,CAzBM,CA4BP,MAAO,MAAMU,CAAAA,aAAa,CAAG,QAGa,IAHZ,CAC5BC,QAD4B,CAGY,MADrCC,KACqC,6CACxC,KAAMC,CAAAA,YAAY,CAAGxB,KAAK,CAACyB,UAAN,CAAiBnB,YAAjB,CAArB,CAEA,MACE,qBAAC,YAAD,CAAc,QAAd,EAAuB,KAAK,gCAAOkB,YAAP,EAAwBD,KAAxB,CAA5B,EACGD,QADH,CAIH,CAXM,CAsBP,MAAO,MAAMI,CAAAA,QAAQ,CAAG,CACtBC,KADsB,CAEtBC,MAA8B,CAAG,EAFX,GAGnB,CACH,KAAMC,CAAAA,YAAY,CAAG7B,KAAK,CAACyB,UAAN,CAAiBnB,YAAjB,CAArB,CAEA,KAAMwB,CAAAA,YAAY,CAAGH,KAAK,CAACnB,KAAN,EAAeqB,YAAY,CAACrB,KAA5B,EAAqC,QAA1D,CACA,KAAMuB,CAAAA,kBAAkB,CACtBJ,KAAK,CAAClB,WAAN,EAAqBoB,YAAY,CAACpB,WAAlC,EAAiD,OADnD,CAEA,KAAMuB,CAAAA,UAAU,CAAG/B,SAAS,CAC1B2B,MAAM,CAACE,YAAD,CADoB,CAE1BF,MAAM,CAACG,kBAAD,CAFoB,CAA5B,CAKA,MAAO,CACLA,kBADK,CAELD,YAFK,CAGLE,UAHK,CAKR,CAnBM","sourcesContent":["import React from \"react\";\nimport makeClass from \"clsx\";\nimport { Element } from \"@design-systems/utils\";\n\nexport const colorSchemes = [\"light\", \"dark\"] as const;\nexport type ColorScheme = typeof colorSchemes[number];\n\nexport const themes = [\"chrome\", \"firefox\"] as const;\nexport type Theme = typeof themes[number];\n\nconst isWindowDefined = typeof window !== \"undefined\";\n\n/**\n * Get all of the props for an HTML element + add the theme props.\n * Used to easily type the rest props of a component and add theming.\n *\n * @example\n * export interface ButtonProps extends ThemeableElement<'button'> {\n *   size?: Sizes;\n * }\n */\nexport interface Themeable {\n  /** Light or Dark mode. */\n  colorScheme?: ColorScheme;\n  /** Supported browser themes.  */\n  theme?: Theme;\n}\n\nexport type ThemeableElement<T extends keyof JSX.IntrinsicElements> = Element<\n  T\n> &\n  Themeable;\n\nexport const ThemeContext = React.createContext<Themeable>({\n  theme: \"chrome\",\n  colorScheme: \"light\",\n});\n\n/**\n * Determine if the user has a \"prefers-color-scheme\" mode enabled in their browser.\n * This is helpful for detecting if a user prefers dark mode.\n */\nexport const useDarkMode = () => {\n  const [darkMode, setDarkMode] = React.useState(\n    isWindowDefined && window\n      ? window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n      : false\n  );\n\n  React.useEffect(() => {\n    if (!isWindowDefined) {\n      return;\n    }\n\n    const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\n\n    /** Run when the user changes this setting. */\n    const changeDarkMode = () => setDarkMode(!darkMode);\n\n    mediaQuery.addListener(changeDarkMode);\n\n    return () => {\n      mediaQuery.removeListener(changeDarkMode);\n    };\n  }, [darkMode]);\n\n  return darkMode;\n};\n\n/** A React Context provider for devtools-ds themes */\nexport const ThemeProvider = ({\n  children,\n  ...value\n}: React.PropsWithChildren<Themeable>) => {\n  const wrappedTheme = React.useContext(ThemeContext);\n\n  return (\n    <ThemeContext.Provider value={{ ...wrappedTheme, ...value }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\n/**\n * A hook to use the closest theme context.\n *\n * @param props - Current component props\n * @param styles - The css modules for the component\n *\n * @example\n * const { themeClass } = useTheme({ colorScheme, theme }, styles);\n */\nexport const useTheme = (\n  props: Themeable,\n  styles: Record<string, string> = {}\n) => {\n  const themeContext = React.useContext(ThemeContext);\n\n  const currentTheme = props.theme || themeContext.theme || \"chrome\";\n  const currentColorScheme =\n    props.colorScheme || themeContext.colorScheme || \"light\";\n  const themeClass = makeClass(\n    styles[currentTheme],\n    styles[currentColorScheme]\n  );\n\n  return {\n    currentColorScheme,\n    currentTheme,\n    themeClass,\n  };\n};\n\ninterface BasicTheme {\n  [key: string]: string;\n}\n\ninterface LightDarkTheme {\n  /** The light version of the theme */\n  light: BasicTheme;\n  /** The dark version of the theme */\n  dark: BasicTheme;\n}\n\ntype CustomTheme = BasicTheme | LightDarkTheme;\n\nexport type ComponentTheme = Required<Record<\"chrome\", CustomTheme>> &\n  Partial<Record<Theme, CustomTheme>>;\n"]}
