{"version":3,"file":"Sum.js","sourceRoot":"","sources":["../../../src/aggregator/Sum.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;;AAEH,OAAO,EAAO,cAAc,EAAgD,MAAM,SAAS,CAAC;AAE5F,OAAO,EAAE,aAAa,EAAsB,MAAM,sBAAsB,CAAC;AAIzE;IACE,yBAAoB,QAAoB;QAApB,yBAAA,EAAA,YAAoB;QAApB,aAAQ,GAAR,QAAQ,CAAY;IAAG,CAAC;IAE5C,gCAAM,GAAN,UAAO,KAAa;QAClB,IAAI,CAAC,QAAQ,IAAI,KAAK,CAAC;IACzB,CAAC;IAED,sCAAY,GAAZ;QACE,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IACH,sBAAC;AAAD,CAAC,AAVD,IAUC;;AAED,4EAA4E;AAC5E;IAAA;QACS,SAAI,GAAuB,cAAc,CAAC,GAAG,CAAC;IAsCvD,CAAC;IApCC,0CAAkB,GAAlB;QACE,OAAO,IAAI,eAAe,EAAE,CAAC;IAC/B,CAAC;IAED;;OAEG;IACH,6BAAK,GAAL,UAAM,QAAyB,EAAE,KAAsB;QACrD,OAAO,IAAI,eAAe,CAAC,QAAQ,CAAC,YAAY,EAAE,GAAG,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC;IAC7E,CAAC;IAED;;OAEG;IACH,4BAAI,GAAJ,UAAK,QAAyB,EAAE,OAAwB;QACtD,OAAO,IAAI,eAAe,CAAC,OAAO,CAAC,YAAY,EAAE,GAAG,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC;IAC/E,CAAC;IAED,oCAAY,GAAZ,UACE,UAAgC,EAChC,wBAA+D,EAC/D,SAAiB,EACjB,OAAe;QACf,OAAO;YACL,UAAU,YAAA;YACV,aAAa,EAAE,aAAa,CAAC,QAAQ;YACrC,UAAU,EAAE,wBAAwB,CAAC,GAAG,CAAC,UAAC,EAA0B;oBAA1B,KAAA,aAA0B,EAAzB,UAAU,QAAA,EAAE,YAAY,QAAA;gBACjE,OAAO;oBACL,UAAU,YAAA;oBACV,SAAS,WAAA;oBACT,OAAO,SAAA;oBACP,KAAK,EAAE,YAAY,CAAC,YAAY,EAAE;iBACnC,CAAC;YACJ,CAAC,CAAC;SACH,CAAC;IACJ,CAAC;IACH,oBAAC;AAAD,CAAC,AAvCD,IAuCC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Sum, AggregatorKind, Aggregator, Accumulation, AccumulationRecord } from './types';\nimport { HrTime } from '@opentelemetry/api';\nimport { DataPointType, SingularMetricData } from '../export/MetricData';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { Maybe } from '../utils';\n\nexport class SumAccumulation implements Accumulation {\n  constructor(private _current: number = 0) {}\n\n  record(value: number): void {\n    this._current += value;\n  }\n\n  toPointValue(): Sum {\n    return this._current;\n  }\n}\n\n/** Basic aggregator which calculates a Sum from individual measurements. */\nexport class SumAggregator implements Aggregator<SumAccumulation> {\n  public kind: AggregatorKind.SUM = AggregatorKind.SUM;\n\n  createAccumulation() {\n    return new SumAccumulation();\n  }\n\n  /**\n   * Returns the result of the merge of the given accumulations.\n   */\n  merge(previous: SumAccumulation, delta: SumAccumulation): SumAccumulation {\n    return new SumAccumulation(previous.toPointValue() + delta.toPointValue());\n  }\n\n  /**\n   * Returns a new DELTA aggregation by comparing two cumulative measurements.\n   */\n  diff(previous: SumAccumulation, current: SumAccumulation): SumAccumulation {\n    return new SumAccumulation(current.toPointValue() - previous.toPointValue());\n  }\n\n  toMetricData(\n    descriptor: InstrumentDescriptor,\n    accumulationByAttributes: AccumulationRecord<SumAccumulation>[],\n    startTime: HrTime,\n    endTime: HrTime): Maybe<SingularMetricData> {\n    return {\n      descriptor,\n      dataPointType: DataPointType.SINGULAR,\n      dataPoints: accumulationByAttributes.map(([attributes, accumulation]) => {\n        return {\n          attributes,\n          startTime,\n          endTime,\n          value: accumulation.toPointValue(),\n        };\n      })\n    };\n  }\n}\n"]}