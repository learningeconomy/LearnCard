{"version":3,"sources":["ObjectInspectorItem.tsx"],"names":["React","useEffect","useState","Tree","ObjectValue","ObjectLabel","ObjectInspectorItem","props","ast","expandLevel","depth","resolved","setResolved","open","setOpen","Boolean","resolve","type","promises","children","map","f","Promise","all","r","onSelect","value","child","key","defaultProps"],"mappings":"s1BAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAASC,IAAT,KAAqB,mBAArB,CAEA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,CACA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,CAcA,MAAO,MAAMC,CAAAA,mBAAmB,CAAIC,KAAD,EAAqC,CACtE,KAAM,CAAEC,GAAF,CAAOC,WAAP,CAAoBC,KAApB,EAA8BH,KAApC,CAEA,KAAM,CAACI,QAAD,CAAWC,WAAX,EAA0BV,QAAQ,EAAxC,CACA,KAAM,CAACW,IAAD,CAAOC,OAAP,EAAkBZ,QAAQ,CAACa,OAAO,CAACL,KAAK,CAAGD,WAAT,CAAR,CAAhC,CAGAR,SAAS,CAAC,IAAM,CAEd,KAAMe,CAAAA,OAAO,CAAG,SAAY,CAC1B,GAAIR,GAAG,CAACS,IAAJ,GAAa,OAAjB,CAA0B,CACxB,KAAMC,CAAAA,QAAQ,CAAGV,GAAG,CAACW,QAAJ,CAAaC,GAAb,CAAkBC,CAAD,EAAOA,CAAC,EAAzB,CAAjB,CACA,KAAMF,CAAAA,QAAQ,CAAG,KAAMG,CAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ,CAAvB,CACA,KAAMM,CAAAA,CAAC,gCACFhB,GADE,MAELW,QAFK,EAAP,CAIAP,WAAW,CAACY,CAAD,CACZ,CACF,CAVD,CAYAR,OAAO,EACR,CAfQ,CAeN,CAACR,GAAD,CAfM,CAAT,CAiBA,GAAIG,QAAJ,CAAc,CACZ,MACE,qBAAC,IAAD,EACE,KAAK,CAAE,KADT,CAEE,IAAI,CAAEE,IAFR,CAGE,KAAK,CAAE,oBAAC,WAAD,EAAa,IAAI,CAAEA,IAAnB,CAAyB,GAAG,CAAEF,QAA9B,EAHT,CAIE,QAAQ,CAAE,IAAM,qBACd,iBAAAJ,KAAK,CAACkB,QAAN,+DAAAlB,KAAK,CAAYC,GAAZ,CACN,CANH,CAOE,QAAQ,CAAGkB,KAAD,EAAoB,CAC5BZ,OAAO,CAACY,KAAD,CACR,CATH,EAWGf,QAAQ,CAACQ,QAAT,CAAkBC,GAAlB,CAAuBO,KAAD,EAAW,CAChC,MACE,qBAAC,mBAAD,EACE,GAAG,CAAEA,KAAK,CAACC,GADb,CAEE,GAAG,CAAED,KAFP,CAGE,KAAK,CAAEjB,KAAK,CAAG,CAHjB,CAIE,WAAW,CAAED,WAJf,CAKE,QAAQ,CAAEF,KAAK,CAACkB,QALlB,EAQH,CAVA,CAXH,CAwBH,CAED,MACE,qBAAC,IAAD,EACE,KAAK,CAAE,KADT,CAEE,KAAK,CAAE,oBAAC,WAAD,EAAa,GAAG,CAAEjB,GAAlB,EAFT,CAGE,QAAQ,CAAE,IAAM,sBACd,kBAAAD,KAAK,CAACkB,QAAN,iEAAAlB,KAAK,CAAYC,GAAZ,CACN,CALH,EAQH,CA7DM,CA+DPF,mBAAmB,CAACuB,YAApB,CAAmC,CACjCpB,WAAW,CAAE,CADoB,CAEjCC,KAAK,CAAE,CAF0B,CAAnC,CAKA,cAAeJ,CAAAA,mBAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Tree } from \"@devtools-ds/tree\";\nimport { ResolvedASTNode, ASTNode } from \"@devtools-ds/object-parser\";\nimport ObjectValue from \"./ObjectValue\";\nimport ObjectLabel from \"./ObjectLabel\";\n\ninterface ObjectInspectorItemProps {\n  /** JSON ast to render in the tree. */\n  ast: ASTNode;\n  /** The current depth. */\n  depth: number;\n  /** Depth of the tree that is open at first render. */\n  expandLevel: number;\n  /** Callback when a particular node in the tree is actively selected */\n  onSelect?: (node?: ASTNode | ResolvedASTNode) => void;\n}\n\n/** A simple component. */\nexport const ObjectInspectorItem = (props: ObjectInspectorItemProps) => {\n  const { ast, expandLevel, depth } = props;\n\n  const [resolved, setResolved] = useState<ResolvedASTNode | undefined>();\n  const [open, setOpen] = useState(Boolean(depth < expandLevel));\n\n  /** Handle async children */\n  useEffect(() => {\n    /** Async function to resolve children */\n    const resolve = async () => {\n      if (ast.type !== \"value\") {\n        const promises = ast.children.map((f) => f());\n        const children = await Promise.all(promises);\n        const r = {\n          ...ast,\n          children,\n        };\n        setResolved(r);\n      }\n    };\n\n    resolve();\n  }, [ast]);\n\n  if (resolved) {\n    return (\n      <Tree\n        hover={false}\n        open={open}\n        label={<ObjectLabel open={open} ast={resolved} />}\n        onSelect={() => {\n          props.onSelect?.(ast);\n        }}\n        onUpdate={(value: boolean) => {\n          setOpen(value);\n        }}\n      >\n        {resolved.children.map((child) => {\n          return (\n            <ObjectInspectorItem\n              key={child.key}\n              ast={child}\n              depth={depth + 1}\n              expandLevel={expandLevel}\n              onSelect={props.onSelect}\n            />\n          );\n        })}\n      </Tree>\n    );\n  }\n\n  return (\n    <Tree\n      hover={false}\n      label={<ObjectValue ast={ast} />}\n      onSelect={() => {\n        props.onSelect?.(ast);\n      }}\n    />\n  );\n};\n\nObjectInspectorItem.defaultProps = {\n  expandLevel: 0,\n  depth: 0,\n};\n\nexport default ObjectInspectorItem;\n"]}
