{"version":3,"file":"NoopMeter.js","sourceRoot":"","sources":["../../src/NoopMeter.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;AAYH;;;GAGG;AACH;IACE;IAAe,CAAC;IAEhB;;;;OAIG;IACH,mCAAe,GAAf,UAAgB,KAAa,EAAE,QAAwB;QACrD,OAAO,qBAAqB,CAAC;IAC/B,CAAC;IAED;;;;OAIG;IACH,iCAAa,GAAb,UAAc,KAAa,EAAE,QAAwB;QACnD,OAAO,mBAAmB,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACH,uCAAmB,GAAnB,UAAoB,KAAa,EAAE,QAAwB;QACzD,OAAO,2BAA2B,CAAC;IACrC,CAAC;IAED;;;;;OAKG;IACH,yCAAqB,GAArB,UACE,KAAa,EACb,SAA6B,EAC7B,QAAwB,IACjB,CAAC;IAEV;;;;;OAKG;IACH,2CAAuB,GAAvB,UACE,KAAa,EACb,SAA6B,EAC7B,QAAwB,IACjB,CAAC;IAEV;;;;;OAKG;IACH,iDAA6B,GAA7B,UACE,KAAa,EACb,SAA6B,EAC7B,QAAwB,IACjB,CAAC;IACZ,gBAAC;AAAD,CAAC,AAjED,IAiEC;;AAED;IAAA;IAAyB,CAAC;IAAD,iBAAC;AAAD,CAAC,AAA1B,IAA0B;;AAE1B;IAAuC,qCAAU;IAAjD;;IAEA,CAAC;IADC,+BAAG,GAAH,UAAI,MAAc,EAAE,WAA6B,IAAS,CAAC;IAC7D,wBAAC;AAAD,CAAC,AAFD,CAAuC,UAAU,GAEhD;;AAED;IAA6C,2CAAU;IAAvD;;IAEA,CAAC;IADC,qCAAG,GAAH,UAAI,MAAc,EAAE,WAA6B,IAAS,CAAC;IAC7D,8BAAC;AAAD,CAAC,AAFD,CAA6C,UAAU,GAEtD;;AAED;IAAyC,uCAAU;IAAnD;;IAEA,CAAC;IADC,oCAAM,GAAN,UAAO,MAAc,EAAE,WAA6B,IAAS,CAAC;IAChE,0BAAC;AAAD,CAAC,AAFD,CAAyC,UAAU,GAElD;;AAED,MAAM,CAAC,IAAM,UAAU,GAAG,IAAI,SAAS,EAAE,CAAC;AAE1C,0BAA0B;AAC1B,MAAM,CAAC,IAAM,mBAAmB,GAAG,IAAI,iBAAiB,EAAE,CAAC;AAC3D,MAAM,CAAC,IAAM,qBAAqB,GAAG,IAAI,mBAAmB,EAAE,CAAC;AAC/D,MAAM,CAAC,IAAM,2BAA2B,GAAG,IAAI,uBAAuB,EAAE,CAAC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Meter } from './types/Meter';\nimport {\n  MetricOptions,\n  MetricAttributes,\n  Counter,\n  Histogram,\n  UpDownCounter,\n  ObservableCallback,\n} from './types/Metric';\n\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\nexport class NoopMeter implements Meter {\n  constructor() {}\n\n  /**\n   * Returns a constant noop histogram.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n  createHistogram(_name: string, _options?: MetricOptions): Histogram {\n    return NOOP_HISTOGRAM_METRIC;\n  }\n\n  /**\n   * Returns a constant noop counter.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n  createCounter(_name: string, _options?: MetricOptions): Counter {\n    return NOOP_COUNTER_METRIC;\n  }\n\n  /**\n   * Returns a constant noop UpDownCounter.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n  createUpDownCounter(_name: string, _options?: MetricOptions): UpDownCounter {\n    return NOOP_UP_DOWN_COUNTER_METRIC;\n  }\n\n  /**\n   * Returns a constant noop observable gauge.\n   * @param name the name of the metric.\n   * @param callback the observable gauge callback\n   * @param [options] the metric options.\n   */\n  createObservableGauge(\n    _name: string,\n    _callback: ObservableCallback,\n    _options?: MetricOptions,\n  ): void {}\n\n  /**\n   * Returns a constant noop observable counter.\n   * @param name the name of the metric.\n   * @param callback the observable counter callback\n   * @param [options] the metric options.\n   */\n  createObservableCounter(\n    _name: string,\n    _callback: ObservableCallback,\n    _options?: MetricOptions,\n  ): void {}\n\n  /**\n   * Returns a constant noop up down observable counter.\n   * @param name the name of the metric.\n   * @param callback the up down observable counter callback\n   * @param [options] the metric options.\n   */\n  createObservableUpDownCounter(\n    _name: string,\n    _callback: ObservableCallback,\n    _options?: MetricOptions,\n  ): void {}\n}\n\nexport class NoopMetric {}\n\nexport class NoopCounterMetric extends NoopMetric implements Counter {\n  add(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport class NoopUpDownCounterMetric extends NoopMetric implements UpDownCounter {\n  add(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport class NoopHistogramMetric extends NoopMetric implements Histogram {\n  record(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport const NOOP_METER = new NoopMeter();\n\n// Synchronous instruments\nexport const NOOP_COUNTER_METRIC = new NoopCounterMetric();\nexport const NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric();\nexport const NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric();\n"]}