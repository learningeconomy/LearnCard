---
// LoreCard - Social-Emotional Learning Badges for Tabletop RPG
const config = {
  learnCardHostOrigin: import.meta.env.LEARNCARD_HOST_ORIGIN || 'https://learncard.app',
  badges: {
    teamwork: import.meta.env.BADGE_TEAMWORK_URI || 'lc:network:network.learncard.com/trpc:boost:teamwork-champion',
    leadership: import.meta.env.BADGE_LEADERSHIP_URI || 'lc:network:network.learncard.com/trpc:boost:natural-leader',
    creativity: import.meta.env.BADGE_CREATIVITY_URI || 'lc:network:network.learncard.com/trpc:boost:creative-thinker',
    problemSolving: import.meta.env.BADGE_PROBLEM_SOLVING_URI || 'lc:network:network.learncard.com/trpc:boost:puzzle-master',
    empathy: import.meta.env.BADGE_EMPATHY_URI || 'lc:network:network.learncard.com/trpc:boost:empathetic-soul',
    communication: import.meta.env.BADGE_COMMUNICATION_URI || 'lc:network:network.learncard.com/trpc:boost:eloquent-speaker',
    courage: import.meta.env.BADGE_COURAGE_URI || 'lc:network:network.learncard.com/trpc:boost:brave-heart',
    wisdom: import.meta.env.BADGE_WISDOM_URI || 'lc:network:network.learncard.com/trpc:boost:wise-sage',
  }
};
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>LoreCard - Award Badges to Your Players</title>
  <meta name="description" content="LoreCard - Social-Emotional Learning Badges for Tabletop RPG Players">
  
  <!-- Google Fonts - Medieval/Fantasy themed -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Cinzel:wght@400;600;700&family=Lora:ital,wght@0,400;0,600;1,400&display=swap" rel="stylesheet">
  
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    :root {
      --parchment: #f4e8d0;
      --dark-parchment: #d4c5a9;
      --ink: #2c1810;
      --gold: #d4af37;
      --bronze: #cd7f32;
      --deep-red: #8b1a1a;
      --forest: #2d5016;
      --royal-purple: #4b0082;
      --shadow: rgba(44, 24, 16, 0.3);
    }

    body {
      margin: 0;
      min-height: 100vh;
      background: linear-gradient(135deg, #1a0f0a 0%, #3d2817 100%);
      background-attachment: fixed;
      font-family: 'Lora', serif;
      color: var(--ink);
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
      position: relative;
    }

    /* Decorative background pattern */
    body::before {
      content: '';
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-image: 
        radial-gradient(circle at 20% 30%, rgba(212, 175, 55, 0.1) 0%, transparent 50%),
        radial-gradient(circle at 80% 70%, rgba(139, 26, 26, 0.1) 0%, transparent 50%);
      pointer-events: none;
    }

    .scroll-container {
      max-width: 900px;
      width: 100%;
      background: var(--parchment);
      border-radius: 8px;
      box-shadow: 
        0 20px 60px rgba(0, 0, 0, 0.5),
        inset 0 0 100px rgba(0, 0, 0, 0.05);
      position: relative;
      overflow: hidden;
    }

    /* Decorative border */
    .scroll-container::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      border: 3px solid var(--gold);
      border-radius: 8px;
      pointer-events: none;
      box-shadow: inset 0 0 20px rgba(212, 175, 55, 0.3);
    }

    .scroll-content {
      padding: 40px;
      position: relative;
      z-index: 1;
    }

    h1 {
      font-family: 'Cinzel', serif;
      font-size: 2.5rem;
      font-weight: 700;
      color: var(--deep-red);
      text-align: center;
      margin-bottom: 12px;
      text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
      letter-spacing: 2px;
    }

    .subtitle {
      font-family: 'Cinzel', serif;
      font-size: 1.1rem;
      font-weight: 400;
      color: var(--bronze);
      text-align: center;
      margin-bottom: 30px;
      font-style: italic;
    }

    .intro {
      background: rgba(255, 255, 255, 0.5);
      border-left: 4px solid var(--gold);
      padding: 20px;
      margin-bottom: 30px;
      border-radius: 4px;
      line-height: 1.6;
    }

    .intro p {
      margin-bottom: 10px;
    }

    .intro p:last-child {
      margin-bottom: 0;
    }

    .status-box {
      padding: 16px;
      border-radius: 6px;
      margin-bottom: 30px;
      border-left: 4px solid;
      font-weight: 600;
      transition: all 0.3s ease;
    }

    .status-box.info {
      background: rgba(75, 0, 130, 0.1);
      border-color: var(--royal-purple);
      color: var(--royal-purple);
    }

    .status-box.success {
      background: rgba(45, 80, 22, 0.1);
      border-color: var(--forest);
      color: var(--forest);
    }

    .status-box.error {
      background: rgba(139, 26, 26, 0.1);
      border-color: var(--deep-red);
      color: var(--deep-red);
    }

    .section-title {
      font-family: 'Cinzel', serif;
      font-size: 1.5rem;
      font-weight: 600;
      color: var(--ink);
      margin-bottom: 20px;
      text-align: center;
      position: relative;
      padding-bottom: 10px;
    }

    .section-title::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 50%;
      transform: translateX(-50%);
      width: 100px;
      height: 2px;
      background: linear-gradient(to right, transparent, var(--gold), transparent);
    }

    .badge-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 20px;
      margin-bottom: 30px;
    }

    .badge-card {
      background: white;
      border-radius: 8px;
      padding: 24px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      transition: all 0.3s ease;
      border: 2px solid transparent;
      cursor: pointer;
      position: relative;
      overflow: hidden;
    }

    .badge-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 4px;
      background: var(--badge-color, var(--gold));
      transform: scaleX(0);
      transition: transform 0.3s ease;
    }

    .badge-card:hover::before {
      transform: scaleX(1);
    }

    .badge-card:hover {
      transform: translateY(-4px);
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
      border-color: var(--badge-color, var(--gold));
    }

    .badge-card.teamwork { --badge-color: #3b82f6; }
    .badge-card.leadership { --badge-color: #ef4444; }
    .badge-card.creativity { --badge-color: #a855f7; }
    .badge-card.problem-solving { --badge-color: #14b8a6; }
    .badge-card.empathy { --badge-color: #ec4899; }
    .badge-card.communication { --badge-color: #f59e0b; }
    .badge-card.courage { --badge-color: #dc2626; }
    .badge-card.wisdom { --badge-color: #6366f1; }

    .badge-icon {
      font-size: 3rem;
      text-align: center;
      margin-bottom: 12px;
      filter: drop-shadow(2px 2px 4px rgba(0, 0, 0, 0.1));
    }

    .badge-name {
      font-family: 'Cinzel', serif;
      font-size: 1.25rem;
      font-weight: 600;
      color: var(--ink);
      text-align: center;
      margin-bottom: 8px;
    }

    .badge-description {
      font-size: 0.9rem;
      color: #555;
      text-align: center;
      line-height: 1.4;
      margin-bottom: 16px;
    }

    .badge-skill {
      font-size: 0.8rem;
      color: var(--badge-color, var(--gold));
      text-align: center;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 1px;
    }

    .hidden {
      display: none;
    }

    .footer {
      text-align: center;
      margin-top: 30px;
      padding-top: 20px;
      border-top: 2px solid var(--dark-parchment);
      font-size: 0.9rem;
      color: #666;
    }

    .footer strong {
      color: var(--deep-red);
    }

    @media (max-width: 640px) {
      h1 {
        font-size: 1.8rem;
      }

      .subtitle {
        font-size: 1rem;
      }

      .scroll-content {
        padding: 24px;
      }

      .badge-grid {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>

<body>
  <div class="scroll-container">
    <div class="scroll-content">
      <h1>‚öîÔ∏è LoreCard ‚öîÔ∏è</h1>
      <p class="subtitle">Social-Emotional Learning Badges for Tabletop RPG Players</p>

      <div class="intro">
        <p><strong>Welcome, Game Master!</strong></p>
        <p>
          LoreCard empowers you to recognize and reward your players' personal growth through meaningful, 
          verifiable credentials. Award badges for demonstrating teamwork, leadership, empathy, and other 
          vital social-emotional skills during your tabletop adventures.
        </p>
        <p>
          <em>Promote collaborative, intergenerational play while tracking meaningful character development 
          both in and out of the game.</em>
        </p>
      </div>

      <div id="status-box" class="status-box info">
        <p id="status-text">Connecting to LearnCard...</p>
      </div>

      <div id="badge-section" class="hidden">
        <h2 class="section-title">Select a Badge to Award</h2>
        
        <div class="badge-grid">
          <!-- Teamwork -->
          <div class="badge-card teamwork" data-badge="teamwork">
            <div class="badge-icon">ü§ù</div>
            <div class="badge-name">Teamwork Champion</div>
            <div class="badge-description">
              Demonstrated exceptional collaboration and supported party members in achieving shared goals.
            </div>
            <div class="badge-skill">Social-Emotional Skill: Teamwork</div>
          </div>

          <!-- Leadership -->
          <div class="badge-card leadership" data-badge="leadership">
            <div class="badge-icon">üëë</div>
            <div class="badge-name">Natural Leader</div>
            <div class="badge-description">
              Took initiative, made difficult decisions, and guided the party through challenging situations.
            </div>
            <div class="badge-skill">Social-Emotional Skill: Leadership</div>
          </div>

          <!-- Creativity -->
          <div class="badge-card creativity" data-badge="creativity">
            <div class="badge-icon">üé®</div>
            <div class="badge-name">Creative Thinker</div>
            <div class="badge-description">
              Found innovative solutions to problems and brought imaginative ideas to the table.
            </div>
            <div class="badge-skill">Social-Emotional Skill: Creativity</div>
          </div>

          <!-- Problem Solving -->
          <div class="badge-card problem-solving" data-badge="problemSolving">
            <div class="badge-icon">üß©</div>
            <div class="badge-name">Puzzle Master</div>
            <div class="badge-description">
              Analyzed complex situations, identified patterns, and developed effective strategies.
            </div>
            <div class="badge-skill">Social-Emotional Skill: Problem Solving</div>
          </div>

          <!-- Empathy -->
          <div class="badge-card empathy" data-badge="empathy">
            <div class="badge-icon">üíù</div>
            <div class="badge-name">Empathetic Soul</div>
            <div class="badge-description">
              Showed understanding and compassion for others' perspectives and feelings.
            </div>
            <div class="badge-skill">Social-Emotional Skill: Empathy</div>
          </div>

          <!-- Communication -->
          <div class="badge-card communication" data-badge="communication">
            <div class="badge-icon">üí¨</div>
            <div class="badge-name">Eloquent Speaker</div>
            <div class="badge-description">
              Communicated clearly, listened actively, and facilitated productive discussions.
            </div>
            <div class="badge-skill">Social-Emotional Skill: Communication</div>
          </div>

          <!-- Courage -->
          <div class="badge-card courage" data-badge="courage">
            <div class="badge-icon">üõ°Ô∏è</div>
            <div class="badge-name">Brave Heart</div>
            <div class="badge-description">
              Faced fears, took calculated risks, and stood up for what's right.
            </div>
            <div class="badge-skill">Social-Emotional Skill: Courage</div>
          </div>

          <!-- Wisdom -->
          <div class="badge-card wisdom" data-badge="wisdom">
            <div class="badge-icon">üìú</div>
            <div class="badge-name">Wise Sage</div>
            <div class="badge-description">
              Applied knowledge thoughtfully, learned from experience, and shared insights with others.
            </div>
            <div class="badge-skill">Social-Emotional Skill: Wisdom</div>
          </div>
        </div>
      </div>

      <div class="footer">
        <p>
          <strong>LoreCard</strong> is powered by <strong>LearnCard</strong> - verifiable credentials for the gaming community.
        </p>
        <p style="margin-top: 8px; font-size: 0.85rem;">
          Badges are issued as secure, portable verifiable credentials that players own forever.
        </p>
      </div>
    </div>
  </div>

  <!-- Config variables for the module script -->
  <script define:vars={{ config }}>
    window.__LORECARD_CONFIG = config;
  </script>

  <script>
    import { createPartnerConnect } from '@learncard/partner-connect';

    // Configuration
    const CONFIG = window.__LORECARD_CONFIG;
    const LEARNCARD_HOST_ORIGIN = CONFIG.learnCardHostOrigin;

    // Initialize the LearnCard Partner Connect SDK
    const learnCard = createPartnerConnect({
      hostOrigin: LEARNCARD_HOST_ORIGIN
    });

    // DOM Elements
    const statusBox = document.getElementById('status-box');
    const statusText = document.getElementById('status-text');
    const badgeSection = document.getElementById('badge-section');
    const badgeCards = document.querySelectorAll('.badge-card');

    // Update status UI
    function updateStatus(message, type = 'info') {
      statusText.textContent = message;
      statusBox.className = `status-box ${type}`;
      
      if (type === 'success') {
        badgeSection.classList.remove('hidden');
      } else if (type === 'error') {
        badgeSection.classList.add('hidden');
      }
    }

    // Initialize - Check authentication
    async function initialize() {
      updateStatus('Verifying Game Master credentials...', 'info');

      try {
        const identity = await learnCard.requestIdentity();
        console.log('Game Master authenticated:', identity.user.did);
        
        updateStatus('Welcome, Game Master! Select a badge to award to your players.', 'success');
      } catch (error) {
        if (error.code === 'LC_UNAUTHENTICATED') {
          updateStatus(
            'Please log into your LearnCard account to award badges.',
            'error'
          );
        } else {
          updateStatus(
            `Authentication Error: ${error.message || 'Unable to connect to LearnCard.'}`,
            'error'
          );
        }
      }
    }

    // Award badge to player(s)
    async function awardBadge(badgeType, badgeName) {
      updateStatus(`Preparing to award "${badgeName}" badge...`, 'info');

      // Get the template URI for this badge
      const templateId = CONFIG.badges[badgeType];

      if (!templateId) {
        updateStatus(`Error: Badge template not configured for ${badgeName}`, 'error');
        return;
      }

      try {
        // Optional: Prompt for draft recipients
        // const recipientsInput = prompt(
        //   `Award "${badgeName}" badge to:\n\nEnter player DIDs (comma-separated) or leave empty to select in LearnCard:`,
        //   ''
        // );

        // // Allow user to cancel
        // if (recipientsInput === null) {
        //   updateStatus('Badge award cancelled.', 'info');
        //   setTimeout(() => {
        //     updateStatus('Welcome, Game Master! Select a badge to award to your players.', 'success');
        //   }, 2000);
        //   return;
        // }

        // const draftRecipients = recipientsInput
        //   ? recipientsInput.split(',').map(did => did.trim()).filter(Boolean)
        //   : [];

        // Initiate the template issue flow
        const response = await learnCard.initiateTemplateIssue(templateId);

        console.log('Badge award response:', response);

        if (response.issued) {
          updateStatus(
            `‚ú® Success! "${badgeName}" badge has been awarded to your players!`,
            'success'
          );
          
          // Reset after 3 seconds
          setTimeout(() => {
            updateStatus('Welcome, Game Master! Select a badge to award to your players.', 'success');
          }, 3000);
        } else {
          updateStatus('Badge award was cancelled.', 'info');
          setTimeout(() => {
            updateStatus('Welcome, Game Master! Select a badge to award to your players.', 'success');
          }, 2000);
        }
      } catch (error) {
        console.error('Badge award error:', error);
        
        let errorMessage = 'Failed to award badge.';
        
        if (error.code === 'UNAUTHORIZED') {
          errorMessage = `You are not authorized to award this badge. Please ensure you're an admin of the "${badgeName}" template.`;
        } else if (error.code === 'TEMPLATE_NOT_FOUND') {
          errorMessage = `Badge template not found. Please check your configuration.`;
        } else if (error.message) {
          errorMessage = `Error: ${error.message}`;
        }
        
        updateStatus(errorMessage, 'error');
        
        setTimeout(() => {
          updateStatus('Welcome, Game Master! Select a badge to award to your players.', 'success');
        }, 4000);
      }
    }

    // Badge names for display
    const badgeNames = {
      teamwork: 'Teamwork Champion',
      leadership: 'Natural Leader',
      creativity: 'Creative Thinker',
      problemSolving: 'Puzzle Master',
      empathy: 'Empathetic Soul',
      communication: 'Eloquent Speaker',
      courage: 'Brave Heart',
      wisdom: 'Wise Sage'
    };

    // Attach click handlers to all badge cards
    badgeCards.forEach(card => {
      card.addEventListener('click', () => {
        const badgeType = card.dataset.badge;
        const badgeName = badgeNames[badgeType];
        
        if (badgeType && badgeName) {
          awardBadge(badgeType, badgeName);
        }
      });
    });

    // Initialize on page load
    window.addEventListener('DOMContentLoaded', initialize);
  </script>
</body>
</html>
