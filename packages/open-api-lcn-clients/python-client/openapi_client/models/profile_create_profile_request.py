# coding: utf-8

"""
    LearnCloud Network API

    API for interacting with LearnCloud Network

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.boost_get_boost_recipients200_response_inner_to_display import BoostGetBoostRecipients200ResponseInnerToDisplay
from typing import Optional, Set
from typing_extensions import Self

class ProfileCreateProfileRequest(BaseModel):
    """
    ProfileCreateProfileRequest
    """ # noqa: E501
    profile_id: Annotated[str, Field(min_length=3, strict=True, max_length=40)] = Field(description="Unique, URL-safe identifier for the profile.", alias="profileId")
    display_name: Optional[StrictStr] = Field(default='', description="Human-readable display name for the profile.", alias="displayName")
    short_bio: Optional[StrictStr] = Field(default='', description="Short bio for the profile.", alias="shortBio")
    bio: Optional[StrictStr] = Field(default='', description="Longer bio for the profile.")
    is_private: Optional[StrictBool] = Field(default=None, description="Whether the profile is private or not and shows up in search results.", alias="isPrivate")
    email: Optional[StrictStr] = Field(default=None, description="Contact email address for the profile.")
    image: Optional[StrictStr] = Field(default=None, description="Profile image URL for the profile.")
    hero_image: Optional[StrictStr] = Field(default=None, description="Hero image URL for the profile.", alias="heroImage")
    website_link: Optional[StrictStr] = Field(default=None, description="Website link for the profile.", alias="websiteLink")
    type: Optional[StrictStr] = Field(default=None, description="Profile type: e.g. \"person\", \"organization\", \"service\".")
    notifications_webhook: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="URL to send notifications to.", alias="notificationsWebhook")
    display: Optional[BoostGetBoostRecipients200ResponseInnerToDisplay] = None
    role: Optional[StrictStr] = Field(default='', description="Role of the profile: e.g. \"teacher\", \"student\".")
    dob: Optional[StrictStr] = Field(default='', description="Date of birth of the profile: e.g. \"1990-01-01\".")
    __properties: ClassVar[List[str]] = ["profileId", "displayName", "shortBio", "bio", "isPrivate", "email", "image", "heroImage", "websiteLink", "type", "notificationsWebhook", "display", "role", "dob"]

    @field_validator('notifications_webhook')
    def notifications_webhook_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^http", value):
            raise ValueError(r"must validate the regular expression /^http/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProfileCreateProfileRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of display
        if self.display:
            _dict['display'] = self.display.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProfileCreateProfileRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "profileId": obj.get("profileId"),
            "displayName": obj.get("displayName") if obj.get("displayName") is not None else '',
            "shortBio": obj.get("shortBio") if obj.get("shortBio") is not None else '',
            "bio": obj.get("bio") if obj.get("bio") is not None else '',
            "isPrivate": obj.get("isPrivate"),
            "email": obj.get("email"),
            "image": obj.get("image"),
            "heroImage": obj.get("heroImage"),
            "websiteLink": obj.get("websiteLink"),
            "type": obj.get("type"),
            "notificationsWebhook": obj.get("notificationsWebhook"),
            "display": BoostGetBoostRecipients200ResponseInnerToDisplay.from_dict(obj["display"]) if obj.get("display") is not None else None,
            "role": obj.get("role") if obj.get("role") is not None else '',
            "dob": obj.get("dob") if obj.get("dob") is not None else ''
        })
        return _obj


