# coding: utf-8

"""
    LearnCloud Network API

    API for interacting with LearnCloud Network

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.boost_send_boost_request_credential_any_of_context_inner import BoostSendBoostRequestCredentialAnyOfContextInner
from openapi_client.models.boost_send_boost_request_credential_any_of_issuer_any_of_type import BoostSendBoostRequestCredentialAnyOfIssuerAnyOfType
from openapi_client.models.boost_send_boost_request_credential_any_of_proof import BoostSendBoostRequestCredentialAnyOfProof
from openapi_client.models.did_metadata_add_did_metadata_request_service_inner import DidMetadataAddDidMetadataRequestServiceInner
from openapi_client.models.did_metadata_add_did_metadata_request_verification_method_inner import DidMetadataAddDidMetadataRequestVerificationMethodInner
from typing import Optional, Set
from typing_extensions import Self

class DidMetadataGetMyDidMetadata200ResponseInner(BaseModel):
    """
    DidMetadataGetMyDidMetadata200ResponseInner
    """ # noqa: E501
    context: Optional[List[BoostSendBoostRequestCredentialAnyOfContextInner]] = Field(default=None, alias="@context")
    id: StrictStr
    also_known_as: Optional[StrictStr] = Field(default=None, alias="alsoKnownAs")
    controller: Optional[BoostSendBoostRequestCredentialAnyOfIssuerAnyOfType] = None
    verification_method: Optional[List[DidMetadataAddDidMetadataRequestVerificationMethodInner]] = Field(default=None, alias="verificationMethod")
    authentication: Optional[List[DidMetadataAddDidMetadataRequestVerificationMethodInner]] = None
    assertion_method: Optional[List[DidMetadataAddDidMetadataRequestVerificationMethodInner]] = Field(default=None, alias="assertionMethod")
    key_agreement: Optional[List[DidMetadataAddDidMetadataRequestVerificationMethodInner]] = Field(default=None, alias="keyAgreement")
    capability_invocation: Optional[List[DidMetadataAddDidMetadataRequestVerificationMethodInner]] = Field(default=None, alias="capabilityInvocation")
    capability_delegation: Optional[List[DidMetadataAddDidMetadataRequestVerificationMethodInner]] = Field(default=None, alias="capabilityDelegation")
    public_key: Optional[List[DidMetadataAddDidMetadataRequestVerificationMethodInner]] = Field(default=None, alias="publicKey")
    service: Optional[List[DidMetadataAddDidMetadataRequestServiceInner]] = None
    proof: Optional[BoostSendBoostRequestCredentialAnyOfProof] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["@context", "id", "alsoKnownAs", "controller", "verificationMethod", "authentication", "assertionMethod", "keyAgreement", "capabilityInvocation", "capabilityDelegation", "publicKey", "service", "proof"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DidMetadataGetMyDidMetadata200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in context (list)
        _items = []
        if self.context:
            for _item_context in self.context:
                if _item_context:
                    _items.append(_item_context.to_dict())
            _dict['@context'] = _items
        # override the default output from pydantic by calling `to_dict()` of controller
        if self.controller:
            _dict['controller'] = self.controller.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in verification_method (list)
        _items = []
        if self.verification_method:
            for _item_verification_method in self.verification_method:
                if _item_verification_method:
                    _items.append(_item_verification_method.to_dict())
            _dict['verificationMethod'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in authentication (list)
        _items = []
        if self.authentication:
            for _item_authentication in self.authentication:
                if _item_authentication:
                    _items.append(_item_authentication.to_dict())
            _dict['authentication'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in assertion_method (list)
        _items = []
        if self.assertion_method:
            for _item_assertion_method in self.assertion_method:
                if _item_assertion_method:
                    _items.append(_item_assertion_method.to_dict())
            _dict['assertionMethod'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in key_agreement (list)
        _items = []
        if self.key_agreement:
            for _item_key_agreement in self.key_agreement:
                if _item_key_agreement:
                    _items.append(_item_key_agreement.to_dict())
            _dict['keyAgreement'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in capability_invocation (list)
        _items = []
        if self.capability_invocation:
            for _item_capability_invocation in self.capability_invocation:
                if _item_capability_invocation:
                    _items.append(_item_capability_invocation.to_dict())
            _dict['capabilityInvocation'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in capability_delegation (list)
        _items = []
        if self.capability_delegation:
            for _item_capability_delegation in self.capability_delegation:
                if _item_capability_delegation:
                    _items.append(_item_capability_delegation.to_dict())
            _dict['capabilityDelegation'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in public_key (list)
        _items = []
        if self.public_key:
            for _item_public_key in self.public_key:
                if _item_public_key:
                    _items.append(_item_public_key.to_dict())
            _dict['publicKey'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in service (list)
        _items = []
        if self.service:
            for _item_service in self.service:
                if _item_service:
                    _items.append(_item_service.to_dict())
            _dict['service'] = _items
        # override the default output from pydantic by calling `to_dict()` of proof
        if self.proof:
            _dict['proof'] = self.proof.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DidMetadataGetMyDidMetadata200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "@context": [BoostSendBoostRequestCredentialAnyOfContextInner.from_dict(_item) for _item in obj["@context"]] if obj.get("@context") is not None else None,
            "id": obj.get("id"),
            "alsoKnownAs": obj.get("alsoKnownAs"),
            "controller": BoostSendBoostRequestCredentialAnyOfIssuerAnyOfType.from_dict(obj["controller"]) if obj.get("controller") is not None else None,
            "verificationMethod": [DidMetadataAddDidMetadataRequestVerificationMethodInner.from_dict(_item) for _item in obj["verificationMethod"]] if obj.get("verificationMethod") is not None else None,
            "authentication": [DidMetadataAddDidMetadataRequestVerificationMethodInner.from_dict(_item) for _item in obj["authentication"]] if obj.get("authentication") is not None else None,
            "assertionMethod": [DidMetadataAddDidMetadataRequestVerificationMethodInner.from_dict(_item) for _item in obj["assertionMethod"]] if obj.get("assertionMethod") is not None else None,
            "keyAgreement": [DidMetadataAddDidMetadataRequestVerificationMethodInner.from_dict(_item) for _item in obj["keyAgreement"]] if obj.get("keyAgreement") is not None else None,
            "capabilityInvocation": [DidMetadataAddDidMetadataRequestVerificationMethodInner.from_dict(_item) for _item in obj["capabilityInvocation"]] if obj.get("capabilityInvocation") is not None else None,
            "capabilityDelegation": [DidMetadataAddDidMetadataRequestVerificationMethodInner.from_dict(_item) for _item in obj["capabilityDelegation"]] if obj.get("capabilityDelegation") is not None else None,
            "publicKey": [DidMetadataAddDidMetadataRequestVerificationMethodInner.from_dict(_item) for _item in obj["publicKey"]] if obj.get("publicKey") is not None else None,
            "service": [DidMetadataAddDidMetadataRequestServiceInner.from_dict(_item) for _item in obj["service"]] if obj.get("service") is not None else None,
            "proof": BoostSendBoostRequestCredentialAnyOfProof.from_dict(obj["proof"]) if obj.get("proof") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


