# coding: utf-8

"""
    LearnCloud Network API

    API for interacting with LearnCloud Network

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.boost_get_boosts_request_query import BoostGetBoostsRequestQuery
from openapi_client.models.boost_get_paginated_boost_recipients_request_query import BoostGetPaginatedBoostRecipientsRequestQuery
from typing import Optional, Set
from typing_extensions import Self

class BoostGetBoostRecipientsWithChildrenCountRequest(BaseModel):
    """
    BoostGetBoostRecipientsWithChildrenCountRequest
    """ # noqa: E501
    uri: StrictStr
    include_unaccepted_boosts: Optional[StrictBool] = Field(default=True, alias="includeUnacceptedBoosts")
    number_of_generations: Optional[Union[StrictFloat, StrictInt]] = Field(default=1, alias="numberOfGenerations")
    boost_query: Optional[BoostGetBoostsRequestQuery] = Field(default=None, alias="boostQuery")
    profile_query: Optional[BoostGetPaginatedBoostRecipientsRequestQuery] = Field(default=None, alias="profileQuery")
    __properties: ClassVar[List[str]] = ["uri", "includeUnacceptedBoosts", "numberOfGenerations", "boostQuery", "profileQuery"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BoostGetBoostRecipientsWithChildrenCountRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of boost_query
        if self.boost_query:
            _dict['boostQuery'] = self.boost_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of profile_query
        if self.profile_query:
            _dict['profileQuery'] = self.profile_query.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BoostGetBoostRecipientsWithChildrenCountRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uri": obj.get("uri"),
            "includeUnacceptedBoosts": obj.get("includeUnacceptedBoosts") if obj.get("includeUnacceptedBoosts") is not None else True,
            "numberOfGenerations": obj.get("numberOfGenerations") if obj.get("numberOfGenerations") is not None else 1,
            "boostQuery": BoostGetBoostsRequestQuery.from_dict(obj["boostQuery"]) if obj.get("boostQuery") is not None else None,
            "profileQuery": BoostGetPaginatedBoostRecipientsRequestQuery.from_dict(obj["profileQuery"]) if obj.get("profileQuery") is not None else None
        })
        return _obj


