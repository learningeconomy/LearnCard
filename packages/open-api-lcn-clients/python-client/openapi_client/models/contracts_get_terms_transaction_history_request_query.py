# coding: utf-8

"""
    LearnCard Network Profile Service API

    This is the API for interacting with a LearnCard Network Profile Service

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.contracts_get_terms_transaction_history_request_query_action import ContractsGetTermsTransactionHistoryRequestQueryAction
from openapi_client.models.contracts_get_terms_transaction_history_request_query_date import ContractsGetTermsTransactionHistoryRequestQueryDate
from openapi_client.models.contracts_get_terms_transaction_history_request_query_terms import ContractsGetTermsTransactionHistoryRequestQueryTerms
from typing import Optional, Set
from typing_extensions import Self

class ContractsGetTermsTransactionHistoryRequestQuery(BaseModel):
    """
    ContractsGetTermsTransactionHistoryRequestQuery
    """ # noqa: E501
    terms: Optional[ContractsGetTermsTransactionHistoryRequestQueryTerms] = None
    action: Optional[ContractsGetTermsTransactionHistoryRequestQueryAction] = None
    var_date: Optional[ContractsGetTermsTransactionHistoryRequestQueryDate] = Field(default=None, alias="date")
    expires_at: Optional[ContractsGetTermsTransactionHistoryRequestQueryDate] = Field(default=None, alias="expiresAt")
    one_time: Optional[StrictBool] = Field(default=None, alias="oneTime")
    __properties: ClassVar[List[str]] = ["terms", "action", "date", "expiresAt", "oneTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContractsGetTermsTransactionHistoryRequestQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of terms
        if self.terms:
            _dict['terms'] = self.terms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of action
        if self.action:
            _dict['action'] = self.action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_date
        if self.var_date:
            _dict['date'] = self.var_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expires_at
        if self.expires_at:
            _dict['expiresAt'] = self.expires_at.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContractsGetTermsTransactionHistoryRequestQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "terms": ContractsGetTermsTransactionHistoryRequestQueryTerms.from_dict(obj["terms"]) if obj.get("terms") is not None else None,
            "action": ContractsGetTermsTransactionHistoryRequestQueryAction.from_dict(obj["action"]) if obj.get("action") is not None else None,
            "date": ContractsGetTermsTransactionHistoryRequestQueryDate.from_dict(obj["date"]) if obj.get("date") is not None else None,
            "expiresAt": ContractsGetTermsTransactionHistoryRequestQueryDate.from_dict(obj["expiresAt"]) if obj.get("expiresAt") is not None else None,
            "oneTime": obj.get("oneTime")
        })
        return _obj


