# coding: utf-8

"""
    LearnCloud Network API

    API for interacting with LearnCloud Network

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.boost_get_boosts_request_query_uri import BoostGetBoostsRequestQueryUri
from typing import Optional, Set
from typing_extensions import Self

class ClaimHookGetClaimHooksForBoostRequestQueryDataPermissions(BaseModel):
    """
    ClaimHookGetClaimHooksForBoostRequestQueryDataPermissions
    """ # noqa: E501
    role: Optional[BoostGetBoostsRequestQueryUri] = None
    can_edit: Optional[StrictBool] = Field(default=None, alias="canEdit")
    can_issue: Optional[StrictBool] = Field(default=None, alias="canIssue")
    can_revoke: Optional[StrictBool] = Field(default=None, alias="canRevoke")
    can_manage_permissions: Optional[StrictBool] = Field(default=None, alias="canManagePermissions")
    can_issue_children: Optional[BoostGetBoostsRequestQueryUri] = Field(default=None, alias="canIssueChildren")
    can_create_children: Optional[BoostGetBoostsRequestQueryUri] = Field(default=None, alias="canCreateChildren")
    can_edit_children: Optional[BoostGetBoostsRequestQueryUri] = Field(default=None, alias="canEditChildren")
    can_revoke_children: Optional[BoostGetBoostsRequestQueryUri] = Field(default=None, alias="canRevokeChildren")
    can_manage_children_permissions: Optional[BoostGetBoostsRequestQueryUri] = Field(default=None, alias="canManageChildrenPermissions")
    can_manage_children_profiles: Optional[StrictBool] = Field(default=None, alias="canManageChildrenProfiles")
    can_view_analytics: Optional[StrictBool] = Field(default=None, alias="canViewAnalytics")
    __properties: ClassVar[List[str]] = ["role", "canEdit", "canIssue", "canRevoke", "canManagePermissions", "canIssueChildren", "canCreateChildren", "canEditChildren", "canRevokeChildren", "canManageChildrenPermissions", "canManageChildrenProfiles", "canViewAnalytics"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClaimHookGetClaimHooksForBoostRequestQueryDataPermissions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of role
        if self.role:
            _dict['role'] = self.role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of can_issue_children
        if self.can_issue_children:
            _dict['canIssueChildren'] = self.can_issue_children.to_dict()
        # override the default output from pydantic by calling `to_dict()` of can_create_children
        if self.can_create_children:
            _dict['canCreateChildren'] = self.can_create_children.to_dict()
        # override the default output from pydantic by calling `to_dict()` of can_edit_children
        if self.can_edit_children:
            _dict['canEditChildren'] = self.can_edit_children.to_dict()
        # override the default output from pydantic by calling `to_dict()` of can_revoke_children
        if self.can_revoke_children:
            _dict['canRevokeChildren'] = self.can_revoke_children.to_dict()
        # override the default output from pydantic by calling `to_dict()` of can_manage_children_permissions
        if self.can_manage_children_permissions:
            _dict['canManageChildrenPermissions'] = self.can_manage_children_permissions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClaimHookGetClaimHooksForBoostRequestQueryDataPermissions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "role": BoostGetBoostsRequestQueryUri.from_dict(obj["role"]) if obj.get("role") is not None else None,
            "canEdit": obj.get("canEdit"),
            "canIssue": obj.get("canIssue"),
            "canRevoke": obj.get("canRevoke"),
            "canManagePermissions": obj.get("canManagePermissions"),
            "canIssueChildren": BoostGetBoostsRequestQueryUri.from_dict(obj["canIssueChildren"]) if obj.get("canIssueChildren") is not None else None,
            "canCreateChildren": BoostGetBoostsRequestQueryUri.from_dict(obj["canCreateChildren"]) if obj.get("canCreateChildren") is not None else None,
            "canEditChildren": BoostGetBoostsRequestQueryUri.from_dict(obj["canEditChildren"]) if obj.get("canEditChildren") is not None else None,
            "canRevokeChildren": BoostGetBoostsRequestQueryUri.from_dict(obj["canRevokeChildren"]) if obj.get("canRevokeChildren") is not None else None,
            "canManageChildrenPermissions": BoostGetBoostsRequestQueryUri.from_dict(obj["canManageChildrenPermissions"]) if obj.get("canManageChildrenPermissions") is not None else None,
            "canManageChildrenProfiles": obj.get("canManageChildrenProfiles"),
            "canViewAnalytics": obj.get("canViewAnalytics")
        })
        return _obj


