# coding: utf-8

"""
    LearnCard Network Profile Service API

    This is the API for interacting with a LearnCard Network Profile Service

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.boost_send_boost_request_credential_any_of_issuer_any_of_address_geo import BoostSendBoostRequestCredentialAnyOfIssuerAnyOfAddressGeo
from openapi_client.models.boost_send_boost_request_credential_any_of_issuer_any_of_address_type import BoostSendBoostRequestCredentialAnyOfIssuerAnyOfAddressType
from typing import Optional, Set
from typing_extensions import Self

class BoostSendBoostRequestCredentialAnyOfIssuerAnyOfAddress(BaseModel):
    """
    BoostSendBoostRequestCredentialAnyOfIssuerAnyOfAddress
    """ # noqa: E501
    type: BoostSendBoostRequestCredentialAnyOfIssuerAnyOfAddressType
    address_country: Optional[StrictStr] = Field(default=None, alias="addressCountry")
    address_country_code: Optional[StrictStr] = Field(default=None, alias="addressCountryCode")
    address_region: Optional[StrictStr] = Field(default=None, alias="addressRegion")
    address_locality: Optional[StrictStr] = Field(default=None, alias="addressLocality")
    street_address: Optional[StrictStr] = Field(default=None, alias="streetAddress")
    post_office_box_number: Optional[StrictStr] = Field(default=None, alias="postOfficeBoxNumber")
    postal_code: Optional[StrictStr] = Field(default=None, alias="postalCode")
    geo: Optional[BoostSendBoostRequestCredentialAnyOfIssuerAnyOfAddressGeo] = None
    __properties: ClassVar[List[str]] = ["type", "addressCountry", "addressCountryCode", "addressRegion", "addressLocality", "streetAddress", "postOfficeBoxNumber", "postalCode", "geo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BoostSendBoostRequestCredentialAnyOfIssuerAnyOfAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geo
        if self.geo:
            _dict['geo'] = self.geo.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BoostSendBoostRequestCredentialAnyOfIssuerAnyOfAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": BoostSendBoostRequestCredentialAnyOfIssuerAnyOfAddressType.from_dict(obj["type"]) if obj.get("type") is not None else None,
            "addressCountry": obj.get("addressCountry"),
            "addressCountryCode": obj.get("addressCountryCode"),
            "addressRegion": obj.get("addressRegion"),
            "addressLocality": obj.get("addressLocality"),
            "streetAddress": obj.get("streetAddress"),
            "postOfficeBoxNumber": obj.get("postOfficeBoxNumber"),
            "postalCode": obj.get("postalCode"),
            "geo": BoostSendBoostRequestCredentialAnyOfIssuerAnyOfAddressGeo.from_dict(obj["geo"]) if obj.get("geo") is not None else None
        })
        return _obj


