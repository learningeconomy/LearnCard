# coding: utf-8

"""
    LearnCloud Network API

    API for interacting with LearnCloud Network

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.boost_get_boost_recipients200_response_inner_to import BoostGetBoostRecipients200ResponseInnerTo
from openapi_client.models.storage_resolve200_response_any_of_any_of import StorageResolve200ResponseAnyOfAnyOf
from typing import Optional, Set
from typing_extensions import Self

class ContractsGetConsentFlowContracts200ResponseRecordsInner(BaseModel):
    """
    ContractsGetConsentFlowContracts200ResponseRecordsInner
    """ # noqa: E501
    contract: StorageResolve200ResponseAnyOfAnyOf
    name: StrictStr
    subtitle: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    reason_for_accessing: Optional[StrictStr] = Field(default=None, alias="reasonForAccessing")
    image: Optional[StrictStr] = None
    uri: StrictStr
    needs_guardian_consent: Optional[StrictBool] = Field(default=None, alias="needsGuardianConsent")
    redirect_url: Optional[StrictStr] = Field(default=None, alias="redirectUrl")
    front_door_boost_uri: Optional[StrictStr] = Field(default=None, alias="frontDoorBoostUri")
    created_at: StrictStr = Field(alias="createdAt")
    updated_at: StrictStr = Field(alias="updatedAt")
    expires_at: Optional[StrictStr] = Field(default=None, alias="expiresAt")
    auto_boosts: Optional[List[StrictStr]] = Field(default=None, alias="autoBoosts")
    writers: Optional[List[BoostGetBoostRecipients200ResponseInnerTo]] = None
    __properties: ClassVar[List[str]] = ["contract", "name", "subtitle", "description", "reasonForAccessing", "image", "uri", "needsGuardianConsent", "redirectUrl", "frontDoorBoostUri", "createdAt", "updatedAt", "expiresAt", "autoBoosts", "writers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContractsGetConsentFlowContracts200ResponseRecordsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of contract
        if self.contract:
            _dict['contract'] = self.contract.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in writers (list)
        _items = []
        if self.writers:
            for _item_writers in self.writers:
                if _item_writers:
                    _items.append(_item_writers.to_dict())
            _dict['writers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContractsGetConsentFlowContracts200ResponseRecordsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contract": StorageResolve200ResponseAnyOfAnyOf.from_dict(obj["contract"]) if obj.get("contract") is not None else None,
            "name": obj.get("name"),
            "subtitle": obj.get("subtitle"),
            "description": obj.get("description"),
            "reasonForAccessing": obj.get("reasonForAccessing"),
            "image": obj.get("image"),
            "uri": obj.get("uri"),
            "needsGuardianConsent": obj.get("needsGuardianConsent"),
            "redirectUrl": obj.get("redirectUrl"),
            "frontDoorBoostUri": obj.get("frontDoorBoostUri"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "expiresAt": obj.get("expiresAt"),
            "autoBoosts": obj.get("autoBoosts"),
            "writers": [BoostGetBoostRecipients200ResponseInnerTo.from_dict(_item) for _item in obj["writers"]] if obj.get("writers") is not None else None
        })
        return _obj


