# coding: utf-8

"""
    LearnCard Network Profile Service API

    This is the API for interacting with a LearnCard Network Profile Service

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.boost_send_boost_request_credential_any_of_issuer_any_of_address import BoostSendBoostRequestCredentialAnyOfIssuerAnyOfAddress
from openapi_client.models.boost_send_boost_request_credential_any_of_issuer_any_of_image import BoostSendBoostRequestCredentialAnyOfIssuerAnyOfImage
from openapi_client.models.boost_send_boost_request_credential_any_of_issuer_any_of_other_identifier_inner import BoostSendBoostRequestCredentialAnyOfIssuerAnyOfOtherIdentifierInner
from openapi_client.models.boost_send_boost_request_credential_any_of_issuer_any_of_type import BoostSendBoostRequestCredentialAnyOfIssuerAnyOfType
from typing import Optional, Set
from typing_extensions import Self

class BoostSendBoostRequestCredentialAnyOfIssuerAnyOf(BaseModel):
    """
    BoostSendBoostRequestCredentialAnyOfIssuerAnyOf
    """ # noqa: E501
    id: Optional[StrictStr] = None
    type: Optional[BoostSendBoostRequestCredentialAnyOfIssuerAnyOfType] = None
    name: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    phone: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    endorsement: Optional[List[StrictStr]] = None
    image: Optional[BoostSendBoostRequestCredentialAnyOfIssuerAnyOfImage] = None
    email: Optional[StrictStr] = None
    address: Optional[BoostSendBoostRequestCredentialAnyOfIssuerAnyOfAddress] = None
    other_identifier: Optional[List[BoostSendBoostRequestCredentialAnyOfIssuerAnyOfOtherIdentifierInner]] = Field(default=None, alias="otherIdentifier")
    official: Optional[StrictStr] = None
    parent_org: Optional[Any] = Field(default=None, alias="parentOrg")
    family_name: Optional[StrictStr] = Field(default=None, alias="familyName")
    given_name: Optional[StrictStr] = Field(default=None, alias="givenName")
    additional_name: Optional[StrictStr] = Field(default=None, alias="additionalName")
    patronymic_name: Optional[StrictStr] = Field(default=None, alias="patronymicName")
    honorific_prefix: Optional[StrictStr] = Field(default=None, alias="honorificPrefix")
    honorific_suffix: Optional[StrictStr] = Field(default=None, alias="honorificSuffix")
    family_name_prefix: Optional[StrictStr] = Field(default=None, alias="familyNamePrefix")
    date_of_birth: Optional[StrictStr] = Field(default=None, alias="dateOfBirth")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "type", "name", "url", "phone", "description", "endorsement", "image", "email", "address", "otherIdentifier", "official", "parentOrg", "familyName", "givenName", "additionalName", "patronymicName", "honorificPrefix", "honorificSuffix", "familyNamePrefix", "dateOfBirth"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BoostSendBoostRequestCredentialAnyOfIssuerAnyOf from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in other_identifier (list)
        _items = []
        if self.other_identifier:
            for _item_other_identifier in self.other_identifier:
                if _item_other_identifier:
                    _items.append(_item_other_identifier.to_dict())
            _dict['otherIdentifier'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if parent_org (nullable) is None
        # and model_fields_set contains the field
        if self.parent_org is None and "parent_org" in self.model_fields_set:
            _dict['parentOrg'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BoostSendBoostRequestCredentialAnyOfIssuerAnyOf from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": BoostSendBoostRequestCredentialAnyOfIssuerAnyOfType.from_dict(obj["type"]) if obj.get("type") is not None else None,
            "name": obj.get("name"),
            "url": obj.get("url"),
            "phone": obj.get("phone"),
            "description": obj.get("description"),
            "endorsement": obj.get("endorsement"),
            "image": BoostSendBoostRequestCredentialAnyOfIssuerAnyOfImage.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "email": obj.get("email"),
            "address": BoostSendBoostRequestCredentialAnyOfIssuerAnyOfAddress.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "otherIdentifier": [BoostSendBoostRequestCredentialAnyOfIssuerAnyOfOtherIdentifierInner.from_dict(_item) for _item in obj["otherIdentifier"]] if obj.get("otherIdentifier") is not None else None,
            "official": obj.get("official"),
            "parentOrg": obj.get("parentOrg"),
            "familyName": obj.get("familyName"),
            "givenName": obj.get("givenName"),
            "additionalName": obj.get("additionalName"),
            "patronymicName": obj.get("patronymicName"),
            "honorificPrefix": obj.get("honorificPrefix"),
            "honorificSuffix": obj.get("honorificSuffix"),
            "familyNamePrefix": obj.get("familyNamePrefix"),
            "dateOfBirth": obj.get("dateOfBirth")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


