# coding: utf-8

"""
    LearnCloud Network API

    API for interacting with LearnCloud Network

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BoostGetBoostRecipients200ResponseInnerToDisplay(BaseModel):
    """
    Display settings for the profile.
    """ # noqa: E501
    background_color: Optional[StrictStr] = Field(default=None, alias="backgroundColor")
    background_image: Optional[StrictStr] = Field(default=None, alias="backgroundImage")
    fade_background_image: Optional[StrictBool] = Field(default=None, alias="fadeBackgroundImage")
    repeat_background_image: Optional[StrictBool] = Field(default=None, alias="repeatBackgroundImage")
    font_color: Optional[StrictStr] = Field(default=None, alias="fontColor")
    accent_color: Optional[StrictStr] = Field(default=None, alias="accentColor")
    accent_font_color: Optional[StrictStr] = Field(default=None, alias="accentFontColor")
    id_background_image: Optional[StrictStr] = Field(default=None, alias="idBackgroundImage")
    fade_id_background_image: Optional[StrictBool] = Field(default=None, alias="fadeIdBackgroundImage")
    id_background_color: Optional[StrictStr] = Field(default=None, alias="idBackgroundColor")
    repeat_id_background_image: Optional[StrictBool] = Field(default=None, alias="repeatIdBackgroundImage")
    __properties: ClassVar[List[str]] = ["backgroundColor", "backgroundImage", "fadeBackgroundImage", "repeatBackgroundImage", "fontColor", "accentColor", "accentFontColor", "idBackgroundImage", "fadeIdBackgroundImage", "idBackgroundColor", "repeatIdBackgroundImage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BoostGetBoostRecipients200ResponseInnerToDisplay from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BoostGetBoostRecipients200ResponseInnerToDisplay from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backgroundColor": obj.get("backgroundColor"),
            "backgroundImage": obj.get("backgroundImage"),
            "fadeBackgroundImage": obj.get("fadeBackgroundImage"),
            "repeatBackgroundImage": obj.get("repeatBackgroundImage"),
            "fontColor": obj.get("fontColor"),
            "accentColor": obj.get("accentColor"),
            "accentFontColor": obj.get("accentFontColor"),
            "idBackgroundImage": obj.get("idBackgroundImage"),
            "fadeIdBackgroundImage": obj.get("fadeIdBackgroundImage"),
            "idBackgroundColor": obj.get("idBackgroundColor"),
            "repeatIdBackgroundImage": obj.get("repeatIdBackgroundImage")
        })
        return _obj


