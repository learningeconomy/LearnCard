# coding: utf-8

"""
    LearnCard Network Profile Service API

    This is the API for interacting with a LearnCard Network Profile Service

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.boost_get_boosts_request_query_uri import BoostGetBoostsRequestQueryUri
from typing import Optional, Set
from typing_extensions import Self

class BoostGetChildrenProfileManagersRequestQuery(BaseModel):
    """
    BoostGetChildrenProfileManagersRequestQuery
    """ # noqa: E501
    id: Optional[BoostGetBoostsRequestQueryUri] = None
    display_name: Optional[BoostGetBoostsRequestQueryUri] = Field(default=None, alias="displayName")
    short_bio: Optional[BoostGetBoostsRequestQueryUri] = Field(default=None, alias="shortBio")
    bio: Optional[BoostGetBoostsRequestQueryUri] = None
    email: Optional[BoostGetBoostsRequestQueryUri] = None
    __properties: ClassVar[List[str]] = ["id", "displayName", "shortBio", "bio", "email"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BoostGetChildrenProfileManagersRequestQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of display_name
        if self.display_name:
            _dict['displayName'] = self.display_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of short_bio
        if self.short_bio:
            _dict['shortBio'] = self.short_bio.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bio
        if self.bio:
            _dict['bio'] = self.bio.to_dict()
        # override the default output from pydantic by calling `to_dict()` of email
        if self.email:
            _dict['email'] = self.email.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BoostGetChildrenProfileManagersRequestQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": BoostGetBoostsRequestQueryUri.from_dict(obj["id"]) if obj.get("id") is not None else None,
            "displayName": BoostGetBoostsRequestQueryUri.from_dict(obj["displayName"]) if obj.get("displayName") is not None else None,
            "shortBio": BoostGetBoostsRequestQueryUri.from_dict(obj["shortBio"]) if obj.get("shortBio") is not None else None,
            "bio": BoostGetBoostsRequestQueryUri.from_dict(obj["bio"]) if obj.get("bio") is not None else None,
            "email": BoostGetBoostsRequestQueryUri.from_dict(obj["email"]) if obj.get("email") is not None else None
        })
        return _obj


