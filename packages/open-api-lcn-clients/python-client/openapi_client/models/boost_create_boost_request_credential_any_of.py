# coding: utf-8

"""
    LearnCard Network Profile Service API

    This is the API for interacting with a LearnCard Network Profile Service

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.boost_send_boost_request_credential_any_of_context_inner import BoostSendBoostRequestCredentialAnyOfContextInner
from openapi_client.models.boost_send_boost_request_credential_any_of_credential_schema import BoostSendBoostRequestCredentialAnyOfCredentialSchema
from openapi_client.models.boost_send_boost_request_credential_any_of_credential_status import BoostSendBoostRequestCredentialAnyOfCredentialStatus
from openapi_client.models.boost_send_boost_request_credential_any_of_credential_subject import BoostSendBoostRequestCredentialAnyOfCredentialSubject
from openapi_client.models.boost_send_boost_request_credential_any_of_evidence import BoostSendBoostRequestCredentialAnyOfEvidence
from openapi_client.models.boost_send_boost_request_credential_any_of_issuer import BoostSendBoostRequestCredentialAnyOfIssuer
from openapi_client.models.boost_send_boost_request_credential_any_of_refresh_service import BoostSendBoostRequestCredentialAnyOfRefreshService
from openapi_client.models.boost_send_boost_request_credential_any_of_terms_of_use import BoostSendBoostRequestCredentialAnyOfTermsOfUse
from typing import Optional, Set
from typing_extensions import Self

class BoostCreateBoostRequestCredentialAnyOf(BaseModel):
    """
    BoostCreateBoostRequestCredentialAnyOf
    """ # noqa: E501
    context: List[BoostSendBoostRequestCredentialAnyOfContextInner] = Field(alias="@context")
    id: Optional[StrictStr] = None
    type: Annotated[List[StrictStr], Field(min_length=1)]
    issuer: BoostSendBoostRequestCredentialAnyOfIssuer
    credential_subject: BoostSendBoostRequestCredentialAnyOfCredentialSubject = Field(alias="credentialSubject")
    refresh_service: Optional[BoostSendBoostRequestCredentialAnyOfRefreshService] = Field(default=None, alias="refreshService")
    credential_schema: Optional[BoostSendBoostRequestCredentialAnyOfCredentialSchema] = Field(default=None, alias="credentialSchema")
    issuance_date: Optional[StrictStr] = Field(default=None, alias="issuanceDate")
    expiration_date: Optional[StrictStr] = Field(default=None, alias="expirationDate")
    credential_status: Optional[BoostSendBoostRequestCredentialAnyOfCredentialStatus] = Field(default=None, alias="credentialStatus")
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    valid_from: Optional[StrictStr] = Field(default=None, alias="validFrom")
    valid_until: Optional[StrictStr] = Field(default=None, alias="validUntil")
    status: Optional[BoostSendBoostRequestCredentialAnyOfCredentialStatus] = None
    terms_of_use: Optional[BoostSendBoostRequestCredentialAnyOfTermsOfUse] = Field(default=None, alias="termsOfUse")
    evidence: Optional[BoostSendBoostRequestCredentialAnyOfEvidence] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["@context", "id", "type", "issuer", "credentialSubject", "refreshService", "credentialSchema", "issuanceDate", "expirationDate", "credentialStatus", "name", "description", "validFrom", "validUntil", "status", "termsOfUse", "evidence"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BoostCreateBoostRequestCredentialAnyOf from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in context (list)
        _items = []
        if self.context:
            for _item_context in self.context:
                if _item_context:
                    _items.append(_item_context.to_dict())
            _dict['@context'] = _items
        # override the default output from pydantic by calling `to_dict()` of issuer
        if self.issuer:
            _dict['issuer'] = self.issuer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credential_subject
        if self.credential_subject:
            _dict['credentialSubject'] = self.credential_subject.to_dict()
        # override the default output from pydantic by calling `to_dict()` of refresh_service
        if self.refresh_service:
            _dict['refreshService'] = self.refresh_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credential_schema
        if self.credential_schema:
            _dict['credentialSchema'] = self.credential_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credential_status
        if self.credential_status:
            _dict['credentialStatus'] = self.credential_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of terms_of_use
        if self.terms_of_use:
            _dict['termsOfUse'] = self.terms_of_use.to_dict()
        # override the default output from pydantic by calling `to_dict()` of evidence
        if self.evidence:
            _dict['evidence'] = self.evidence.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BoostCreateBoostRequestCredentialAnyOf from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "@context": [BoostSendBoostRequestCredentialAnyOfContextInner.from_dict(_item) for _item in obj["@context"]] if obj.get("@context") is not None else None,
            "id": obj.get("id"),
            "type": obj.get("type"),
            "issuer": BoostSendBoostRequestCredentialAnyOfIssuer.from_dict(obj["issuer"]) if obj.get("issuer") is not None else None,
            "credentialSubject": BoostSendBoostRequestCredentialAnyOfCredentialSubject.from_dict(obj["credentialSubject"]) if obj.get("credentialSubject") is not None else None,
            "refreshService": BoostSendBoostRequestCredentialAnyOfRefreshService.from_dict(obj["refreshService"]) if obj.get("refreshService") is not None else None,
            "credentialSchema": BoostSendBoostRequestCredentialAnyOfCredentialSchema.from_dict(obj["credentialSchema"]) if obj.get("credentialSchema") is not None else None,
            "issuanceDate": obj.get("issuanceDate"),
            "expirationDate": obj.get("expirationDate"),
            "credentialStatus": BoostSendBoostRequestCredentialAnyOfCredentialStatus.from_dict(obj["credentialStatus"]) if obj.get("credentialStatus") is not None else None,
            "name": obj.get("name"),
            "description": obj.get("description"),
            "validFrom": obj.get("validFrom"),
            "validUntil": obj.get("validUntil"),
            "status": BoostSendBoostRequestCredentialAnyOfCredentialStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "termsOfUse": BoostSendBoostRequestCredentialAnyOfTermsOfUse.from_dict(obj["termsOfUse"]) if obj.get("termsOfUse") is not None else None,
            "evidence": BoostSendBoostRequestCredentialAnyOfEvidence.from_dict(obj["evidence"]) if obj.get("evidence") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


