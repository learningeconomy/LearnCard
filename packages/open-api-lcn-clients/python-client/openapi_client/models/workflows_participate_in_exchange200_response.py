# coding: utf-8

"""
    LearnCloud Network API

    API for interacting with LearnCloud Network

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.presentation_send_presentation_request_presentation_any_of import PresentationSendPresentationRequestPresentationAnyOf
from openapi_client.models.workflows_participate_in_exchange200_response_verifiable_presentation_request import WorkflowsParticipateInExchange200ResponseVerifiablePresentationRequest
from typing import Optional, Set
from typing_extensions import Self

class WorkflowsParticipateInExchange200Response(BaseModel):
    """
    WorkflowsParticipateInExchange200Response
    """ # noqa: E501
    verifiable_presentation: Optional[PresentationSendPresentationRequestPresentationAnyOf] = Field(default=None, alias="verifiablePresentation")
    verifiable_presentation_request: Optional[WorkflowsParticipateInExchange200ResponseVerifiablePresentationRequest] = Field(default=None, alias="verifiablePresentationRequest")
    redirect_url: Optional[StrictStr] = Field(default=None, alias="redirectUrl")
    __properties: ClassVar[List[str]] = ["verifiablePresentation", "verifiablePresentationRequest", "redirectUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkflowsParticipateInExchange200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of verifiable_presentation
        if self.verifiable_presentation:
            _dict['verifiablePresentation'] = self.verifiable_presentation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of verifiable_presentation_request
        if self.verifiable_presentation_request:
            _dict['verifiablePresentationRequest'] = self.verifiable_presentation_request.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkflowsParticipateInExchange200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "verifiablePresentation": PresentationSendPresentationRequestPresentationAnyOf.from_dict(obj["verifiablePresentation"]) if obj.get("verifiablePresentation") is not None else None,
            "verifiablePresentationRequest": WorkflowsParticipateInExchange200ResponseVerifiablePresentationRequest.from_dict(obj["verifiablePresentationRequest"]) if obj.get("verifiablePresentationRequest") is not None else None,
            "redirectUrl": obj.get("redirectUrl")
        })
        return _obj


