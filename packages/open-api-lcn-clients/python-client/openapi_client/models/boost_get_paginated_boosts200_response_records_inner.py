# coding: utf-8

"""
    LearnCloud Network API

    API for interacting with LearnCloud Network

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.boost_get_boost200_response_claim_permissions import BoostGetBoost200ResponseClaimPermissions
from typing import Optional, Set
from typing_extensions import Self

class BoostGetPaginatedBoosts200ResponseRecordsInner(BaseModel):
    """
    BoostGetPaginatedBoosts200ResponseRecordsInner
    """ # noqa: E501
    uri: StrictStr
    name: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    category: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    auto_connect_recipients: Optional[StrictBool] = Field(default=None, alias="autoConnectRecipients")
    meta: Optional[Dict[str, Any]] = None
    claim_permissions: Optional[BoostGetBoost200ResponseClaimPermissions] = Field(default=None, alias="claimPermissions")
    __properties: ClassVar[List[str]] = ["uri", "name", "type", "category", "status", "autoConnectRecipients", "meta", "claimPermissions"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DRAFT', 'LIVE']):
            raise ValueError("must be one of enum values ('DRAFT', 'LIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BoostGetPaginatedBoosts200ResponseRecordsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of claim_permissions
        if self.claim_permissions:
            _dict['claimPermissions'] = self.claim_permissions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BoostGetPaginatedBoosts200ResponseRecordsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uri": obj.get("uri"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "category": obj.get("category"),
            "status": obj.get("status"),
            "autoConnectRecipients": obj.get("autoConnectRecipients"),
            "meta": obj.get("meta"),
            "claimPermissions": BoostGetBoost200ResponseClaimPermissions.from_dict(obj["claimPermissions"]) if obj.get("claimPermissions") is not None else None
        })
        return _obj


