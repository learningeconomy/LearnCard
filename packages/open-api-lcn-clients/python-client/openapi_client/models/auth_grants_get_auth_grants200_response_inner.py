# coding: utf-8

"""
    LearnCard Network Profile Service API

    This is the API for interacting with a LearnCard Network Profile Service

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class AuthGrantsGetAuthGrants200ResponseInner(BaseModel):
    """
    AuthGrantsGetAuthGrants200ResponseInner
    """ # noqa: E501
    id: StrictStr
    name: StrictStr
    description: Optional[StrictStr] = None
    challenge: Annotated[str, Field(min_length=10, strict=True, max_length=100)]
    status: StrictStr
    scope: StrictStr
    created_at: datetime = Field(alias="createdAt")
    expires_at: Optional[datetime] = Field(default=None, alias="expiresAt")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "challenge", "status", "scope", "createdAt", "expiresAt"]

    @field_validator('challenge')
    def challenge_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^auth\-grant\:", value):
            raise ValueError(r"must validate the regular expression /^auth\-grant\:/")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['revoked', 'active']):
            raise ValueError("must be one of enum values ('revoked', 'active')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuthGrantsGetAuthGrants200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if expires_at (nullable) is None
        # and model_fields_set contains the field
        if self.expires_at is None and "expires_at" in self.model_fields_set:
            _dict['expiresAt'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuthGrantsGetAuthGrants200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "challenge": obj.get("challenge"),
            "status": obj.get("status"),
            "scope": obj.get("scope"),
            "createdAt": obj.get("createdAt"),
            "expiresAt": obj.get("expiresAt")
        })
        return _obj


