# coding: utf-8

"""
    LearnCloud Network API

    API for interacting with LearnCloud Network

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.contracts_create_consent_flow_contract_request_autoboosts_inner import ContractsCreateConsentFlowContractRequestAutoboostsInner
from openapi_client.models.contracts_create_consent_flow_contract_request_contract import ContractsCreateConsentFlowContractRequestContract
from typing import Optional, Set
from typing_extensions import Self

class ContractsCreateConsentFlowContractRequest(BaseModel):
    """
    ContractsCreateConsentFlowContractRequest
    """ # noqa: E501
    contract: ContractsCreateConsentFlowContractRequestContract
    name: StrictStr
    subtitle: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    reason_for_accessing: Optional[StrictStr] = Field(default=None, alias="reasonForAccessing")
    needs_guardian_consent: Optional[StrictBool] = Field(default=None, alias="needsGuardianConsent")
    redirect_url: Optional[StrictStr] = Field(default=None, alias="redirectUrl")
    front_door_boost_uri: Optional[StrictStr] = Field(default=None, alias="frontDoorBoostUri")
    image: Optional[StrictStr] = None
    expires_at: Optional[StrictStr] = Field(default=None, alias="expiresAt")
    autoboosts: Optional[List[ContractsCreateConsentFlowContractRequestAutoboostsInner]] = None
    writers: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["contract", "name", "subtitle", "description", "reasonForAccessing", "needsGuardianConsent", "redirectUrl", "frontDoorBoostUri", "image", "expiresAt", "autoboosts", "writers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContractsCreateConsentFlowContractRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of contract
        if self.contract:
            _dict['contract'] = self.contract.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in autoboosts (list)
        _items = []
        if self.autoboosts:
            for _item_autoboosts in self.autoboosts:
                if _item_autoboosts:
                    _items.append(_item_autoboosts.to_dict())
            _dict['autoboosts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContractsCreateConsentFlowContractRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contract": ContractsCreateConsentFlowContractRequestContract.from_dict(obj["contract"]) if obj.get("contract") is not None else None,
            "name": obj.get("name"),
            "subtitle": obj.get("subtitle"),
            "description": obj.get("description"),
            "reasonForAccessing": obj.get("reasonForAccessing"),
            "needsGuardianConsent": obj.get("needsGuardianConsent"),
            "redirectUrl": obj.get("redirectUrl"),
            "frontDoorBoostUri": obj.get("frontDoorBoostUri"),
            "image": obj.get("image"),
            "expiresAt": obj.get("expiresAt"),
            "autoboosts": [ContractsCreateConsentFlowContractRequestAutoboostsInner.from_dict(_item) for _item in obj["autoboosts"]] if obj.get("autoboosts") is not None else None,
            "writers": obj.get("writers")
        })
        return _obj


