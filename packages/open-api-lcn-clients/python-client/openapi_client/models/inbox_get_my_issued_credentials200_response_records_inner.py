# coding: utf-8

"""
    LearnCloud Network API

    API for interacting with LearnCloud Network

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class InboxGetMyIssuedCredentials200ResponseRecordsInner(BaseModel):
    """
    InboxGetMyIssuedCredentials200ResponseRecordsInner
    """ # noqa: E501
    id: StrictStr
    credential: StrictStr
    is_signed: StrictBool = Field(alias="isSigned")
    current_status: StrictStr = Field(alias="currentStatus")
    expires_at: StrictStr = Field(alias="expiresAt")
    created_at: StrictStr = Field(alias="createdAt")
    issuer_did: StrictStr = Field(alias="issuerDid")
    webhook_url: Optional[StrictStr] = Field(default=None, alias="webhookUrl")
    signing_authority_endpoint: Optional[StrictStr] = Field(default=None, alias="signingAuthority.endpoint")
    signing_authority_name: Optional[StrictStr] = Field(default=None, alias="signingAuthority.name")
    __properties: ClassVar[List[str]] = ["id", "credential", "isSigned", "currentStatus", "expiresAt", "createdAt", "issuerDid", "webhookUrl", "signingAuthority.endpoint", "signingAuthority.name"]

    @field_validator('current_status')
    def current_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['PENDING', 'DELIVERED', 'CLAIMED', 'EXPIRED']):
            raise ValueError("must be one of enum values ('PENDING', 'DELIVERED', 'CLAIMED', 'EXPIRED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InboxGetMyIssuedCredentials200ResponseRecordsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InboxGetMyIssuedCredentials200ResponseRecordsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "credential": obj.get("credential"),
            "isSigned": obj.get("isSigned"),
            "currentStatus": obj.get("currentStatus"),
            "expiresAt": obj.get("expiresAt"),
            "createdAt": obj.get("createdAt"),
            "issuerDid": obj.get("issuerDid"),
            "webhookUrl": obj.get("webhookUrl"),
            "signingAuthority.endpoint": obj.get("signingAuthority.endpoint"),
            "signingAuthority.name": obj.get("signingAuthority.name")
        })
        return _obj


