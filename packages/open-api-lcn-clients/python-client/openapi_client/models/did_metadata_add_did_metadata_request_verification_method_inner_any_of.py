# coding: utf-8

"""
    LearnCloud Network API

    API for interacting with LearnCloud Network

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.boost_send_boost_request_credential_any_of_context_inner import BoostSendBoostRequestCredentialAnyOfContextInner
from openapi_client.models.did_metadata_add_did_metadata_request_verification_method_inner_any_of_public_key_jwk import DidMetadataAddDidMetadataRequestVerificationMethodInnerAnyOfPublicKeyJwk
from typing import Optional, Set
from typing_extensions import Self

class DidMetadataAddDidMetadataRequestVerificationMethodInnerAnyOf(BaseModel):
    """
    DidMetadataAddDidMetadataRequestVerificationMethodInnerAnyOf
    """ # noqa: E501
    context: Optional[List[BoostSendBoostRequestCredentialAnyOfContextInner]] = Field(default=None, alias="@context")
    id: StrictStr
    type: StrictStr
    controller: StrictStr
    public_key_jwk: Optional[DidMetadataAddDidMetadataRequestVerificationMethodInnerAnyOfPublicKeyJwk] = Field(default=None, alias="publicKeyJwk")
    public_key_base58: Optional[StrictStr] = Field(default=None, alias="publicKeyBase58")
    block_chain_account_id: Optional[StrictStr] = Field(default=None, alias="blockChainAccountId")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["@context", "id", "type", "controller", "publicKeyJwk", "publicKeyBase58", "blockChainAccountId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DidMetadataAddDidMetadataRequestVerificationMethodInnerAnyOf from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in context (list)
        _items = []
        if self.context:
            for _item_context in self.context:
                if _item_context:
                    _items.append(_item_context.to_dict())
            _dict['@context'] = _items
        # override the default output from pydantic by calling `to_dict()` of public_key_jwk
        if self.public_key_jwk:
            _dict['publicKeyJwk'] = self.public_key_jwk.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DidMetadataAddDidMetadataRequestVerificationMethodInnerAnyOf from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "@context": [BoostSendBoostRequestCredentialAnyOfContextInner.from_dict(_item) for _item in obj["@context"]] if obj.get("@context") is not None else None,
            "id": obj.get("id"),
            "type": obj.get("type"),
            "controller": obj.get("controller"),
            "publicKeyJwk": DidMetadataAddDidMetadataRequestVerificationMethodInnerAnyOfPublicKeyJwk.from_dict(obj["publicKeyJwk"]) if obj.get("publicKeyJwk") is not None else None,
            "publicKeyBase58": obj.get("publicKeyBase58"),
            "blockChainAccountId": obj.get("blockChainAccountId")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


