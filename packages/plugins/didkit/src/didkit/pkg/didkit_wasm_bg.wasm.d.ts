/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export const getVersion: () => [number, number];
export const clearCache: () => any;
export const didResolver: (a: number, b: number, c: number, d: number) => any;
export const resolveDID: (a: number, b: number, c: number, d: number) => any;
export const generateEd25519Key: () => [number, number, number, number];
export const generateEd25519KeyFromBytes: (a: number, b: number) => [number, number, number, number];
export const generateSecp256k1Key: () => [number, number, number, number];
export const generateSecp256k1KeyFromBytes: (a: number, b: number) => [number, number, number, number];
export const createJwe: (a: number, b: number, c: number, d: number) => any;
export const decryptJwe: (a: number, b: number, c: number, d: number) => any;
export const createDagJwe: (a: any, b: number, c: number) => any;
export const decryptDagJwe: (a: number, b: number, c: number, d: number) => any;
export const keyToDID: (a: number, b: number, c: number, d: number) => [number, number, number, number];
export const keyToVerificationMethod: (a: number, b: number, c: number, d: number) => any;
export const didToVerificationMethod: (a: number, b: number) => any;
export const issueCredential: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => any;
export const prepareIssueCredential: (a: number, b: number, c: number, d: number, e: number, f: number) => any;
export const completeIssueCredential: (a: number, b: number, c: number, d: number, e: number, f: number) => any;
export const verifyCredential: (a: number, b: number, c: number, d: number, e: number, f: number) => any;
export const issuePresentation: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => any;
export const prepareIssuePresentation: (a: number, b: number, c: number, d: number, e: number, f: number) => any;
export const completeIssuePresentation: (a: number, b: number, c: number, d: number, e: number, f: number) => any;
export const verifyPresentation: (a: number, b: number, c: number, d: number, e: number, f: number) => any;
export const DIDAuth: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => any;
export const JWKFromTezos: (a: number, b: number) => any;
export const delegateCapability: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => any;
export const prepareDelegateCapability: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => any;
export const completeDelegateCapability: (a: number, b: number, c: number, d: number, e: number, f: number) => any;
export const verifyDelegation: (a: number, b: number) => any;
export const invokeCapability: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => any;
export const prepareInvokeCapability: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => any;
export const completeInvokeCapability: (a: number, b: number, c: number, d: number, e: number, f: number) => any;
export const verifyInvocationSignature: (a: number, b: number) => any;
export const verifyInvocation: (a: number, b: number, c: number, d: number) => any;
export const contextLoader: (a: number, b: number) => any;
export const didkit_error_message: () => number;
export const didkit_error_code: () => number;
export const __wbindgen_exn_store: (a: number) => void;
export const __externref_table_alloc: () => number;
export const __wbindgen_export_2: WebAssembly.Table;
export const __wbindgen_malloc: (a: number, b: number) => number;
export const __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
export const __wbindgen_export_5: WebAssembly.Table;
export const __wbindgen_free: (a: number, b: number, c: number) => void;
export const __externref_table_dealloc: (a: number) => void;
export const closure4178_externref_shim: (a: number, b: number, c: any) => void;
export const closure4580_externref_shim: (a: number, b: number, c: any, d: any) => void;
export const __wbindgen_start: () => void;
