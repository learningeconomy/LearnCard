{
  "version": 3,
  "sources": ["../src/index.ts", "../src/ler-rs.ts"],
  "sourcesContent": ["export { getLerRsPlugin } from './ler-rs';\nexport * from './types';\n", "import { VC as VerifiableCredential, UnsignedVC, VP as VerifiablePresentation, UnsignedVP } from '@learncard/types';\nimport { LERRSDependentLearnCard, LERRSPlugin, CreateLerRecordParams, CreateLerPresentationParams, VerifyLerPresentationParams, VerificationResult, LerRsRecord } from './types';\n\nconst VC_CONTEXT = 'https://www.w3.org/ns/credentials/v2';\nconst LERRS_TYPE = 'LERRS';\n\nconst toArray = <T>(maybe: T | T[] | undefined): T[] => (maybe == null ? [] : Array.isArray(maybe) ? maybe : [maybe]);\n\nconst buildEmploymentHistories = (items: NonNullable<CreateLerRecordParams['workHistory']>): LerRsRecord['employmentHistories'] => {\n  return items.map(item => {\n    const { narrative, verifiableCredential, position, employer, start, end, ...rest } = item;\n\n    const container: Record<string, unknown> = { ...rest };\n\n    if (employer) container.organization = { tradeName: employer };\n    if (position || start || end) {\n      const ph: Record<string, unknown> = {};\n      if (position) ph.title = position;\n      if (start) ph.start = start;\n      if (end) ph.end = end;\n      container.positionHistories = [ph];\n    }\n    if (narrative) container.narrative = narrative;\n\n    const verifications = verifiableCredential ? [verifiableCredential] : [];\n    return { ...container, ...(verifications.length ? { verifications } : {}) };\n  });\n};\n\nconst buildEducationAndLearnings = (items: NonNullable<CreateLerRecordParams['educationHistory']>): LerRsRecord['educationAndLearnings'] => {\n  return items.map(item => {\n    const { narrative, verifiableCredential, institution, start, end, degree, specializations, ...rest } = item;\n\n    const container: Record<string, unknown> = { ...rest };\n    if (institution) container.institution = institution;\n    if (start) container.start = start;\n    if (end) container.end = end;\n    if (degree || specializations) {\n      container.educationDegrees = [{ ...(degree ? { name: degree } : {}), ...(specializations ? { specializations } : {}) }];\n    }\n    if (narrative) container.narrative = narrative;\n\n    const verifications = verifiableCredential ? [verifiableCredential] : [];\n    return { ...container, ...(verifications.length ? { verifications } : {}) };\n  });\n};\n\nconst buildCertifications = (items: NonNullable<CreateLerRecordParams['certifications']>): LerRsRecord['certifications'] => {\n  return items.map(item => {\n    const { narrative, verifiableCredential, ...rest } = item;\n\n    const container: Record<string, unknown> = { ...rest };\n    if (narrative) container.narrative = narrative;\n\n    const verifications = verifiableCredential ? [verifiableCredential] : [];\n    return { ...container, ...(verifications.length ? { verifications } : {}) };\n  });\n};\n\nexport const getLerRsPlugin = (initLearnCard: LERRSDependentLearnCard): LERRSPlugin => {\n  return {\n    name: 'LER-RS',\n    displayName: 'LER-RS',\n    description: 'Create, package, and verify Learning & Employment Record Resume (LER-RS) credentials',\n    methods: {\n      createLerRecord: async (_learnCard, params): Promise<VerifiableCredential> => {\n        const signer = params.learnCard ?? _learnCard;\n        const did = signer.id.did();\n\n        const personSection: LerRsRecord['person'] = {\n          id: params.person.id,\n          name: {\n            givenName: params.person.givenName,\n            familyName: params.person.familyName,\n            formattedName: `${params.person.givenName} ${params.person.familyName}`,\n          },\n        };\n\n        const communication: LerRsRecord['communication'] | undefined = params.person.email\n          ? { emails: [{ address: params.person.email }] }\n          : undefined;\n\n        const lerRecord: LerRsRecord = {\n          person: personSection,\n          ...(communication ? { communication } : {}),\n          skills: (params.skills || []).map(s => ({ name: s })),\n          employmentHistories: params.workHistory ? buildEmploymentHistories(params.workHistory) : undefined,\n          educationAndLearnings: params.educationHistory ? buildEducationAndLearnings(params.educationHistory) : undefined,\n          certifications: params.certifications ? buildCertifications(params.certifications) : undefined,\n          narratives: [],\n        };\n\n        const unsignedVC: UnsignedVC = {\n          '@context': [VC_CONTEXT],\n          id: `urn:uuid:${crypto.randomUUID()}`,\n          type: ['VerifiableCredential', LERRS_TYPE],\n          issuer: did,\n          validFrom: new Date().toISOString(),\n          credentialSubject: {\n            id: params.person.id,\n            ler: lerRecord,\n          },\n        };\n\n        return initLearnCard.invoke.issueCredential(unsignedVC, { proofPurpose: 'assertionMethod' });\n      },\n\n      createLerPresentation: async (_learnCard, params): Promise<VerifiablePresentation> => {\n        const signer = params.learnCard ?? _learnCard;\n        const did = signer.id.did();\n\n        if (!params.credentials.length) throw new Error('createLerPresentation: credentials array must contain at least one credential');\n        const containsLer = params.credentials.some(vc => Array.isArray(vc.type) && vc.type.includes(LERRS_TYPE));\n        if (!containsLer) throw new Error('createLerPresentation: credentials must include at least one LER-RS credential');\n\n        const vp: UnsignedVP = {\n          '@context': [VC_CONTEXT],\n          type: ['VerifiablePresentation'],\n          holder: did,\n          verifiableCredential: params.credentials.length === 1 ? params.credentials[0] : params.credentials,\n        };\n\n        return initLearnCard.invoke.issuePresentation(vp, {\n          ...(params.domain ? { domain: params.domain } : {}),\n          ...(params.challenge ? { challenge: params.challenge } : {}),\n        });\n      },\n\n      verifyLerPresentation: async (_learnCard, { presentation, domain, challenge }: VerifyLerPresentationParams): Promise<VerificationResult> => {\n        const presCheck = await initLearnCard.invoke.verifyPresentation(presentation, {\n          ...(domain ? { domain } : {}),\n          ...(challenge ? { challenge } : {}),\n        });\n\n        const presentationResult = {\n          verified: presCheck.errors.length === 0,\n          errors: presCheck.errors.length ? presCheck.errors : undefined,\n        };\n\n        const credentialResults: VerificationResult['credentialResults'] = [];\n\n        if (typeof presentation !== 'string') {\n          const holder = presentation.holder;\n          const vcs = toArray<VerifiableCredential>(presentation.verifiableCredential as any);\n\n          for (const credential of vcs) {\n            try {\n              const credCheck = await initLearnCard.invoke.verifyCredential(credential);\n              const issuerDid = typeof credential.issuer === 'string' ? credential.issuer : credential.issuer?.id;\n              const isSelfIssued = (Array.isArray(credential.type) && credential.type.includes(LERRS_TYPE)) || (!!holder && !!issuerDid && issuerDid === holder);\n\n              credentialResults.push({\n                credential,\n                verified: credCheck.errors.length === 0,\n                isSelfIssued,\n                errors: credCheck.errors.length ? credCheck.errors : undefined,\n              });\n            } catch (err) {\n              credentialResults.push({\n                credential,\n                verified: false,\n                isSelfIssued: false,\n                errors: [err instanceof Error ? err.message : 'Unknown error verifying credential'],\n              });\n            }\n          }\n        }\n\n        return {\n          verified: presentationResult.verified && credentialResults.every(r => r.verified || r.isSelfIssued),\n          presentationResult,\n          credentialResults,\n        };\n      },\n    },\n  };\n};\n"],
  "mappings": "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",
  "names": []
}
