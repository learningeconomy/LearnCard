{
  "version": 3,
  "sources": ["../src/index.ts", "../src/ler-rs.ts"],
  "sourcesContent": ["export { getLerRsPlugin } from './ler-rs';\nexport * from './types';\n", "import { VC as VerifiableCredential, UnsignedVC, VP as VerifiablePresentation, UnsignedVP } from '@learncard/types';\nimport { LERRSDependentLearnCard, LERRSPlugin, CreateLerRecordParams, CreateLerPresentationParams, VerifyLerPresentationParams, VerificationResult, LerRsRecord } from './types';\n\nconst VC_CONTEXT = 'https://www.w3.org/ns/credentials/v2';\nconst LERRS_TYPE = 'LERRS';\n\nconst toArray = <T>(maybe: T | T[] | undefined): T[] => (maybe == null ? [] : Array.isArray(maybe) ? maybe : [maybe]);\n\nconst buildEmploymentHistories = (items: NonNullable<CreateLerRecordParams['workHistory']>): LerRsRecord['employmentHistories'] => {\n  return items.map(item => {\n    const { narrative, verifiableCredential, position, employer, start, end, ...rest } = item;\n\n    const container: Record<string, unknown> = { ...rest };\n\n    if (employer) container.organization = { tradeName: employer };\n    if (position || start || end) {\n      const ph: Record<string, unknown> = {};\n      if (position) ph.title = position;\n      if (start) ph.start = start;\n      if (end) ph.end = end;\n      container.positionHistories = [ph];\n    }\n    if (narrative) container.narrative = narrative;\n\n    const verifications = verifiableCredential ? [verifiableCredential] : [];\n    return { ...container, ...(verifications.length ? { verifications } : {}) };\n  });\n};\n\nconst buildEducationAndLearnings = (items: NonNullable<CreateLerRecordParams['educationHistory']>): LerRsRecord['educationAndLearnings'] => {\n  return items.map(item => {\n    const { narrative, verifiableCredential, institution, start, end, degree, specializations, ...rest } = item;\n\n    const container: Record<string, unknown> = { ...rest };\n    if (institution) container.institution = institution;\n    if (start) container.start = start;\n    if (end) container.end = end;\n    if (degree || specializations) {\n      container.educationDegrees = [{ ...(degree ? { name: degree } : {}), ...(specializations ? { specializations } : {}) }];\n    }\n    if (narrative) container.narrative = narrative;\n\n    const verifications = verifiableCredential ? [verifiableCredential] : [];\n    return { ...container, ...(verifications.length ? { verifications } : {}) };\n  });\n};\n\nconst buildCertifications = (items: NonNullable<CreateLerRecordParams['certifications']>): LerRsRecord['certifications'] => {\n  return items.map(item => {\n    const { narrative, verifiableCredential, ...rest } = item;\n\n    const container: Record<string, unknown> = { ...rest };\n    if (narrative) container.narrative = narrative;\n\n    const verifications = verifiableCredential ? [verifiableCredential] : [];\n    return { ...container, ...(verifications.length ? { verifications } : {}) };\n  });\n};\n\nexport const getLerRsPlugin = (initLearnCard: LERRSDependentLearnCard): LERRSPlugin => {\n  return {\n    name: 'LER-RS',\n    displayName: 'LER-RS',\n    description: 'Create, package, and verify Learning & Employment Record Resume (LER-RS) credentials',\n    methods: {\n      createLerRecord: async (_learnCard, params): Promise<VerifiableCredential> => {\n        const signer = params.learnCard ?? _learnCard;\n        const did = signer.id.did();\n\n        const personSection: LerRsRecord['person'] = {\n          id: params.person.id,\n          name: {\n            givenName: params.person.givenName,\n            familyName: params.person.familyName,\n            formattedName: `${params.person.givenName} ${params.person.familyName}`,\n          },\n        };\n\n        const communication: LerRsRecord['communication'] | undefined = params.person.email\n          ? { emails: [{ address: params.person.email }] }\n          : undefined;\n\n        const lerRecord: LerRsRecord = {\n          person: personSection,\n          ...(communication ? { communication } : {}),\n          skills: (params.skills || []).map(s => ({ name: s })),\n          employmentHistories: params.workHistory ? buildEmploymentHistories(params.workHistory) : undefined,\n          educationAndLearnings: params.educationHistory ? buildEducationAndLearnings(params.educationHistory) : undefined,\n          certifications: params.certifications ? buildCertifications(params.certifications) : undefined,\n          narratives: [],\n        };\n\n        const unsignedVC: UnsignedVC = {\n          '@context': [VC_CONTEXT],\n          id: `urn:uuid:${crypto.randomUUID()}`,\n          type: ['VerifiableCredential', LERRS_TYPE],\n          issuer: did,\n          validFrom: new Date().toISOString(),\n          credentialSubject: {\n            id: params.person.id,\n            ler: lerRecord,\n          },\n        };\n\n        return initLearnCard.invoke.issueCredential(unsignedVC, { proofPurpose: 'assertionMethod' });\n      },\n\n      createLerPresentation: async (_learnCard, params): Promise<VerifiablePresentation> => {\n        const signer = params.learnCard ?? _learnCard;\n        const did = signer.id.did();\n\n        if (!params.credentials.length) throw new Error('createLerPresentation: credentials array must contain at least one credential');\n        const containsLer = params.credentials.some(vc => Array.isArray(vc.type) && vc.type.includes(LERRS_TYPE));\n        if (!containsLer) throw new Error('createLerPresentation: credentials must include at least one LER-RS credential');\n\n        const vp: UnsignedVP = {\n          '@context': [VC_CONTEXT],\n          type: ['VerifiablePresentation'],\n          holder: did,\n          verifiableCredential: params.credentials.length === 1 ? params.credentials[0] : params.credentials,\n        };\n\n        return initLearnCard.invoke.issuePresentation(vp, {\n          ...(params.domain ? { domain: params.domain } : {}),\n          ...(params.challenge ? { challenge: params.challenge } : {}),\n        });\n      },\n\n      verifyLerPresentation: async (_learnCard, { presentation, domain, challenge }: VerifyLerPresentationParams): Promise<VerificationResult> => {\n        const presCheck = await initLearnCard.invoke.verifyPresentation(presentation, {\n          ...(domain ? { domain } : {}),\n          ...(challenge ? { challenge } : {}),\n        });\n\n        const presentationResult = {\n          verified: presCheck.errors.length === 0,\n          errors: presCheck.errors.length ? presCheck.errors : undefined,\n        };\n\n        const credentialResults: VerificationResult['credentialResults'] = [];\n\n        if (typeof presentation !== 'string') {\n          const holder = presentation.holder;\n          const vcs = toArray<VerifiableCredential>(presentation.verifiableCredential as any);\n\n          for (const credential of vcs) {\n            try {\n              const credCheck = await initLearnCard.invoke.verifyCredential(credential);\n              const issuerDid = typeof credential.issuer === 'string' ? credential.issuer : credential.issuer?.id;\n              const isSelfIssued = (Array.isArray(credential.type) && credential.type.includes(LERRS_TYPE)) || (!!holder && !!issuerDid && issuerDid === holder);\n\n              credentialResults.push({\n                credential,\n                verified: credCheck.errors.length === 0,\n                isSelfIssued,\n                errors: credCheck.errors.length ? credCheck.errors : undefined,\n              });\n            } catch (err) {\n              credentialResults.push({\n                credential,\n                verified: false,\n                isSelfIssued: false,\n                errors: [err instanceof Error ? err.message : 'Unknown error verifying credential'],\n              });\n            }\n          }\n        }\n\n        return {\n          verified: presentationResult.verified && credentialResults.every(r => r.verified || r.isSelfIssued),\n          presentationResult,\n          credentialResults,\n        };\n      },\n    },\n  };\n};\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "getLerRsPlugin", "__toCommonJS", "VC_CONTEXT", "LERRS_TYPE", "toArray", "__name", "maybe", "buildEmploymentHistories", "items", "item", "narrative", "verifiableCredential", "position", "employer", "start", "end", "rest", "container", "ph", "verifications", "buildEducationAndLearnings", "institution", "degree", "specializations", "buildCertifications", "getLerRsPlugin", "initLearnCard", "_learnCard", "params", "did", "personSection", "communication", "lerRecord", "s", "unsignedVC", "vc", "vp", "presentation", "domain", "challenge", "presCheck", "presentationResult", "credentialResults", "holder", "vcs", "credential", "credCheck", "issuerDid", "isSelfIssued", "err", "r"]
}
