"use strict";var o=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var c=Object.getOwnPropertyNames;var u=Object.prototype.hasOwnProperty;var i=(e,r)=>o(e,"name",{value:r,configurable:!0});var V=(e,r)=>{for(var t in r)o(e,t,{get:r[t],enumerable:!0})},l=(e,r,t,s)=>{if(r&&typeof r=="object"||typeof r=="function")for(let n of c(r))!u.call(e,n)&&n!==t&&o(e,n,{get:()=>r[n],enumerable:!(s=g(r,n))||s.enumerable});return e};var O=e=>l(o({},"__esModule",{value:!0}),e);var y={};V(y,{OBV2_WRAPPER_CONTEXT_URL:()=>a,openBadgeV2Plugin:()=>d});module.exports=O(y);var a="https://docs.learncard.com/wrappers/obv2/1.0.0.json";var f="https://www.w3.org/ns/credentials/v2",h=i(e=>/^(https?:)?\/\//i.test(e)||e.startsWith("ipfs://")||e.startsWith("ipns://"),"isUrl");async function m(e){if(typeof e=="string"){let r=e.trim();if(!h(r)&&(r.startsWith("{")||r.startsWith("[")))try{return JSON.parse(r)}catch{throw new Error("wrapOpenBadgeV2: Provided string is not a valid URL or JSON")}let t=await fetch(r);if(!t.ok)throw new Error(`wrapOpenBadgeV2: Failed to fetch OBv2 assertion: ${t.status}`);return await t.json()}return e}i(m,"getObv2Assertion");function w(e){if(!e||typeof e!="object")throw new Error("wrapOpenBadgeV2: Missing assertion");let r=e.id;if(typeof r!="string"||!r.length)throw new Error("wrapOpenBadgeV2: assertion.id is required");let t=e.type;if(!(typeof t=="string"&&t==="Assertion"||Array.isArray(t)&&t.includes("Assertion")))throw new Error("wrapOpenBadgeV2: assertion.type must include 'Assertion'");if(!e.issuedOn||typeof e.issuedOn!="string")throw new Error("wrapOpenBadgeV2: assertion.issuedOn (string) is required")}i(w,"validateObv2");var d=i(e=>({name:"OpenBadgeV2",displayName:"OpenBadge v2 Wrapper",description:"Wrap legacy OpenBadge v2.0 assertions into self-issued Verifiable Credentials",methods:{wrapOpenBadgeV2:async(r,t)=>{let s=e.id.did(),n=await m(t);w(n);let p={"@context":[f,a],id:`urn:uuid:${crypto.randomUUID()}`,type:["VerifiableCredential","LegacyOpenBadgeCredential"],issuer:s,validFrom:new Date().toISOString(),credentialSubject:{id:s,legacyAssertion:n}};return e.invoke.issueCredential(p,{proofPurpose:"assertionMethod"})}}}),"openBadgeV2Plugin");
//# sourceMappingURL=open-badge-v2-plugin.cjs.production.min.js.map
